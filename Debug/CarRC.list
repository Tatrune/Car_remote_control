
CarRC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d108  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  0800d298  0800d298  0001d298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d3a0  0800d3a0  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800d3a0  0800d3a0  0001d3a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d3a8  0800d3a8  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d3a8  0800d3a8  0001d3a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d3ac  0800d3ac  0001d3ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800d3b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          00005184  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005218  20005218  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023be2  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004e01  00000000  00000000  00043ca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c00  00000000  00000000  00048aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001a38  00000000  00000000  0004a6a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000073bd  00000000  00000000  0004c0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000217f3  00000000  00000000  0005349d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e73ec  00000000  00000000  00074c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015c07c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007a38  00000000  00000000  0015c0cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d280 	.word	0x0800d280

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800d280 	.word	0x0800d280

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <dithang>:
void adcread1(void *argument);

/* USER CODE BEGIN PFP */

	void dithang()
	{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_6 , 1);
 8000578:	2201      	movs	r2, #1
 800057a:	2169      	movs	r1, #105	; 0x69
 800057c:	4804      	ldr	r0, [pc, #16]	; (8000590 <dithang+0x1c>)
 800057e:	f001 fdcb 	bl	8002118 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | GPIO_PIN_7 , 0);
 8000582:	2200      	movs	r2, #0
 8000584:	2196      	movs	r1, #150	; 0x96
 8000586:	4802      	ldr	r0, [pc, #8]	; (8000590 <dithang+0x1c>)
 8000588:	f001 fdc6 	bl	8002118 <HAL_GPIO_WritePin>
	}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}
 8000590:	40020000 	.word	0x40020000

08000594 <dilui>:
	void dilui()
	  {
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_6, 0);
 8000598:	2200      	movs	r2, #0
 800059a:	2169      	movs	r1, #105	; 0x69
 800059c:	4804      	ldr	r0, [pc, #16]	; (80005b0 <dilui+0x1c>)
 800059e:	f001 fdbb 	bl	8002118 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | GPIO_PIN_7, 1);
 80005a2:	2201      	movs	r2, #1
 80005a4:	2196      	movs	r1, #150	; 0x96
 80005a6:	4802      	ldr	r0, [pc, #8]	; (80005b0 <dilui+0x1c>)
 80005a8:	f001 fdb6 	bl	8002118 <HAL_GPIO_WritePin>
	  }
 80005ac:	bf00      	nop
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	40020000 	.word	0x40020000

080005b4 <dunglai>:
	void dunglai()
	{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_6 ,1);
 80005b8:	2201      	movs	r2, #1
 80005ba:	2169      	movs	r1, #105	; 0x69
 80005bc:	4804      	ldr	r0, [pc, #16]	; (80005d0 <dunglai+0x1c>)
 80005be:	f001 fdab 	bl	8002118 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | GPIO_PIN_7 ,1);
 80005c2:	2201      	movs	r2, #1
 80005c4:	2196      	movs	r1, #150	; 0x96
 80005c6:	4802      	ldr	r0, [pc, #8]	; (80005d0 <dunglai+0x1c>)
 80005c8:	f001 fda6 	bl	8002118 <HAL_GPIO_WritePin>
	}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40020000 	.word	0x40020000

080005d4 <dingangphai>:
	void dingangphai()
	{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 ,1);
 80005d8:	2201      	movs	r2, #1
 80005da:	215a      	movs	r1, #90	; 0x5a
 80005dc:	4804      	ldr	r0, [pc, #16]	; (80005f0 <dingangphai+0x1c>)
 80005de:	f001 fd9b 	bl	8002118 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_5 | GPIO_PIN_7 ,0);
 80005e2:	2200      	movs	r2, #0
 80005e4:	21a5      	movs	r1, #165	; 0xa5
 80005e6:	4802      	ldr	r0, [pc, #8]	; (80005f0 <dingangphai+0x1c>)
 80005e8:	f001 fd96 	bl	8002118 <HAL_GPIO_WritePin>
	}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40020000 	.word	0x40020000

080005f4 <dingangtrai>:

	void dingangtrai()
	{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_5 | GPIO_PIN_7 ,1);
 80005f8:	2201      	movs	r2, #1
 80005fa:	21a5      	movs	r1, #165	; 0xa5
 80005fc:	4804      	ldr	r0, [pc, #16]	; (8000610 <dingangtrai+0x1c>)
 80005fe:	f001 fd8b 	bl	8002118 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 ,0);
 8000602:	2200      	movs	r2, #0
 8000604:	215a      	movs	r1, #90	; 0x5a
 8000606:	4802      	ldr	r0, [pc, #8]	; (8000610 <dingangtrai+0x1c>)
 8000608:	f001 fd86 	bl	8002118 <HAL_GPIO_WritePin>
	}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}
 8000610:	40020000 	.word	0x40020000

08000614 <queotrai>:
	void queotrai()
	  {
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_4 | GPIO_PIN_6, 0);
 8000618:	2200      	movs	r2, #0
 800061a:	2155      	movs	r1, #85	; 0x55
 800061c:	4804      	ldr	r0, [pc, #16]	; (8000630 <queotrai+0x1c>)
 800061e:	f001 fd7b 	bl	8002118 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_7, 1);
 8000622:	2201      	movs	r2, #1
 8000624:	21aa      	movs	r1, #170	; 0xaa
 8000626:	4802      	ldr	r0, [pc, #8]	; (8000630 <queotrai+0x1c>)
 8000628:	f001 fd76 	bl	8002118 <HAL_GPIO_WritePin>
	  }
 800062c:	bf00      	nop
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40020000 	.word	0x40020000

08000634 <queophai>:
	void queophai()
	  {
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_4 | GPIO_PIN_6, 1);
 8000638:	2201      	movs	r2, #1
 800063a:	2155      	movs	r1, #85	; 0x55
 800063c:	4804      	ldr	r0, [pc, #16]	; (8000650 <queophai+0x1c>)
 800063e:	f001 fd6b 	bl	8002118 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_7, 0);
 8000642:	2200      	movs	r2, #0
 8000644:	21aa      	movs	r1, #170	; 0xaa
 8000646:	4802      	ldr	r0, [pc, #8]	; (8000650 <queophai+0x1c>)
 8000648:	f001 fd66 	bl	8002118 <HAL_GPIO_WritePin>
	  }
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40020000 	.word	0x40020000

08000654 <xienlen_trai>:
	void xienlen_trai()
		  {
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0 | GPIO_PIN_5 , 1);
 8000658:	2201      	movs	r2, #1
 800065a:	2121      	movs	r1, #33	; 0x21
 800065c:	4807      	ldr	r0, [pc, #28]	; (800067c <xienlen_trai+0x28>)
 800065e:	f001 fd5b 	bl	8002118 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1 | GPIO_PIN_4 , 0);
 8000662:	2200      	movs	r2, #0
 8000664:	2112      	movs	r1, #18
 8000666:	4805      	ldr	r0, [pc, #20]	; (800067c <xienlen_trai+0x28>)
 8000668:	f001 fd56 	bl	8002118 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_6 | GPIO_PIN_7 , 0);
 800066c:	2200      	movs	r2, #0
 800066e:	21cc      	movs	r1, #204	; 0xcc
 8000670:	4802      	ldr	r0, [pc, #8]	; (800067c <xienlen_trai+0x28>)
 8000672:	f001 fd51 	bl	8002118 <HAL_GPIO_WritePin>
		  }
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40020000 	.word	0x40020000

08000680 <xienxuong_phai>:
	void xienxuong_phai()
		  {
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0 | GPIO_PIN_5 , 0);
 8000684:	2200      	movs	r2, #0
 8000686:	2121      	movs	r1, #33	; 0x21
 8000688:	4807      	ldr	r0, [pc, #28]	; (80006a8 <xienxuong_phai+0x28>)
 800068a:	f001 fd45 	bl	8002118 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1 | GPIO_PIN_4 , 1);
 800068e:	2201      	movs	r2, #1
 8000690:	2112      	movs	r1, #18
 8000692:	4805      	ldr	r0, [pc, #20]	; (80006a8 <xienxuong_phai+0x28>)
 8000694:	f001 fd40 	bl	8002118 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_6 | GPIO_PIN_7 , 0);
 8000698:	2200      	movs	r2, #0
 800069a:	21cc      	movs	r1, #204	; 0xcc
 800069c:	4802      	ldr	r0, [pc, #8]	; (80006a8 <xienxuong_phai+0x28>)
 800069e:	f001 fd3b 	bl	8002118 <HAL_GPIO_WritePin>
		  }
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40020000 	.word	0x40020000

080006ac <xienlen_phai>:
	void xienlen_phai()
			  {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3 | GPIO_PIN_6 , 1);
 80006b0:	2201      	movs	r2, #1
 80006b2:	2148      	movs	r1, #72	; 0x48
 80006b4:	4807      	ldr	r0, [pc, #28]	; (80006d4 <xienlen_phai+0x28>)
 80006b6:	f001 fd2f 	bl	8002118 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2 | GPIO_PIN_7 , 0);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2184      	movs	r1, #132	; 0x84
 80006be:	4805      	ldr	r0, [pc, #20]	; (80006d4 <xienlen_phai+0x28>)
 80006c0:	f001 fd2a 	bl	8002118 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 , 0);
 80006c4:	2200      	movs	r2, #0
 80006c6:	2133      	movs	r1, #51	; 0x33
 80006c8:	4802      	ldr	r0, [pc, #8]	; (80006d4 <xienlen_phai+0x28>)
 80006ca:	f001 fd25 	bl	8002118 <HAL_GPIO_WritePin>
			  }
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40020000 	.word	0x40020000

080006d8 <xienxuong_trai>:
	void xienxuong_trai()
			  {
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3 | GPIO_PIN_6 , 0);
 80006dc:	2200      	movs	r2, #0
 80006de:	2148      	movs	r1, #72	; 0x48
 80006e0:	4807      	ldr	r0, [pc, #28]	; (8000700 <xienxuong_trai+0x28>)
 80006e2:	f001 fd19 	bl	8002118 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2 | GPIO_PIN_7 , 1);
 80006e6:	2201      	movs	r2, #1
 80006e8:	2184      	movs	r1, #132	; 0x84
 80006ea:	4805      	ldr	r0, [pc, #20]	; (8000700 <xienxuong_trai+0x28>)
 80006ec:	f001 fd14 	bl	8002118 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 , 0);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2133      	movs	r1, #51	; 0x33
 80006f4:	4802      	ldr	r0, [pc, #8]	; (8000700 <xienxuong_trai+0x28>)
 80006f6:	f001 fd0f 	bl	8002118 <HAL_GPIO_WritePin>
			  }
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40020000 	.word	0x40020000

08000704 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000708:	f000 fd64 	bl	80011d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800070c:	f000 f838 	bl	8000780 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000710:	f000 f994 	bl	8000a3c <MX_GPIO_Init>
  MX_UART4_Init();
 8000714:	f000 f968 	bl	80009e8 <MX_UART4_Init>
  MX_ADC1_Init();
 8000718:	f000 f89c 	bl	8000854 <MX_ADC1_Init>
  MX_TIM4_Init();
 800071c:	f000 f8ee 	bl	80008fc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000720:	f008 fec0 	bl	80094a4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of nhanUart */
  nhanUartHandle = osThreadNew(Uart4rec, NULL, &nhanUart_attributes);
 8000724:	4a0d      	ldr	r2, [pc, #52]	; (800075c <main+0x58>)
 8000726:	2100      	movs	r1, #0
 8000728:	480d      	ldr	r0, [pc, #52]	; (8000760 <main+0x5c>)
 800072a:	f008 ff05 	bl	8009538 <osThreadNew>
 800072e:	4603      	mov	r3, r0
 8000730:	4a0c      	ldr	r2, [pc, #48]	; (8000764 <main+0x60>)
 8000732:	6013      	str	r3, [r2, #0]

  /* creation of run */
  runHandle = osThreadNew(runcar, NULL, &run_attributes);
 8000734:	4a0c      	ldr	r2, [pc, #48]	; (8000768 <main+0x64>)
 8000736:	2100      	movs	r1, #0
 8000738:	480c      	ldr	r0, [pc, #48]	; (800076c <main+0x68>)
 800073a:	f008 fefd 	bl	8009538 <osThreadNew>
 800073e:	4603      	mov	r3, r0
 8000740:	4a0b      	ldr	r2, [pc, #44]	; (8000770 <main+0x6c>)
 8000742:	6013      	str	r3, [r2, #0]

  /* creation of ADCread */
  ADCreadHandle = osThreadNew(adcread1, NULL, &ADCread_attributes);
 8000744:	4a0b      	ldr	r2, [pc, #44]	; (8000774 <main+0x70>)
 8000746:	2100      	movs	r1, #0
 8000748:	480b      	ldr	r0, [pc, #44]	; (8000778 <main+0x74>)
 800074a:	f008 fef5 	bl	8009538 <osThreadNew>
 800074e:	4603      	mov	r3, r0
 8000750:	4a0a      	ldr	r2, [pc, #40]	; (800077c <main+0x78>)
 8000752:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000754:	f008 feca 	bl	80094ec <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000758:	e7fe      	b.n	8000758 <main+0x54>
 800075a:	bf00      	nop
 800075c:	0800d2e8 	.word	0x0800d2e8
 8000760:	08000c8d 	.word	0x08000c8d
 8000764:	20000184 	.word	0x20000184
 8000768:	0800d30c 	.word	0x0800d30c
 800076c:	08000cd1 	.word	0x08000cd1
 8000770:	20000188 	.word	0x20000188
 8000774:	0800d330 	.word	0x0800d330
 8000778:	08000de9 	.word	0x08000de9
 800077c:	2000018c 	.word	0x2000018c

08000780 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b094      	sub	sp, #80	; 0x50
 8000784:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000786:	f107 0320 	add.w	r3, r7, #32
 800078a:	2230      	movs	r2, #48	; 0x30
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f00c f90e 	bl	800c9b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000794:	f107 030c 	add.w	r3, r7, #12
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a4:	2300      	movs	r3, #0
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	4b28      	ldr	r3, [pc, #160]	; (800084c <SystemClock_Config+0xcc>)
 80007aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ac:	4a27      	ldr	r2, [pc, #156]	; (800084c <SystemClock_Config+0xcc>)
 80007ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b2:	6413      	str	r3, [r2, #64]	; 0x40
 80007b4:	4b25      	ldr	r3, [pc, #148]	; (800084c <SystemClock_Config+0xcc>)
 80007b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007c0:	2300      	movs	r3, #0
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	4b22      	ldr	r3, [pc, #136]	; (8000850 <SystemClock_Config+0xd0>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a21      	ldr	r2, [pc, #132]	; (8000850 <SystemClock_Config+0xd0>)
 80007ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ce:	6013      	str	r3, [r2, #0]
 80007d0:	4b1f      	ldr	r3, [pc, #124]	; (8000850 <SystemClock_Config+0xd0>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007dc:	2301      	movs	r3, #1
 80007de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e6:	2302      	movs	r3, #2
 80007e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007f0:	2308      	movs	r3, #8
 80007f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007f4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007fa:	2302      	movs	r3, #2
 80007fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007fe:	2307      	movs	r3, #7
 8000800:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000802:	f107 0320 	add.w	r3, r7, #32
 8000806:	4618      	mov	r0, r3
 8000808:	f003 f8aa 	bl	8003960 <HAL_RCC_OscConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000812:	f000 fb0b 	bl	8000e2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000816:	230f      	movs	r3, #15
 8000818:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081a:	2302      	movs	r3, #2
 800081c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000822:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000826:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000828:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800082c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800082e:	f107 030c 	add.w	r3, r7, #12
 8000832:	2105      	movs	r1, #5
 8000834:	4618      	mov	r0, r3
 8000836:	f003 fb0b 	bl	8003e50 <HAL_RCC_ClockConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000840:	f000 faf4 	bl	8000e2c <Error_Handler>
  }
}
 8000844:	bf00      	nop
 8000846:	3750      	adds	r7, #80	; 0x50
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40023800 	.word	0x40023800
 8000850:	40007000 	.word	0x40007000

08000854 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800085a:	463b      	mov	r3, r7
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000866:	4b22      	ldr	r3, [pc, #136]	; (80008f0 <MX_ADC1_Init+0x9c>)
 8000868:	4a22      	ldr	r2, [pc, #136]	; (80008f4 <MX_ADC1_Init+0xa0>)
 800086a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800086c:	4b20      	ldr	r3, [pc, #128]	; (80008f0 <MX_ADC1_Init+0x9c>)
 800086e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000872:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000874:	4b1e      	ldr	r3, [pc, #120]	; (80008f0 <MX_ADC1_Init+0x9c>)
 8000876:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800087a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800087c:	4b1c      	ldr	r3, [pc, #112]	; (80008f0 <MX_ADC1_Init+0x9c>)
 800087e:	2200      	movs	r2, #0
 8000880:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000882:	4b1b      	ldr	r3, [pc, #108]	; (80008f0 <MX_ADC1_Init+0x9c>)
 8000884:	2200      	movs	r2, #0
 8000886:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000888:	4b19      	ldr	r3, [pc, #100]	; (80008f0 <MX_ADC1_Init+0x9c>)
 800088a:	2200      	movs	r2, #0
 800088c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000890:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <MX_ADC1_Init+0x9c>)
 8000892:	2200      	movs	r2, #0
 8000894:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000896:	4b16      	ldr	r3, [pc, #88]	; (80008f0 <MX_ADC1_Init+0x9c>)
 8000898:	4a17      	ldr	r2, [pc, #92]	; (80008f8 <MX_ADC1_Init+0xa4>)
 800089a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800089c:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <MX_ADC1_Init+0x9c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008a2:	4b13      	ldr	r3, [pc, #76]	; (80008f0 <MX_ADC1_Init+0x9c>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008a8:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <MX_ADC1_Init+0x9c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <MX_ADC1_Init+0x9c>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008b6:	480e      	ldr	r0, [pc, #56]	; (80008f0 <MX_ADC1_Init+0x9c>)
 80008b8:	f000 fd22 	bl	8001300 <HAL_ADC_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80008c2:	f000 fab3 	bl	8000e2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80008c6:	230e      	movs	r3, #14
 80008c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008ca:	2301      	movs	r3, #1
 80008cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008ce:	2300      	movs	r3, #0
 80008d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d2:	463b      	mov	r3, r7
 80008d4:	4619      	mov	r1, r3
 80008d6:	4806      	ldr	r0, [pc, #24]	; (80008f0 <MX_ADC1_Init+0x9c>)
 80008d8:	f000 fec0 	bl	800165c <HAL_ADC_ConfigChannel>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80008e2:	f000 faa3 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008e6:	bf00      	nop
 80008e8:	3710      	adds	r7, #16
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	200000b0 	.word	0x200000b0
 80008f4:	40012000 	.word	0x40012000
 80008f8:	0f000001 	.word	0x0f000001

080008fc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08e      	sub	sp, #56	; 0x38
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000902:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000910:	f107 0320 	add.w	r3, r7, #32
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]
 8000928:	615a      	str	r2, [r3, #20]
 800092a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800092c:	4b2c      	ldr	r3, [pc, #176]	; (80009e0 <MX_TIM4_Init+0xe4>)
 800092e:	4a2d      	ldr	r2, [pc, #180]	; (80009e4 <MX_TIM4_Init+0xe8>)
 8000930:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840;
 8000932:	4b2b      	ldr	r3, [pc, #172]	; (80009e0 <MX_TIM4_Init+0xe4>)
 8000934:	f44f 7252 	mov.w	r2, #840	; 0x348
 8000938:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093a:	4b29      	ldr	r3, [pc, #164]	; (80009e0 <MX_TIM4_Init+0xe4>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8000940:	4b27      	ldr	r3, [pc, #156]	; (80009e0 <MX_TIM4_Init+0xe4>)
 8000942:	2263      	movs	r2, #99	; 0x63
 8000944:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000946:	4b26      	ldr	r3, [pc, #152]	; (80009e0 <MX_TIM4_Init+0xe4>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800094c:	4b24      	ldr	r3, [pc, #144]	; (80009e0 <MX_TIM4_Init+0xe4>)
 800094e:	2200      	movs	r2, #0
 8000950:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000952:	4823      	ldr	r0, [pc, #140]	; (80009e0 <MX_TIM4_Init+0xe4>)
 8000954:	f003 fc9c 	bl	8004290 <HAL_TIM_Base_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800095e:	f000 fa65 	bl	8000e2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000962:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000968:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800096c:	4619      	mov	r1, r3
 800096e:	481c      	ldr	r0, [pc, #112]	; (80009e0 <MX_TIM4_Init+0xe4>)
 8000970:	f003 fec0 	bl	80046f4 <HAL_TIM_ConfigClockSource>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800097a:	f000 fa57 	bl	8000e2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800097e:	4818      	ldr	r0, [pc, #96]	; (80009e0 <MX_TIM4_Init+0xe4>)
 8000980:	f003 fcd5 	bl	800432e <HAL_TIM_PWM_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800098a:	f000 fa4f 	bl	8000e2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800098e:	2300      	movs	r3, #0
 8000990:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000992:	2300      	movs	r3, #0
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000996:	f107 0320 	add.w	r3, r7, #32
 800099a:	4619      	mov	r1, r3
 800099c:	4810      	ldr	r0, [pc, #64]	; (80009e0 <MX_TIM4_Init+0xe4>)
 800099e:	f004 fa81 	bl	8004ea4 <HAL_TIMEx_MasterConfigSynchronization>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80009a8:	f000 fa40 	bl	8000e2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009ac:	2360      	movs	r3, #96	; 0x60
 80009ae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009b4:	2300      	movs	r3, #0
 80009b6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009bc:	1d3b      	adds	r3, r7, #4
 80009be:	2200      	movs	r2, #0
 80009c0:	4619      	mov	r1, r3
 80009c2:	4807      	ldr	r0, [pc, #28]	; (80009e0 <MX_TIM4_Init+0xe4>)
 80009c4:	f003 fdd4 	bl	8004570 <HAL_TIM_PWM_ConfigChannel>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80009ce:	f000 fa2d 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80009d2:	4803      	ldr	r0, [pc, #12]	; (80009e0 <MX_TIM4_Init+0xe4>)
 80009d4:	f000 fac2 	bl	8000f5c <HAL_TIM_MspPostInit>

}
 80009d8:	bf00      	nop
 80009da:	3738      	adds	r7, #56	; 0x38
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	200000f8 	.word	0x200000f8
 80009e4:	40000800 	.word	0x40000800

080009e8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80009ec:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <MX_UART4_Init+0x4c>)
 80009ee:	4a12      	ldr	r2, [pc, #72]	; (8000a38 <MX_UART4_Init+0x50>)
 80009f0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80009f2:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <MX_UART4_Init+0x4c>)
 80009f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009f8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <MX_UART4_Init+0x4c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <MX_UART4_Init+0x4c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <MX_UART4_Init+0x4c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <MX_UART4_Init+0x4c>)
 8000a0e:	220c      	movs	r2, #12
 8000a10:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <MX_UART4_Init+0x4c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <MX_UART4_Init+0x4c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a1e:	4805      	ldr	r0, [pc, #20]	; (8000a34 <MX_UART4_Init+0x4c>)
 8000a20:	f004 fabc 	bl	8004f9c <HAL_UART_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000a2a:	f000 f9ff 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000140 	.word	0x20000140
 8000a38:	40004c00 	.word	0x40004c00

08000a3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08c      	sub	sp, #48	; 0x30
 8000a40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]
 8000a50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	61bb      	str	r3, [r7, #24]
 8000a56:	4b87      	ldr	r3, [pc, #540]	; (8000c74 <MX_GPIO_Init+0x238>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a86      	ldr	r2, [pc, #536]	; (8000c74 <MX_GPIO_Init+0x238>)
 8000a5c:	f043 0310 	orr.w	r3, r3, #16
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b84      	ldr	r3, [pc, #528]	; (8000c74 <MX_GPIO_Init+0x238>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f003 0310 	and.w	r3, r3, #16
 8000a6a:	61bb      	str	r3, [r7, #24]
 8000a6c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	617b      	str	r3, [r7, #20]
 8000a72:	4b80      	ldr	r3, [pc, #512]	; (8000c74 <MX_GPIO_Init+0x238>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4a7f      	ldr	r2, [pc, #508]	; (8000c74 <MX_GPIO_Init+0x238>)
 8000a78:	f043 0304 	orr.w	r3, r3, #4
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7e:	4b7d      	ldr	r3, [pc, #500]	; (8000c74 <MX_GPIO_Init+0x238>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	f003 0304 	and.w	r3, r3, #4
 8000a86:	617b      	str	r3, [r7, #20]
 8000a88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	613b      	str	r3, [r7, #16]
 8000a8e:	4b79      	ldr	r3, [pc, #484]	; (8000c74 <MX_GPIO_Init+0x238>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a78      	ldr	r2, [pc, #480]	; (8000c74 <MX_GPIO_Init+0x238>)
 8000a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b76      	ldr	r3, [pc, #472]	; (8000c74 <MX_GPIO_Init+0x238>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	4b72      	ldr	r3, [pc, #456]	; (8000c74 <MX_GPIO_Init+0x238>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a71      	ldr	r2, [pc, #452]	; (8000c74 <MX_GPIO_Init+0x238>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b6f      	ldr	r3, [pc, #444]	; (8000c74 <MX_GPIO_Init+0x238>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60bb      	str	r3, [r7, #8]
 8000ac6:	4b6b      	ldr	r3, [pc, #428]	; (8000c74 <MX_GPIO_Init+0x238>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a6a      	ldr	r2, [pc, #424]	; (8000c74 <MX_GPIO_Init+0x238>)
 8000acc:	f043 0302 	orr.w	r3, r3, #2
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b68      	ldr	r3, [pc, #416]	; (8000c74 <MX_GPIO_Init+0x238>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0302 	and.w	r3, r3, #2
 8000ada:	60bb      	str	r3, [r7, #8]
 8000adc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	4b64      	ldr	r3, [pc, #400]	; (8000c74 <MX_GPIO_Init+0x238>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a63      	ldr	r2, [pc, #396]	; (8000c74 <MX_GPIO_Init+0x238>)
 8000ae8:	f043 0308 	orr.w	r3, r3, #8
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b61      	ldr	r3, [pc, #388]	; (8000c74 <MX_GPIO_Init+0x238>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0308 	and.w	r3, r3, #8
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2108      	movs	r1, #8
 8000afe:	485e      	ldr	r0, [pc, #376]	; (8000c78 <MX_GPIO_Init+0x23c>)
 8000b00:	f001 fb0a 	bl	8002118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000b04:	2201      	movs	r2, #1
 8000b06:	2101      	movs	r1, #1
 8000b08:	485c      	ldr	r0, [pc, #368]	; (8000c7c <MX_GPIO_Init+0x240>)
 8000b0a:	f001 fb05 	bl	8002118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000b14:	485a      	ldr	r0, [pc, #360]	; (8000c80 <MX_GPIO_Init+0x244>)
 8000b16:	f001 faff 	bl	8002118 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000b20:	4858      	ldr	r0, [pc, #352]	; (8000c84 <MX_GPIO_Init+0x248>)
 8000b22:	f001 faf9 	bl	8002118 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000b26:	2308      	movs	r3, #8
 8000b28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b32:	2300      	movs	r3, #0
 8000b34:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000b36:	f107 031c 	add.w	r3, r7, #28
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	484e      	ldr	r0, [pc, #312]	; (8000c78 <MX_GPIO_Init+0x23c>)
 8000b3e:	f001 f94f 	bl	8001de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000b42:	2301      	movs	r3, #1
 8000b44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b46:	2301      	movs	r3, #1
 8000b48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b52:	f107 031c 	add.w	r3, r7, #28
 8000b56:	4619      	mov	r1, r3
 8000b58:	4848      	ldr	r0, [pc, #288]	; (8000c7c <MX_GPIO_Init+0x240>)
 8000b5a:	f001 f941 	bl	8001de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000b5e:	2308      	movs	r3, #8
 8000b60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b62:	2302      	movs	r3, #2
 8000b64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b6e:	2305      	movs	r3, #5
 8000b70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000b72:	f107 031c 	add.w	r3, r7, #28
 8000b76:	4619      	mov	r1, r3
 8000b78:	4840      	ldr	r0, [pc, #256]	; (8000c7c <MX_GPIO_Init+0x240>)
 8000b7a:	f001 f931 	bl	8001de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000b7e:	f240 13ff 	movw	r3, #511	; 0x1ff
 8000b82:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b84:	2301      	movs	r3, #1
 8000b86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b90:	f107 031c 	add.w	r3, r7, #28
 8000b94:	4619      	mov	r1, r3
 8000b96:	483a      	ldr	r0, [pc, #232]	; (8000c80 <MX_GPIO_Init+0x244>)
 8000b98:	f001 f922 	bl	8001de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000b9c:	2304      	movs	r3, #4
 8000b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000ba8:	f107 031c 	add.w	r3, r7, #28
 8000bac:	4619      	mov	r1, r3
 8000bae:	4836      	ldr	r0, [pc, #216]	; (8000c88 <MX_GPIO_Init+0x24c>)
 8000bb0:	f001 f916 	bl	8001de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000bb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bc6:	2305      	movs	r3, #5
 8000bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000bca:	f107 031c 	add.w	r3, r7, #28
 8000bce:	4619      	mov	r1, r3
 8000bd0:	482d      	ldr	r0, [pc, #180]	; (8000c88 <MX_GPIO_Init+0x24c>)
 8000bd2:	f001 f905 	bl	8001de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000bd6:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000bda:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2300      	movs	r3, #0
 8000be6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000be8:	f107 031c 	add.w	r3, r7, #28
 8000bec:	4619      	mov	r1, r3
 8000bee:	4825      	ldr	r0, [pc, #148]	; (8000c84 <MX_GPIO_Init+0x248>)
 8000bf0:	f001 f8f6 	bl	8001de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SD_Pin;
 8000bf4:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 8000bf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c06:	2306      	movs	r3, #6
 8000c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c0a:	f107 031c 	add.w	r3, r7, #28
 8000c0e:	4619      	mov	r1, r3
 8000c10:	481a      	ldr	r0, [pc, #104]	; (8000c7c <MX_GPIO_Init+0x240>)
 8000c12:	f001 f8e5 	bl	8001de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000c16:	2320      	movs	r3, #32
 8000c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c22:	f107 031c 	add.w	r3, r7, #28
 8000c26:	4619      	mov	r1, r3
 8000c28:	4816      	ldr	r0, [pc, #88]	; (8000c84 <MX_GPIO_Init+0x248>)
 8000c2a:	f001 f8d9 	bl	8001de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SDA_Pin;
 8000c2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c34:	2312      	movs	r3, #18
 8000c36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c40:	2304      	movs	r3, #4
 8000c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Audio_SDA_GPIO_Port, &GPIO_InitStruct);
 8000c44:	f107 031c 	add.w	r3, r7, #28
 8000c48:	4619      	mov	r1, r3
 8000c4a:	480f      	ldr	r0, [pc, #60]	; (8000c88 <MX_GPIO_Init+0x24c>)
 8000c4c:	f001 f8c8 	bl	8001de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000c50:	2302      	movs	r3, #2
 8000c52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c54:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000c5e:	f107 031c 	add.w	r3, r7, #28
 8000c62:	4619      	mov	r1, r3
 8000c64:	4804      	ldr	r0, [pc, #16]	; (8000c78 <MX_GPIO_Init+0x23c>)
 8000c66:	f001 f8bb 	bl	8001de0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c6a:	bf00      	nop
 8000c6c:	3730      	adds	r7, #48	; 0x30
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	40020800 	.word	0x40020800
 8000c80:	40020000 	.word	0x40020000
 8000c84:	40020c00 	.word	0x40020c00
 8000c88:	40020400 	.word	0x40020400

08000c8c <Uart4rec>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Uart4rec */
void Uart4rec(void *argument)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000c94:	f00b fb42 	bl	800c31c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	sprintf(msg, "\ntocdo: %hu\r\n", raw);
 8000c98:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <Uart4rec+0x30>)
 8000c9a:	881b      	ldrh	r3, [r3, #0]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	4908      	ldr	r1, [pc, #32]	; (8000cc0 <Uart4rec+0x34>)
 8000ca0:	4808      	ldr	r0, [pc, #32]	; (8000cc4 <Uart4rec+0x38>)
 8000ca2:	f00b ff7d 	bl	800cba0 <siprintf>
	if (HAL_UART_Receive(&huart4, &check, 1, 500) == HAL_OK)
 8000ca6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000caa:	2201      	movs	r2, #1
 8000cac:	4906      	ldr	r1, [pc, #24]	; (8000cc8 <Uart4rec+0x3c>)
 8000cae:	4807      	ldr	r0, [pc, #28]	; (8000ccc <Uart4rec+0x40>)
 8000cb0:	f004 f9c1 	bl	8005036 <HAL_UART_Receive>
	{
		//HAL_UART_Transmit(&huart4,  &check, 1, 500);
		//HAL_UART_Transmit(&huart4, (uint8_t*)msg, strlen(msg), 500);
	}

	osDelay(100);
 8000cb4:	2064      	movs	r0, #100	; 0x64
 8000cb6:	f008 fcd1 	bl	800965c <osDelay>
	sprintf(msg, "\ntocdo: %hu\r\n", raw);
 8000cba:	e7ed      	b.n	8000c98 <Uart4rec+0xc>
 8000cbc:	20000192 	.word	0x20000192
 8000cc0:	0800d2b0 	.word	0x0800d2b0
 8000cc4:	20000194 	.word	0x20000194
 8000cc8:	20000190 	.word	0x20000190
 8000ccc:	20000140 	.word	0x20000140

08000cd0 <runcar>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_runcar */
void runcar(void *argument)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runcar */
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4840      	ldr	r0, [pc, #256]	; (8000ddc <runcar+0x10c>)
 8000cdc:	f003 fb80 	bl	80043e0 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  for(;;)
  {
	if (check == 'W'){
 8000ce0:	4b3f      	ldr	r3, [pc, #252]	; (8000de0 <runcar+0x110>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b57      	cmp	r3, #87	; 0x57
 8000ce6:	d107      	bne.n	8000cf8 <runcar+0x28>
		dithang();
 8000ce8:	f7ff fc44 	bl	8000574 <dithang>
		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, raw);
 8000cec:	4b3d      	ldr	r3, [pc, #244]	; (8000de4 <runcar+0x114>)
 8000cee:	881a      	ldrh	r2, [r3, #0]
 8000cf0:	4b3a      	ldr	r3, [pc, #232]	; (8000ddc <runcar+0x10c>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	635a      	str	r2, [r3, #52]	; 0x34
 8000cf6:	e06d      	b.n	8000dd4 <runcar+0x104>
	}
	else if (check == 'S')
 8000cf8:	4b39      	ldr	r3, [pc, #228]	; (8000de0 <runcar+0x110>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b53      	cmp	r3, #83	; 0x53
 8000cfe:	d107      	bne.n	8000d10 <runcar+0x40>
	{
		dilui();
 8000d00:	f7ff fc48 	bl	8000594 <dilui>
		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, raw);
 8000d04:	4b37      	ldr	r3, [pc, #220]	; (8000de4 <runcar+0x114>)
 8000d06:	881a      	ldrh	r2, [r3, #0]
 8000d08:	4b34      	ldr	r3, [pc, #208]	; (8000ddc <runcar+0x10c>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	635a      	str	r2, [r3, #52]	; 0x34
 8000d0e:	e061      	b.n	8000dd4 <runcar+0x104>
	}
	else if (check == 'A')
 8000d10:	4b33      	ldr	r3, [pc, #204]	; (8000de0 <runcar+0x110>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b41      	cmp	r3, #65	; 0x41
 8000d16:	d107      	bne.n	8000d28 <runcar+0x58>
		{
			dingangtrai();
 8000d18:	f7ff fc6c 	bl	80005f4 <dingangtrai>
			__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, raw);
 8000d1c:	4b31      	ldr	r3, [pc, #196]	; (8000de4 <runcar+0x114>)
 8000d1e:	881a      	ldrh	r2, [r3, #0]
 8000d20:	4b2e      	ldr	r3, [pc, #184]	; (8000ddc <runcar+0x10c>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	635a      	str	r2, [r3, #52]	; 0x34
 8000d26:	e055      	b.n	8000dd4 <runcar+0x104>
		}
	else if (check == 'D')
 8000d28:	4b2d      	ldr	r3, [pc, #180]	; (8000de0 <runcar+0x110>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2b44      	cmp	r3, #68	; 0x44
 8000d2e:	d107      	bne.n	8000d40 <runcar+0x70>
		{
			dingangphai();
 8000d30:	f7ff fc50 	bl	80005d4 <dingangphai>
			__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, raw);
 8000d34:	4b2b      	ldr	r3, [pc, #172]	; (8000de4 <runcar+0x114>)
 8000d36:	881a      	ldrh	r2, [r3, #0]
 8000d38:	4b28      	ldr	r3, [pc, #160]	; (8000ddc <runcar+0x10c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	635a      	str	r2, [r3, #52]	; 0x34
 8000d3e:	e049      	b.n	8000dd4 <runcar+0x104>
		}
	else if (check == 'Q')
 8000d40:	4b27      	ldr	r3, [pc, #156]	; (8000de0 <runcar+0x110>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b51      	cmp	r3, #81	; 0x51
 8000d46:	d107      	bne.n	8000d58 <runcar+0x88>
		{
			xienlen_trai();
 8000d48:	f7ff fc84 	bl	8000654 <xienlen_trai>
			__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, raw);
 8000d4c:	4b25      	ldr	r3, [pc, #148]	; (8000de4 <runcar+0x114>)
 8000d4e:	881a      	ldrh	r2, [r3, #0]
 8000d50:	4b22      	ldr	r3, [pc, #136]	; (8000ddc <runcar+0x10c>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	635a      	str	r2, [r3, #52]	; 0x34
 8000d56:	e03d      	b.n	8000dd4 <runcar+0x104>
		}
	else if (check == 'C')
 8000d58:	4b21      	ldr	r3, [pc, #132]	; (8000de0 <runcar+0x110>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b43      	cmp	r3, #67	; 0x43
 8000d5e:	d107      	bne.n	8000d70 <runcar+0xa0>
		{
			xienxuong_phai();
 8000d60:	f7ff fc8e 	bl	8000680 <xienxuong_phai>
			__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, raw);
 8000d64:	4b1f      	ldr	r3, [pc, #124]	; (8000de4 <runcar+0x114>)
 8000d66:	881a      	ldrh	r2, [r3, #0]
 8000d68:	4b1c      	ldr	r3, [pc, #112]	; (8000ddc <runcar+0x10c>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	635a      	str	r2, [r3, #52]	; 0x34
 8000d6e:	e031      	b.n	8000dd4 <runcar+0x104>
		}
	else if (check == 'E')
 8000d70:	4b1b      	ldr	r3, [pc, #108]	; (8000de0 <runcar+0x110>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b45      	cmp	r3, #69	; 0x45
 8000d76:	d107      	bne.n	8000d88 <runcar+0xb8>
		{
			xienlen_phai();
 8000d78:	f7ff fc98 	bl	80006ac <xienlen_phai>
			__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, raw);
 8000d7c:	4b19      	ldr	r3, [pc, #100]	; (8000de4 <runcar+0x114>)
 8000d7e:	881a      	ldrh	r2, [r3, #0]
 8000d80:	4b16      	ldr	r3, [pc, #88]	; (8000ddc <runcar+0x10c>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	635a      	str	r2, [r3, #52]	; 0x34
 8000d86:	e025      	b.n	8000dd4 <runcar+0x104>
		}
	else if (check == 'Z')
 8000d88:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <runcar+0x110>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	2b5a      	cmp	r3, #90	; 0x5a
 8000d8e:	d107      	bne.n	8000da0 <runcar+0xd0>
		{
			xienxuong_trai();
 8000d90:	f7ff fca2 	bl	80006d8 <xienxuong_trai>
			__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, raw);
 8000d94:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <runcar+0x114>)
 8000d96:	881a      	ldrh	r2, [r3, #0]
 8000d98:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <runcar+0x10c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	635a      	str	r2, [r3, #52]	; 0x34
 8000d9e:	e019      	b.n	8000dd4 <runcar+0x104>
		}
	else if (check == 'L')
 8000da0:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <runcar+0x110>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2b4c      	cmp	r3, #76	; 0x4c
 8000da6:	d107      	bne.n	8000db8 <runcar+0xe8>
		{
			queotrai();
 8000da8:	f7ff fc34 	bl	8000614 <queotrai>
			__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, raw);
 8000dac:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <runcar+0x114>)
 8000dae:	881a      	ldrh	r2, [r3, #0]
 8000db0:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <runcar+0x10c>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	635a      	str	r2, [r3, #52]	; 0x34
 8000db6:	e00d      	b.n	8000dd4 <runcar+0x104>
		}
	else if (check == 'R')
 8000db8:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <runcar+0x110>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b52      	cmp	r3, #82	; 0x52
 8000dbe:	d107      	bne.n	8000dd0 <runcar+0x100>
		{
			queophai();
 8000dc0:	f7ff fc38 	bl	8000634 <queophai>
			__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, raw);
 8000dc4:	4b07      	ldr	r3, [pc, #28]	; (8000de4 <runcar+0x114>)
 8000dc6:	881a      	ldrh	r2, [r3, #0]
 8000dc8:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <runcar+0x10c>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	635a      	str	r2, [r3, #52]	; 0x34
 8000dce:	e001      	b.n	8000dd4 <runcar+0x104>
		}
	else dunglai();
 8000dd0:	f7ff fbf0 	bl	80005b4 <dunglai>


    osDelay(1);
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	f008 fc41 	bl	800965c <osDelay>
	if (check == 'W'){
 8000dda:	e781      	b.n	8000ce0 <runcar+0x10>
 8000ddc:	200000f8 	.word	0x200000f8
 8000de0:	20000190 	.word	0x20000190
 8000de4:	20000192 	.word	0x20000192

08000de8 <adcread1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_adcread1 */
void adcread1(void *argument)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
	  // set gpio pin high
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8000df0:	2201      	movs	r2, #1
 8000df2:	2110      	movs	r1, #16
 8000df4:	480a      	ldr	r0, [pc, #40]	; (8000e20 <adcread1+0x38>)
 8000df6:	f001 f98f 	bl	8002118 <HAL_GPIO_WritePin>

	  // get adc
	  HAL_ADC_Start(&hadc1);
 8000dfa:	480a      	ldr	r0, [pc, #40]	; (8000e24 <adcread1+0x3c>)
 8000dfc:	f000 fac4 	bl	8001388 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000e00:	f04f 31ff 	mov.w	r1, #4294967295
 8000e04:	4807      	ldr	r0, [pc, #28]	; (8000e24 <adcread1+0x3c>)
 8000e06:	f000 fb91 	bl	800152c <HAL_ADC_PollForConversion>
	  raw = HAL_ADC_GetValue(&hadc1);
 8000e0a:	4806      	ldr	r0, [pc, #24]	; (8000e24 <adcread1+0x3c>)
 8000e0c:	f000 fc19 	bl	8001642 <HAL_ADC_GetValue>
 8000e10:	4603      	mov	r3, r0
 8000e12:	b29a      	uxth	r2, r3
 8000e14:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <adcread1+0x40>)
 8000e16:	801a      	strh	r2, [r3, #0]

	  //HC-SR04

	  osDelay(1);
 8000e18:	2001      	movs	r0, #1
 8000e1a:	f008 fc1f 	bl	800965c <osDelay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8000e1e:	e7e7      	b.n	8000df0 <adcread1+0x8>
 8000e20:	40020800 	.word	0x40020800
 8000e24:	200000b0 	.word	0x200000b0
 8000e28:	20000192 	.word	0x20000192

08000e2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e30:	b672      	cpsid	i
}
 8000e32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <Error_Handler+0x8>
	...

08000e38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	607b      	str	r3, [r7, #4]
 8000e42:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <HAL_MspInit+0x54>)
 8000e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e46:	4a11      	ldr	r2, [pc, #68]	; (8000e8c <HAL_MspInit+0x54>)
 8000e48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e4e:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <HAL_MspInit+0x54>)
 8000e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e56:	607b      	str	r3, [r7, #4]
 8000e58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	603b      	str	r3, [r7, #0]
 8000e5e:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <HAL_MspInit+0x54>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e62:	4a0a      	ldr	r2, [pc, #40]	; (8000e8c <HAL_MspInit+0x54>)
 8000e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e68:	6413      	str	r3, [r2, #64]	; 0x40
 8000e6a:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <HAL_MspInit+0x54>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e72:	603b      	str	r3, [r7, #0]
 8000e74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e76:	2200      	movs	r2, #0
 8000e78:	210f      	movs	r1, #15
 8000e7a:	f06f 0001 	mvn.w	r0, #1
 8000e7e:	f000 fee6 	bl	8001c4e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40023800 	.word	0x40023800

08000e90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08a      	sub	sp, #40	; 0x28
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a17      	ldr	r2, [pc, #92]	; (8000f0c <HAL_ADC_MspInit+0x7c>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d127      	bne.n	8000f02 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	4b16      	ldr	r3, [pc, #88]	; (8000f10 <HAL_ADC_MspInit+0x80>)
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eba:	4a15      	ldr	r2, [pc, #84]	; (8000f10 <HAL_ADC_MspInit+0x80>)
 8000ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ec2:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <HAL_ADC_MspInit+0x80>)
 8000ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eca:	613b      	str	r3, [r7, #16]
 8000ecc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <HAL_ADC_MspInit+0x80>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	4a0e      	ldr	r2, [pc, #56]	; (8000f10 <HAL_ADC_MspInit+0x80>)
 8000ed8:	f043 0304 	orr.w	r3, r3, #4
 8000edc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ede:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <HAL_ADC_MspInit+0x80>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	f003 0304 	and.w	r3, r3, #4
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000eea:	2310      	movs	r3, #16
 8000eec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ef6:	f107 0314 	add.w	r3, r7, #20
 8000efa:	4619      	mov	r1, r3
 8000efc:	4805      	ldr	r0, [pc, #20]	; (8000f14 <HAL_ADC_MspInit+0x84>)
 8000efe:	f000 ff6f 	bl	8001de0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f02:	bf00      	nop
 8000f04:	3728      	adds	r7, #40	; 0x28
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40012000 	.word	0x40012000
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40020800 	.word	0x40020800

08000f18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a0b      	ldr	r2, [pc, #44]	; (8000f54 <HAL_TIM_Base_MspInit+0x3c>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d10d      	bne.n	8000f46 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <HAL_TIM_Base_MspInit+0x40>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	4a09      	ldr	r2, [pc, #36]	; (8000f58 <HAL_TIM_Base_MspInit+0x40>)
 8000f34:	f043 0304 	orr.w	r3, r3, #4
 8000f38:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3a:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <HAL_TIM_Base_MspInit+0x40>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	f003 0304 	and.w	r3, r3, #4
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000f46:	bf00      	nop
 8000f48:	3714      	adds	r7, #20
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	40000800 	.word	0x40000800
 8000f58:	40023800 	.word	0x40023800

08000f5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b088      	sub	sp, #32
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	f107 030c 	add.w	r3, r7, #12
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a12      	ldr	r2, [pc, #72]	; (8000fc4 <HAL_TIM_MspPostInit+0x68>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d11d      	bne.n	8000fba <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <HAL_TIM_MspPostInit+0x6c>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a10      	ldr	r2, [pc, #64]	; (8000fc8 <HAL_TIM_MspPostInit+0x6c>)
 8000f88:	f043 0302 	orr.w	r3, r3, #2
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <HAL_TIM_MspPostInit+0x6c>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f003 0302 	and.w	r3, r3, #2
 8000f96:	60bb      	str	r3, [r7, #8]
 8000f98:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f9a:	2340      	movs	r3, #64	; 0x40
 8000f9c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000faa:	2302      	movs	r3, #2
 8000fac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fae:	f107 030c 	add.w	r3, r7, #12
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4805      	ldr	r0, [pc, #20]	; (8000fcc <HAL_TIM_MspPostInit+0x70>)
 8000fb6:	f000 ff13 	bl	8001de0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000fba:	bf00      	nop
 8000fbc:	3720      	adds	r7, #32
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40000800 	.word	0x40000800
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40020400 	.word	0x40020400

08000fd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08a      	sub	sp, #40	; 0x28
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a1d      	ldr	r2, [pc, #116]	; (8001064 <HAL_UART_MspInit+0x94>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d134      	bne.n	800105c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <HAL_UART_MspInit+0x98>)
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffa:	4a1b      	ldr	r2, [pc, #108]	; (8001068 <HAL_UART_MspInit+0x98>)
 8000ffc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001000:	6413      	str	r3, [r2, #64]	; 0x40
 8001002:	4b19      	ldr	r3, [pc, #100]	; (8001068 <HAL_UART_MspInit+0x98>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800100a:	613b      	str	r3, [r7, #16]
 800100c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	4b15      	ldr	r3, [pc, #84]	; (8001068 <HAL_UART_MspInit+0x98>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a14      	ldr	r2, [pc, #80]	; (8001068 <HAL_UART_MspInit+0x98>)
 8001018:	f043 0304 	orr.w	r3, r3, #4
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b12      	ldr	r3, [pc, #72]	; (8001068 <HAL_UART_MspInit+0x98>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0304 	and.w	r3, r3, #4
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800102a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800102e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001030:	2302      	movs	r3, #2
 8001032:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001038:	2303      	movs	r3, #3
 800103a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800103c:	2308      	movs	r3, #8
 800103e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	4619      	mov	r1, r3
 8001046:	4809      	ldr	r0, [pc, #36]	; (800106c <HAL_UART_MspInit+0x9c>)
 8001048:	f000 feca 	bl	8001de0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800104c:	2200      	movs	r2, #0
 800104e:	2105      	movs	r1, #5
 8001050:	2034      	movs	r0, #52	; 0x34
 8001052:	f000 fdfc 	bl	8001c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001056:	2034      	movs	r0, #52	; 0x34
 8001058:	f000 fe15 	bl	8001c86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 800105c:	bf00      	nop
 800105e:	3728      	adds	r7, #40	; 0x28
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40004c00 	.word	0x40004c00
 8001068:	40023800 	.word	0x40023800
 800106c:	40020800 	.word	0x40020800

08001070 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001074:	e7fe      	b.n	8001074 <NMI_Handler+0x4>

08001076 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800107a:	e7fe      	b.n	800107a <HardFault_Handler+0x4>

0800107c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001080:	e7fe      	b.n	8001080 <MemManage_Handler+0x4>

08001082 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001086:	e7fe      	b.n	8001086 <BusFault_Handler+0x4>

08001088 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800108c:	e7fe      	b.n	800108c <UsageFault_Handler+0x4>

0800108e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a0:	f000 f8ea 	bl	8001278 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80010a4:	f00a f8d2 	bl	800b24c <xTaskGetSchedulerState>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d001      	beq.n	80010b2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80010ae:	f00a febb 	bl	800be28 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80010bc:	4805      	ldr	r0, [pc, #20]	; (80010d4 <UART4_IRQHandler+0x1c>)
 80010be:	f004 f85d 	bl	800517c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 80010c2:	2201      	movs	r2, #1
 80010c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010c8:	4803      	ldr	r0, [pc, #12]	; (80010d8 <UART4_IRQHandler+0x20>)
 80010ca:	f001 f825 	bl	8002118 <HAL_GPIO_WritePin>

  /* USER CODE END UART4_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000140 	.word	0x20000140
 80010d8:	40020c00 	.word	0x40020c00

080010dc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80010e0:	4802      	ldr	r0, [pc, #8]	; (80010ec <OTG_FS_IRQHandler+0x10>)
 80010e2:	f001 fa9d 	bl	8002620 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20004f04 	.word	0x20004f04

080010f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010f8:	4a14      	ldr	r2, [pc, #80]	; (800114c <_sbrk+0x5c>)
 80010fa:	4b15      	ldr	r3, [pc, #84]	; (8001150 <_sbrk+0x60>)
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001104:	4b13      	ldr	r3, [pc, #76]	; (8001154 <_sbrk+0x64>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d102      	bne.n	8001112 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800110c:	4b11      	ldr	r3, [pc, #68]	; (8001154 <_sbrk+0x64>)
 800110e:	4a12      	ldr	r2, [pc, #72]	; (8001158 <_sbrk+0x68>)
 8001110:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001112:	4b10      	ldr	r3, [pc, #64]	; (8001154 <_sbrk+0x64>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4413      	add	r3, r2
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	429a      	cmp	r2, r3
 800111e:	d207      	bcs.n	8001130 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001120:	f00b fbfe 	bl	800c920 <__errno>
 8001124:	4603      	mov	r3, r0
 8001126:	220c      	movs	r2, #12
 8001128:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800112a:	f04f 33ff 	mov.w	r3, #4294967295
 800112e:	e009      	b.n	8001144 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001130:	4b08      	ldr	r3, [pc, #32]	; (8001154 <_sbrk+0x64>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001136:	4b07      	ldr	r3, [pc, #28]	; (8001154 <_sbrk+0x64>)
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4413      	add	r3, r2
 800113e:	4a05      	ldr	r2, [pc, #20]	; (8001154 <_sbrk+0x64>)
 8001140:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001142:	68fb      	ldr	r3, [r7, #12]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3718      	adds	r7, #24
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20020000 	.word	0x20020000
 8001150:	00000400 	.word	0x00000400
 8001154:	200001a0 	.word	0x200001a0
 8001158:	20005218 	.word	0x20005218

0800115c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <SystemInit+0x20>)
 8001162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001166:	4a05      	ldr	r2, [pc, #20]	; (800117c <SystemInit+0x20>)
 8001168:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800116c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001180:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001184:	480d      	ldr	r0, [pc, #52]	; (80011bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001186:	490e      	ldr	r1, [pc, #56]	; (80011c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001188:	4a0e      	ldr	r2, [pc, #56]	; (80011c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800118a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800118c:	e002      	b.n	8001194 <LoopCopyDataInit>

0800118e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800118e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001190:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001192:	3304      	adds	r3, #4

08001194 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001194:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001196:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001198:	d3f9      	bcc.n	800118e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800119a:	4a0b      	ldr	r2, [pc, #44]	; (80011c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800119c:	4c0b      	ldr	r4, [pc, #44]	; (80011cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800119e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a0:	e001      	b.n	80011a6 <LoopFillZerobss>

080011a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011a4:	3204      	adds	r2, #4

080011a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011a8:	d3fb      	bcc.n	80011a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011aa:	f7ff ffd7 	bl	800115c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011ae:	f00b fbbd 	bl	800c92c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011b2:	f7ff faa7 	bl	8000704 <main>
  bx  lr    
 80011b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c0:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80011c4:	0800d3b0 	.word	0x0800d3b0
  ldr r2, =_sbss
 80011c8:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80011cc:	20005218 	.word	0x20005218

080011d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011d0:	e7fe      	b.n	80011d0 <ADC_IRQHandler>
	...

080011d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011d8:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <HAL_Init+0x40>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a0d      	ldr	r2, [pc, #52]	; (8001214 <HAL_Init+0x40>)
 80011de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011e4:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <HAL_Init+0x40>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a0a      	ldr	r2, [pc, #40]	; (8001214 <HAL_Init+0x40>)
 80011ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011f0:	4b08      	ldr	r3, [pc, #32]	; (8001214 <HAL_Init+0x40>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a07      	ldr	r2, [pc, #28]	; (8001214 <HAL_Init+0x40>)
 80011f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011fc:	2003      	movs	r0, #3
 80011fe:	f000 fd1b 	bl	8001c38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001202:	200f      	movs	r0, #15
 8001204:	f000 f808 	bl	8001218 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001208:	f7ff fe16 	bl	8000e38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40023c00 	.word	0x40023c00

08001218 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <HAL_InitTick+0x54>)
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	4b12      	ldr	r3, [pc, #72]	; (8001270 <HAL_InitTick+0x58>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	4619      	mov	r1, r3
 800122a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001232:	fbb2 f3f3 	udiv	r3, r2, r3
 8001236:	4618      	mov	r0, r3
 8001238:	f000 fd33 	bl	8001ca2 <HAL_SYSTICK_Config>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e00e      	b.n	8001264 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2b0f      	cmp	r3, #15
 800124a:	d80a      	bhi.n	8001262 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800124c:	2200      	movs	r2, #0
 800124e:	6879      	ldr	r1, [r7, #4]
 8001250:	f04f 30ff 	mov.w	r0, #4294967295
 8001254:	f000 fcfb 	bl	8001c4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001258:	4a06      	ldr	r2, [pc, #24]	; (8001274 <HAL_InitTick+0x5c>)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800125e:	2300      	movs	r3, #0
 8001260:	e000      	b.n	8001264 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
}
 8001264:	4618      	mov	r0, r3
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000000 	.word	0x20000000
 8001270:	20000008 	.word	0x20000008
 8001274:	20000004 	.word	0x20000004

08001278 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <HAL_IncTick+0x20>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	461a      	mov	r2, r3
 8001282:	4b06      	ldr	r3, [pc, #24]	; (800129c <HAL_IncTick+0x24>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4413      	add	r3, r2
 8001288:	4a04      	ldr	r2, [pc, #16]	; (800129c <HAL_IncTick+0x24>)
 800128a:	6013      	str	r3, [r2, #0]
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	20000008 	.word	0x20000008
 800129c:	200001a4 	.word	0x200001a4

080012a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  return uwTick;
 80012a4:	4b03      	ldr	r3, [pc, #12]	; (80012b4 <HAL_GetTick+0x14>)
 80012a6:	681b      	ldr	r3, [r3, #0]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	200001a4 	.word	0x200001a4

080012b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012c0:	f7ff ffee 	bl	80012a0 <HAL_GetTick>
 80012c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d0:	d005      	beq.n	80012de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012d2:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <HAL_Delay+0x44>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	461a      	mov	r2, r3
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	4413      	add	r3, r2
 80012dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012de:	bf00      	nop
 80012e0:	f7ff ffde 	bl	80012a0 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	68fa      	ldr	r2, [r7, #12]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d8f7      	bhi.n	80012e0 <HAL_Delay+0x28>
  {
  }
}
 80012f0:	bf00      	nop
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000008 	.word	0x20000008

08001300 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001308:	2300      	movs	r3, #0
 800130a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d101      	bne.n	8001316 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e033      	b.n	800137e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	2b00      	cmp	r3, #0
 800131c:	d109      	bne.n	8001332 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f7ff fdb6 	bl	8000e90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2200      	movs	r2, #0
 800132e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	f003 0310 	and.w	r3, r3, #16
 800133a:	2b00      	cmp	r3, #0
 800133c:	d118      	bne.n	8001370 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001346:	f023 0302 	bic.w	r3, r3, #2
 800134a:	f043 0202 	orr.w	r2, r3, #2
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f000 faa4 	bl	80018a0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	f023 0303 	bic.w	r3, r3, #3
 8001366:	f043 0201 	orr.w	r2, r3, #1
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	641a      	str	r2, [r3, #64]	; 0x40
 800136e:	e001      	b.n	8001374 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800137c:	7bfb      	ldrb	r3, [r7, #15]
}
 800137e:	4618      	mov	r0, r3
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001390:	2300      	movs	r3, #0
 8001392:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800139a:	2b01      	cmp	r3, #1
 800139c:	d101      	bne.n	80013a2 <HAL_ADC_Start+0x1a>
 800139e:	2302      	movs	r3, #2
 80013a0:	e0b2      	b.n	8001508 <HAL_ADC_Start+0x180>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2201      	movs	r2, #1
 80013a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d018      	beq.n	80013ea <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	689a      	ldr	r2, [r3, #8]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f042 0201 	orr.w	r2, r2, #1
 80013c6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013c8:	4b52      	ldr	r3, [pc, #328]	; (8001514 <HAL_ADC_Start+0x18c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a52      	ldr	r2, [pc, #328]	; (8001518 <HAL_ADC_Start+0x190>)
 80013ce:	fba2 2303 	umull	r2, r3, r2, r3
 80013d2:	0c9a      	lsrs	r2, r3, #18
 80013d4:	4613      	mov	r3, r2
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	4413      	add	r3, r2
 80013da:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80013dc:	e002      	b.n	80013e4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	3b01      	subs	r3, #1
 80013e2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d1f9      	bne.n	80013de <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d17a      	bne.n	80014ee <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001400:	f023 0301 	bic.w	r3, r3, #1
 8001404:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001416:	2b00      	cmp	r3, #0
 8001418:	d007      	beq.n	800142a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001422:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001436:	d106      	bne.n	8001446 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143c:	f023 0206 	bic.w	r2, r3, #6
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	645a      	str	r2, [r3, #68]	; 0x44
 8001444:	e002      	b.n	800144c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001454:	4b31      	ldr	r3, [pc, #196]	; (800151c <HAL_ADC_Start+0x194>)
 8001456:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001460:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f003 031f 	and.w	r3, r3, #31
 800146a:	2b00      	cmp	r3, #0
 800146c:	d12a      	bne.n	80014c4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a2b      	ldr	r2, [pc, #172]	; (8001520 <HAL_ADC_Start+0x198>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d015      	beq.n	80014a4 <HAL_ADC_Start+0x11c>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a29      	ldr	r2, [pc, #164]	; (8001524 <HAL_ADC_Start+0x19c>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d105      	bne.n	800148e <HAL_ADC_Start+0x106>
 8001482:	4b26      	ldr	r3, [pc, #152]	; (800151c <HAL_ADC_Start+0x194>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f003 031f 	and.w	r3, r3, #31
 800148a:	2b00      	cmp	r3, #0
 800148c:	d00a      	beq.n	80014a4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a25      	ldr	r2, [pc, #148]	; (8001528 <HAL_ADC_Start+0x1a0>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d136      	bne.n	8001506 <HAL_ADC_Start+0x17e>
 8001498:	4b20      	ldr	r3, [pc, #128]	; (800151c <HAL_ADC_Start+0x194>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f003 0310 	and.w	r3, r3, #16
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d130      	bne.n	8001506 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d129      	bne.n	8001506 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	689a      	ldr	r2, [r3, #8]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	e020      	b.n	8001506 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a15      	ldr	r2, [pc, #84]	; (8001520 <HAL_ADC_Start+0x198>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d11b      	bne.n	8001506 <HAL_ADC_Start+0x17e>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d114      	bne.n	8001506 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	689a      	ldr	r2, [r3, #8]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	e00b      	b.n	8001506 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	f043 0210 	orr.w	r2, r3, #16
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fe:	f043 0201 	orr.w	r2, r3, #1
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001506:	2300      	movs	r3, #0
}
 8001508:	4618      	mov	r0, r3
 800150a:	3714      	adds	r7, #20
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	20000000 	.word	0x20000000
 8001518:	431bde83 	.word	0x431bde83
 800151c:	40012300 	.word	0x40012300
 8001520:	40012000 	.word	0x40012000
 8001524:	40012100 	.word	0x40012100
 8001528:	40012200 	.word	0x40012200

0800152c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001536:	2300      	movs	r3, #0
 8001538:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001544:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001548:	d113      	bne.n	8001572 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001554:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001558:	d10b      	bne.n	8001572 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	f043 0220 	orr.w	r2, r3, #32
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e063      	b.n	800163a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001572:	f7ff fe95 	bl	80012a0 <HAL_GetTick>
 8001576:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001578:	e021      	b.n	80015be <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001580:	d01d      	beq.n	80015be <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d007      	beq.n	8001598 <HAL_ADC_PollForConversion+0x6c>
 8001588:	f7ff fe8a 	bl	80012a0 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	683a      	ldr	r2, [r7, #0]
 8001594:	429a      	cmp	r2, r3
 8001596:	d212      	bcs.n	80015be <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d00b      	beq.n	80015be <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	f043 0204 	orr.w	r2, r3, #4
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e03d      	b.n	800163a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d1d6      	bne.n	800157a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f06f 0212 	mvn.w	r2, #18
 80015d4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d123      	bne.n	8001638 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d11f      	bne.n	8001638 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015fe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001602:	2b00      	cmp	r3, #0
 8001604:	d006      	beq.n	8001614 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001610:	2b00      	cmp	r3, #0
 8001612:	d111      	bne.n	8001638 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001618:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001624:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d105      	bne.n	8001638 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001630:	f043 0201 	orr.w	r2, r3, #1
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3710      	adds	r7, #16
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001642:	b480      	push	{r7}
 8001644:	b083      	sub	sp, #12
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001650:	4618      	mov	r0, r3
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001666:	2300      	movs	r3, #0
 8001668:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001670:	2b01      	cmp	r3, #1
 8001672:	d101      	bne.n	8001678 <HAL_ADC_ConfigChannel+0x1c>
 8001674:	2302      	movs	r3, #2
 8001676:	e105      	b.n	8001884 <HAL_ADC_ConfigChannel+0x228>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2201      	movs	r2, #1
 800167c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2b09      	cmp	r3, #9
 8001686:	d925      	bls.n	80016d4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	68d9      	ldr	r1, [r3, #12]
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	b29b      	uxth	r3, r3
 8001694:	461a      	mov	r2, r3
 8001696:	4613      	mov	r3, r2
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	4413      	add	r3, r2
 800169c:	3b1e      	subs	r3, #30
 800169e:	2207      	movs	r2, #7
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	43da      	mvns	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	400a      	ands	r2, r1
 80016ac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68d9      	ldr	r1, [r3, #12]
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	689a      	ldr	r2, [r3, #8]
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	b29b      	uxth	r3, r3
 80016be:	4618      	mov	r0, r3
 80016c0:	4603      	mov	r3, r0
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	4403      	add	r3, r0
 80016c6:	3b1e      	subs	r3, #30
 80016c8:	409a      	lsls	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	430a      	orrs	r2, r1
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	e022      	b.n	800171a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6919      	ldr	r1, [r3, #16]
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	b29b      	uxth	r3, r3
 80016e0:	461a      	mov	r2, r3
 80016e2:	4613      	mov	r3, r2
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	4413      	add	r3, r2
 80016e8:	2207      	movs	r2, #7
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	43da      	mvns	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	400a      	ands	r2, r1
 80016f6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6919      	ldr	r1, [r3, #16]
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	689a      	ldr	r2, [r3, #8]
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	b29b      	uxth	r3, r3
 8001708:	4618      	mov	r0, r3
 800170a:	4603      	mov	r3, r0
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	4403      	add	r3, r0
 8001710:	409a      	lsls	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	430a      	orrs	r2, r1
 8001718:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	2b06      	cmp	r3, #6
 8001720:	d824      	bhi.n	800176c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685a      	ldr	r2, [r3, #4]
 800172c:	4613      	mov	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	4413      	add	r3, r2
 8001732:	3b05      	subs	r3, #5
 8001734:	221f      	movs	r2, #31
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	43da      	mvns	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	400a      	ands	r2, r1
 8001742:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	b29b      	uxth	r3, r3
 8001750:	4618      	mov	r0, r3
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685a      	ldr	r2, [r3, #4]
 8001756:	4613      	mov	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	3b05      	subs	r3, #5
 800175e:	fa00 f203 	lsl.w	r2, r0, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	430a      	orrs	r2, r1
 8001768:	635a      	str	r2, [r3, #52]	; 0x34
 800176a:	e04c      	b.n	8001806 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	2b0c      	cmp	r3, #12
 8001772:	d824      	bhi.n	80017be <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685a      	ldr	r2, [r3, #4]
 800177e:	4613      	mov	r3, r2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	4413      	add	r3, r2
 8001784:	3b23      	subs	r3, #35	; 0x23
 8001786:	221f      	movs	r2, #31
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	43da      	mvns	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	400a      	ands	r2, r1
 8001794:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	4618      	mov	r0, r3
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685a      	ldr	r2, [r3, #4]
 80017a8:	4613      	mov	r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	4413      	add	r3, r2
 80017ae:	3b23      	subs	r3, #35	; 0x23
 80017b0:	fa00 f203 	lsl.w	r2, r0, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	430a      	orrs	r2, r1
 80017ba:	631a      	str	r2, [r3, #48]	; 0x30
 80017bc:	e023      	b.n	8001806 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685a      	ldr	r2, [r3, #4]
 80017c8:	4613      	mov	r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	4413      	add	r3, r2
 80017ce:	3b41      	subs	r3, #65	; 0x41
 80017d0:	221f      	movs	r2, #31
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43da      	mvns	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	400a      	ands	r2, r1
 80017de:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	4618      	mov	r0, r3
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685a      	ldr	r2, [r3, #4]
 80017f2:	4613      	mov	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	4413      	add	r3, r2
 80017f8:	3b41      	subs	r3, #65	; 0x41
 80017fa:	fa00 f203 	lsl.w	r2, r0, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	430a      	orrs	r2, r1
 8001804:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001806:	4b22      	ldr	r3, [pc, #136]	; (8001890 <HAL_ADC_ConfigChannel+0x234>)
 8001808:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a21      	ldr	r2, [pc, #132]	; (8001894 <HAL_ADC_ConfigChannel+0x238>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d109      	bne.n	8001828 <HAL_ADC_ConfigChannel+0x1cc>
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b12      	cmp	r3, #18
 800181a:	d105      	bne.n	8001828 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a19      	ldr	r2, [pc, #100]	; (8001894 <HAL_ADC_ConfigChannel+0x238>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d123      	bne.n	800187a <HAL_ADC_ConfigChannel+0x21e>
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2b10      	cmp	r3, #16
 8001838:	d003      	beq.n	8001842 <HAL_ADC_ConfigChannel+0x1e6>
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2b11      	cmp	r3, #17
 8001840:	d11b      	bne.n	800187a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2b10      	cmp	r3, #16
 8001854:	d111      	bne.n	800187a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001856:	4b10      	ldr	r3, [pc, #64]	; (8001898 <HAL_ADC_ConfigChannel+0x23c>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a10      	ldr	r2, [pc, #64]	; (800189c <HAL_ADC_ConfigChannel+0x240>)
 800185c:	fba2 2303 	umull	r2, r3, r2, r3
 8001860:	0c9a      	lsrs	r2, r3, #18
 8001862:	4613      	mov	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800186c:	e002      	b.n	8001874 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	3b01      	subs	r3, #1
 8001872:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1f9      	bne.n	800186e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	40012300 	.word	0x40012300
 8001894:	40012000 	.word	0x40012000
 8001898:	20000000 	.word	0x20000000
 800189c:	431bde83 	.word	0x431bde83

080018a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018a8:	4b79      	ldr	r3, [pc, #484]	; (8001a90 <ADC_Init+0x1f0>)
 80018aa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	685a      	ldr	r2, [r3, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	431a      	orrs	r2, r3
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	685a      	ldr	r2, [r3, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	6859      	ldr	r1, [r3, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	691b      	ldr	r3, [r3, #16]
 80018e0:	021a      	lsls	r2, r3, #8
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	430a      	orrs	r2, r1
 80018e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	685a      	ldr	r2, [r3, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80018f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6859      	ldr	r1, [r3, #4]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689a      	ldr	r2, [r3, #8]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	430a      	orrs	r2, r1
 800190a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	689a      	ldr	r2, [r3, #8]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800191a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6899      	ldr	r1, [r3, #8]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	68da      	ldr	r2, [r3, #12]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	430a      	orrs	r2, r1
 800192c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001932:	4a58      	ldr	r2, [pc, #352]	; (8001a94 <ADC_Init+0x1f4>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d022      	beq.n	800197e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	689a      	ldr	r2, [r3, #8]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001946:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6899      	ldr	r1, [r3, #8]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	430a      	orrs	r2, r1
 8001958:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	689a      	ldr	r2, [r3, #8]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001968:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6899      	ldr	r1, [r3, #8]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	430a      	orrs	r2, r1
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	e00f      	b.n	800199e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	689a      	ldr	r2, [r3, #8]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800198c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	689a      	ldr	r2, [r3, #8]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800199c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	689a      	ldr	r2, [r3, #8]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f022 0202 	bic.w	r2, r2, #2
 80019ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	6899      	ldr	r1, [r3, #8]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	7e1b      	ldrb	r3, [r3, #24]
 80019b8:	005a      	lsls	r2, r3, #1
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	430a      	orrs	r2, r1
 80019c0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d01b      	beq.n	8001a04 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	685a      	ldr	r2, [r3, #4]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019da:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	685a      	ldr	r2, [r3, #4]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80019ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6859      	ldr	r1, [r3, #4]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f6:	3b01      	subs	r3, #1
 80019f8:	035a      	lsls	r2, r3, #13
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	430a      	orrs	r2, r1
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	e007      	b.n	8001a14 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	685a      	ldr	r2, [r3, #4]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a12:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001a22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	051a      	lsls	r2, r3, #20
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	430a      	orrs	r2, r1
 8001a38:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	6899      	ldr	r1, [r3, #8]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a56:	025a      	lsls	r2, r3, #9
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	689a      	ldr	r2, [r3, #8]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6899      	ldr	r1, [r3, #8]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	695b      	ldr	r3, [r3, #20]
 8001a7a:	029a      	lsls	r2, r3, #10
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	430a      	orrs	r2, r1
 8001a82:	609a      	str	r2, [r3, #8]
}
 8001a84:	bf00      	nop
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	40012300 	.word	0x40012300
 8001a94:	0f000001 	.word	0x0f000001

08001a98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aa8:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <__NVIC_SetPriorityGrouping+0x44>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aae:	68ba      	ldr	r2, [r7, #8]
 8001ab0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ac0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ac4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aca:	4a04      	ldr	r2, [pc, #16]	; (8001adc <__NVIC_SetPriorityGrouping+0x44>)
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	60d3      	str	r3, [r2, #12]
}
 8001ad0:	bf00      	nop
 8001ad2:	3714      	adds	r7, #20
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	e000ed00 	.word	0xe000ed00

08001ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ae4:	4b04      	ldr	r3, [pc, #16]	; (8001af8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	0a1b      	lsrs	r3, r3, #8
 8001aea:	f003 0307 	and.w	r3, r3, #7
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	db0b      	blt.n	8001b26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b0e:	79fb      	ldrb	r3, [r7, #7]
 8001b10:	f003 021f 	and.w	r2, r3, #31
 8001b14:	4907      	ldr	r1, [pc, #28]	; (8001b34 <__NVIC_EnableIRQ+0x38>)
 8001b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1a:	095b      	lsrs	r3, r3, #5
 8001b1c:	2001      	movs	r0, #1
 8001b1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	e000e100 	.word	0xe000e100

08001b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	6039      	str	r1, [r7, #0]
 8001b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	db0a      	blt.n	8001b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	490c      	ldr	r1, [pc, #48]	; (8001b84 <__NVIC_SetPriority+0x4c>)
 8001b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b56:	0112      	lsls	r2, r2, #4
 8001b58:	b2d2      	uxtb	r2, r2
 8001b5a:	440b      	add	r3, r1
 8001b5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b60:	e00a      	b.n	8001b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	b2da      	uxtb	r2, r3
 8001b66:	4908      	ldr	r1, [pc, #32]	; (8001b88 <__NVIC_SetPriority+0x50>)
 8001b68:	79fb      	ldrb	r3, [r7, #7]
 8001b6a:	f003 030f 	and.w	r3, r3, #15
 8001b6e:	3b04      	subs	r3, #4
 8001b70:	0112      	lsls	r2, r2, #4
 8001b72:	b2d2      	uxtb	r2, r2
 8001b74:	440b      	add	r3, r1
 8001b76:	761a      	strb	r2, [r3, #24]
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	e000e100 	.word	0xe000e100
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b089      	sub	sp, #36	; 0x24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	f1c3 0307 	rsb	r3, r3, #7
 8001ba6:	2b04      	cmp	r3, #4
 8001ba8:	bf28      	it	cs
 8001baa:	2304      	movcs	r3, #4
 8001bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	3304      	adds	r3, #4
 8001bb2:	2b06      	cmp	r3, #6
 8001bb4:	d902      	bls.n	8001bbc <NVIC_EncodePriority+0x30>
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	3b03      	subs	r3, #3
 8001bba:	e000      	b.n	8001bbe <NVIC_EncodePriority+0x32>
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	43da      	mvns	r2, r3
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	401a      	ands	r2, r3
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	fa01 f303 	lsl.w	r3, r1, r3
 8001bde:	43d9      	mvns	r1, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be4:	4313      	orrs	r3, r2
         );
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3724      	adds	r7, #36	; 0x24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
	...

08001bf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c04:	d301      	bcc.n	8001c0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c06:	2301      	movs	r3, #1
 8001c08:	e00f      	b.n	8001c2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c0a:	4a0a      	ldr	r2, [pc, #40]	; (8001c34 <SysTick_Config+0x40>)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c12:	210f      	movs	r1, #15
 8001c14:	f04f 30ff 	mov.w	r0, #4294967295
 8001c18:	f7ff ff8e 	bl	8001b38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c1c:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <SysTick_Config+0x40>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c22:	4b04      	ldr	r3, [pc, #16]	; (8001c34 <SysTick_Config+0x40>)
 8001c24:	2207      	movs	r2, #7
 8001c26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	e000e010 	.word	0xe000e010

08001c38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f7ff ff29 	bl	8001a98 <__NVIC_SetPriorityGrouping>
}
 8001c46:	bf00      	nop
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b086      	sub	sp, #24
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	4603      	mov	r3, r0
 8001c56:	60b9      	str	r1, [r7, #8]
 8001c58:	607a      	str	r2, [r7, #4]
 8001c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c60:	f7ff ff3e 	bl	8001ae0 <__NVIC_GetPriorityGrouping>
 8001c64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	68b9      	ldr	r1, [r7, #8]
 8001c6a:	6978      	ldr	r0, [r7, #20]
 8001c6c:	f7ff ff8e 	bl	8001b8c <NVIC_EncodePriority>
 8001c70:	4602      	mov	r2, r0
 8001c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c76:	4611      	mov	r1, r2
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff ff5d 	bl	8001b38 <__NVIC_SetPriority>
}
 8001c7e:	bf00      	nop
 8001c80:	3718      	adds	r7, #24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b082      	sub	sp, #8
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff ff31 	bl	8001afc <__NVIC_EnableIRQ>
}
 8001c9a:	bf00      	nop
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b082      	sub	sp, #8
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7ff ffa2 	bl	8001bf4 <SysTick_Config>
 8001cb0:	4603      	mov	r3, r0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b084      	sub	sp, #16
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001cc8:	f7ff faea 	bl	80012a0 <HAL_GetTick>
 8001ccc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d008      	beq.n	8001cec <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2280      	movs	r2, #128	; 0x80
 8001cde:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e052      	b.n	8001d92 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f022 0216 	bic.w	r2, r2, #22
 8001cfa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	695a      	ldr	r2, [r3, #20]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d0a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d103      	bne.n	8001d1c <HAL_DMA_Abort+0x62>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d007      	beq.n	8001d2c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f022 0208 	bic.w	r2, r2, #8
 8001d2a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 0201 	bic.w	r2, r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d3c:	e013      	b.n	8001d66 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d3e:	f7ff faaf 	bl	80012a0 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b05      	cmp	r3, #5
 8001d4a:	d90c      	bls.n	8001d66 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2220      	movs	r2, #32
 8001d50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2203      	movs	r2, #3
 8001d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e015      	b.n	8001d92 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1e4      	bne.n	8001d3e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d78:	223f      	movs	r2, #63	; 0x3f
 8001d7a:	409a      	lsls	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d004      	beq.n	8001db8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2280      	movs	r2, #128	; 0x80
 8001db2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e00c      	b.n	8001dd2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2205      	movs	r2, #5
 8001dbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f022 0201 	bic.w	r2, r2, #1
 8001dce:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
	...

08001de0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b089      	sub	sp, #36	; 0x24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dea:	2300      	movs	r3, #0
 8001dec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dee:	2300      	movs	r3, #0
 8001df0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001df2:	2300      	movs	r3, #0
 8001df4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001df6:	2300      	movs	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
 8001dfa:	e16b      	b.n	80020d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	697a      	ldr	r2, [r7, #20]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	f040 815a 	bne.w	80020ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f003 0303 	and.w	r3, r3, #3
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d005      	beq.n	8001e32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d130      	bne.n	8001e94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	2203      	movs	r2, #3
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	43db      	mvns	r3, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4013      	ands	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	68da      	ldr	r2, [r3, #12]
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e68:	2201      	movs	r2, #1
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4013      	ands	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	091b      	lsrs	r3, r3, #4
 8001e7e:	f003 0201 	and.w	r2, r3, #1
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f003 0303 	and.w	r3, r3, #3
 8001e9c:	2b03      	cmp	r3, #3
 8001e9e:	d017      	beq.n	8001ed0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	2203      	movs	r2, #3
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f003 0303 	and.w	r3, r3, #3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d123      	bne.n	8001f24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	08da      	lsrs	r2, r3, #3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3208      	adds	r2, #8
 8001ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	220f      	movs	r2, #15
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4013      	ands	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	691a      	ldr	r2, [r3, #16]
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	08da      	lsrs	r2, r3, #3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	3208      	adds	r2, #8
 8001f1e:	69b9      	ldr	r1, [r7, #24]
 8001f20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	2203      	movs	r2, #3
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	43db      	mvns	r3, r3
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f003 0203 	and.w	r2, r3, #3
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 80b4 	beq.w	80020ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	4b60      	ldr	r3, [pc, #384]	; (80020ec <HAL_GPIO_Init+0x30c>)
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6e:	4a5f      	ldr	r2, [pc, #380]	; (80020ec <HAL_GPIO_Init+0x30c>)
 8001f70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f74:	6453      	str	r3, [r2, #68]	; 0x44
 8001f76:	4b5d      	ldr	r3, [pc, #372]	; (80020ec <HAL_GPIO_Init+0x30c>)
 8001f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f82:	4a5b      	ldr	r2, [pc, #364]	; (80020f0 <HAL_GPIO_Init+0x310>)
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	089b      	lsrs	r3, r3, #2
 8001f88:	3302      	adds	r3, #2
 8001f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	f003 0303 	and.w	r3, r3, #3
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	220f      	movs	r2, #15
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a52      	ldr	r2, [pc, #328]	; (80020f4 <HAL_GPIO_Init+0x314>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d02b      	beq.n	8002006 <HAL_GPIO_Init+0x226>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a51      	ldr	r2, [pc, #324]	; (80020f8 <HAL_GPIO_Init+0x318>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d025      	beq.n	8002002 <HAL_GPIO_Init+0x222>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a50      	ldr	r2, [pc, #320]	; (80020fc <HAL_GPIO_Init+0x31c>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d01f      	beq.n	8001ffe <HAL_GPIO_Init+0x21e>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a4f      	ldr	r2, [pc, #316]	; (8002100 <HAL_GPIO_Init+0x320>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d019      	beq.n	8001ffa <HAL_GPIO_Init+0x21a>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a4e      	ldr	r2, [pc, #312]	; (8002104 <HAL_GPIO_Init+0x324>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d013      	beq.n	8001ff6 <HAL_GPIO_Init+0x216>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a4d      	ldr	r2, [pc, #308]	; (8002108 <HAL_GPIO_Init+0x328>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d00d      	beq.n	8001ff2 <HAL_GPIO_Init+0x212>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a4c      	ldr	r2, [pc, #304]	; (800210c <HAL_GPIO_Init+0x32c>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d007      	beq.n	8001fee <HAL_GPIO_Init+0x20e>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a4b      	ldr	r2, [pc, #300]	; (8002110 <HAL_GPIO_Init+0x330>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d101      	bne.n	8001fea <HAL_GPIO_Init+0x20a>
 8001fe6:	2307      	movs	r3, #7
 8001fe8:	e00e      	b.n	8002008 <HAL_GPIO_Init+0x228>
 8001fea:	2308      	movs	r3, #8
 8001fec:	e00c      	b.n	8002008 <HAL_GPIO_Init+0x228>
 8001fee:	2306      	movs	r3, #6
 8001ff0:	e00a      	b.n	8002008 <HAL_GPIO_Init+0x228>
 8001ff2:	2305      	movs	r3, #5
 8001ff4:	e008      	b.n	8002008 <HAL_GPIO_Init+0x228>
 8001ff6:	2304      	movs	r3, #4
 8001ff8:	e006      	b.n	8002008 <HAL_GPIO_Init+0x228>
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e004      	b.n	8002008 <HAL_GPIO_Init+0x228>
 8001ffe:	2302      	movs	r3, #2
 8002000:	e002      	b.n	8002008 <HAL_GPIO_Init+0x228>
 8002002:	2301      	movs	r3, #1
 8002004:	e000      	b.n	8002008 <HAL_GPIO_Init+0x228>
 8002006:	2300      	movs	r3, #0
 8002008:	69fa      	ldr	r2, [r7, #28]
 800200a:	f002 0203 	and.w	r2, r2, #3
 800200e:	0092      	lsls	r2, r2, #2
 8002010:	4093      	lsls	r3, r2
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4313      	orrs	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002018:	4935      	ldr	r1, [pc, #212]	; (80020f0 <HAL_GPIO_Init+0x310>)
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	089b      	lsrs	r3, r3, #2
 800201e:	3302      	adds	r3, #2
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002026:	4b3b      	ldr	r3, [pc, #236]	; (8002114 <HAL_GPIO_Init+0x334>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	43db      	mvns	r3, r3
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	4013      	ands	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	4313      	orrs	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800204a:	4a32      	ldr	r2, [pc, #200]	; (8002114 <HAL_GPIO_Init+0x334>)
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002050:	4b30      	ldr	r3, [pc, #192]	; (8002114 <HAL_GPIO_Init+0x334>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	43db      	mvns	r3, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4013      	ands	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d003      	beq.n	8002074 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	4313      	orrs	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002074:	4a27      	ldr	r2, [pc, #156]	; (8002114 <HAL_GPIO_Init+0x334>)
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800207a:	4b26      	ldr	r3, [pc, #152]	; (8002114 <HAL_GPIO_Init+0x334>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	43db      	mvns	r3, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4013      	ands	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	4313      	orrs	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800209e:	4a1d      	ldr	r2, [pc, #116]	; (8002114 <HAL_GPIO_Init+0x334>)
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020a4:	4b1b      	ldr	r3, [pc, #108]	; (8002114 <HAL_GPIO_Init+0x334>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	43db      	mvns	r3, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4013      	ands	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020c8:	4a12      	ldr	r2, [pc, #72]	; (8002114 <HAL_GPIO_Init+0x334>)
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	3301      	adds	r3, #1
 80020d2:	61fb      	str	r3, [r7, #28]
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	2b0f      	cmp	r3, #15
 80020d8:	f67f ae90 	bls.w	8001dfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020dc:	bf00      	nop
 80020de:	bf00      	nop
 80020e0:	3724      	adds	r7, #36	; 0x24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	40023800 	.word	0x40023800
 80020f0:	40013800 	.word	0x40013800
 80020f4:	40020000 	.word	0x40020000
 80020f8:	40020400 	.word	0x40020400
 80020fc:	40020800 	.word	0x40020800
 8002100:	40020c00 	.word	0x40020c00
 8002104:	40021000 	.word	0x40021000
 8002108:	40021400 	.word	0x40021400
 800210c:	40021800 	.word	0x40021800
 8002110:	40021c00 	.word	0x40021c00
 8002114:	40013c00 	.word	0x40013c00

08002118 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	460b      	mov	r3, r1
 8002122:	807b      	strh	r3, [r7, #2]
 8002124:	4613      	mov	r3, r2
 8002126:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002128:	787b      	ldrb	r3, [r7, #1]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800212e:	887a      	ldrh	r2, [r7, #2]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002134:	e003      	b.n	800213e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002136:	887b      	ldrh	r3, [r7, #2]
 8002138:	041a      	lsls	r2, r3, #16
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	619a      	str	r2, [r3, #24]
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800214a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800214c:	b08f      	sub	sp, #60	; 0x3c
 800214e:	af0a      	add	r7, sp, #40	; 0x28
 8002150:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d101      	bne.n	800215c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e054      	b.n	8002206 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b00      	cmp	r3, #0
 800216c:	d106      	bne.n	800217c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f00a f924 	bl	800c3c4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2203      	movs	r2, #3
 8002180:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800218c:	2b00      	cmp	r3, #0
 800218e:	d102      	bne.n	8002196 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f003 ff94 	bl	80060c8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	603b      	str	r3, [r7, #0]
 80021a6:	687e      	ldr	r6, [r7, #4]
 80021a8:	466d      	mov	r5, sp
 80021aa:	f106 0410 	add.w	r4, r6, #16
 80021ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80021be:	1d33      	adds	r3, r6, #4
 80021c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021c2:	6838      	ldr	r0, [r7, #0]
 80021c4:	f003 ff0e 	bl	8005fe4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2101      	movs	r1, #1
 80021ce:	4618      	mov	r0, r3
 80021d0:	f003 ff8b 	bl	80060ea <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	603b      	str	r3, [r7, #0]
 80021da:	687e      	ldr	r6, [r7, #4]
 80021dc:	466d      	mov	r5, sp
 80021de:	f106 0410 	add.w	r4, r6, #16
 80021e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80021f2:	1d33      	adds	r3, r6, #4
 80021f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021f6:	6838      	ldr	r0, [r7, #0]
 80021f8:	f004 f914 	bl	8006424 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3714      	adds	r7, #20
 800220a:	46bd      	mov	sp, r7
 800220c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800220e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800220e:	b590      	push	{r4, r7, lr}
 8002210:	b089      	sub	sp, #36	; 0x24
 8002212:	af04      	add	r7, sp, #16
 8002214:	6078      	str	r0, [r7, #4]
 8002216:	4608      	mov	r0, r1
 8002218:	4611      	mov	r1, r2
 800221a:	461a      	mov	r2, r3
 800221c:	4603      	mov	r3, r0
 800221e:	70fb      	strb	r3, [r7, #3]
 8002220:	460b      	mov	r3, r1
 8002222:	70bb      	strb	r3, [r7, #2]
 8002224:	4613      	mov	r3, r2
 8002226:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800222e:	2b01      	cmp	r3, #1
 8002230:	d101      	bne.n	8002236 <HAL_HCD_HC_Init+0x28>
 8002232:	2302      	movs	r3, #2
 8002234:	e076      	b.n	8002324 <HAL_HCD_HC_Init+0x116>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2201      	movs	r2, #1
 800223a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800223e:	78fb      	ldrb	r3, [r7, #3]
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	212c      	movs	r1, #44	; 0x2c
 8002244:	fb01 f303 	mul.w	r3, r1, r3
 8002248:	4413      	add	r3, r2
 800224a:	333d      	adds	r3, #61	; 0x3d
 800224c:	2200      	movs	r2, #0
 800224e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002250:	78fb      	ldrb	r3, [r7, #3]
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	212c      	movs	r1, #44	; 0x2c
 8002256:	fb01 f303 	mul.w	r3, r1, r3
 800225a:	4413      	add	r3, r2
 800225c:	3338      	adds	r3, #56	; 0x38
 800225e:	787a      	ldrb	r2, [r7, #1]
 8002260:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002262:	78fb      	ldrb	r3, [r7, #3]
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	212c      	movs	r1, #44	; 0x2c
 8002268:	fb01 f303 	mul.w	r3, r1, r3
 800226c:	4413      	add	r3, r2
 800226e:	3340      	adds	r3, #64	; 0x40
 8002270:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002272:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002274:	78fb      	ldrb	r3, [r7, #3]
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	212c      	movs	r1, #44	; 0x2c
 800227a:	fb01 f303 	mul.w	r3, r1, r3
 800227e:	4413      	add	r3, r2
 8002280:	3339      	adds	r3, #57	; 0x39
 8002282:	78fa      	ldrb	r2, [r7, #3]
 8002284:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002286:	78fb      	ldrb	r3, [r7, #3]
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	212c      	movs	r1, #44	; 0x2c
 800228c:	fb01 f303 	mul.w	r3, r1, r3
 8002290:	4413      	add	r3, r2
 8002292:	333f      	adds	r3, #63	; 0x3f
 8002294:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002298:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800229a:	78fb      	ldrb	r3, [r7, #3]
 800229c:	78ba      	ldrb	r2, [r7, #2]
 800229e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80022a2:	b2d0      	uxtb	r0, r2
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	212c      	movs	r1, #44	; 0x2c
 80022a8:	fb01 f303 	mul.w	r3, r1, r3
 80022ac:	4413      	add	r3, r2
 80022ae:	333a      	adds	r3, #58	; 0x3a
 80022b0:	4602      	mov	r2, r0
 80022b2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80022b4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	da09      	bge.n	80022d0 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80022bc:	78fb      	ldrb	r3, [r7, #3]
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	212c      	movs	r1, #44	; 0x2c
 80022c2:	fb01 f303 	mul.w	r3, r1, r3
 80022c6:	4413      	add	r3, r2
 80022c8:	333b      	adds	r3, #59	; 0x3b
 80022ca:	2201      	movs	r2, #1
 80022cc:	701a      	strb	r2, [r3, #0]
 80022ce:	e008      	b.n	80022e2 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80022d0:	78fb      	ldrb	r3, [r7, #3]
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	212c      	movs	r1, #44	; 0x2c
 80022d6:	fb01 f303 	mul.w	r3, r1, r3
 80022da:	4413      	add	r3, r2
 80022dc:	333b      	adds	r3, #59	; 0x3b
 80022de:	2200      	movs	r2, #0
 80022e0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80022e2:	78fb      	ldrb	r3, [r7, #3]
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	212c      	movs	r1, #44	; 0x2c
 80022e8:	fb01 f303 	mul.w	r3, r1, r3
 80022ec:	4413      	add	r3, r2
 80022ee:	333c      	adds	r3, #60	; 0x3c
 80022f0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80022f4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6818      	ldr	r0, [r3, #0]
 80022fa:	787c      	ldrb	r4, [r7, #1]
 80022fc:	78ba      	ldrb	r2, [r7, #2]
 80022fe:	78f9      	ldrb	r1, [r7, #3]
 8002300:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002302:	9302      	str	r3, [sp, #8]
 8002304:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002308:	9301      	str	r3, [sp, #4]
 800230a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800230e:	9300      	str	r3, [sp, #0]
 8002310:	4623      	mov	r3, r4
 8002312:	f004 fa0d 	bl	8006730 <USB_HC_Init>
 8002316:	4603      	mov	r3, r0
 8002318:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002322:	7bfb      	ldrb	r3, [r7, #15]
}
 8002324:	4618      	mov	r0, r3
 8002326:	3714      	adds	r7, #20
 8002328:	46bd      	mov	sp, r7
 800232a:	bd90      	pop	{r4, r7, pc}

0800232c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	460b      	mov	r3, r1
 8002336:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002338:	2300      	movs	r3, #0
 800233a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002342:	2b01      	cmp	r3, #1
 8002344:	d101      	bne.n	800234a <HAL_HCD_HC_Halt+0x1e>
 8002346:	2302      	movs	r3, #2
 8002348:	e00f      	b.n	800236a <HAL_HCD_HC_Halt+0x3e>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	78fa      	ldrb	r2, [r7, #3]
 8002358:	4611      	mov	r1, r2
 800235a:	4618      	mov	r0, r3
 800235c:	f004 fc5d 	bl	8006c1a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002368:	7bfb      	ldrb	r3, [r7, #15]
}
 800236a:	4618      	mov	r0, r3
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
	...

08002374 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	4608      	mov	r0, r1
 800237e:	4611      	mov	r1, r2
 8002380:	461a      	mov	r2, r3
 8002382:	4603      	mov	r3, r0
 8002384:	70fb      	strb	r3, [r7, #3]
 8002386:	460b      	mov	r3, r1
 8002388:	70bb      	strb	r3, [r7, #2]
 800238a:	4613      	mov	r3, r2
 800238c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800238e:	78fb      	ldrb	r3, [r7, #3]
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	212c      	movs	r1, #44	; 0x2c
 8002394:	fb01 f303 	mul.w	r3, r1, r3
 8002398:	4413      	add	r3, r2
 800239a:	333b      	adds	r3, #59	; 0x3b
 800239c:	78ba      	ldrb	r2, [r7, #2]
 800239e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80023a0:	78fb      	ldrb	r3, [r7, #3]
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	212c      	movs	r1, #44	; 0x2c
 80023a6:	fb01 f303 	mul.w	r3, r1, r3
 80023aa:	4413      	add	r3, r2
 80023ac:	333f      	adds	r3, #63	; 0x3f
 80023ae:	787a      	ldrb	r2, [r7, #1]
 80023b0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80023b2:	7c3b      	ldrb	r3, [r7, #16]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d112      	bne.n	80023de <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80023b8:	78fb      	ldrb	r3, [r7, #3]
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	212c      	movs	r1, #44	; 0x2c
 80023be:	fb01 f303 	mul.w	r3, r1, r3
 80023c2:	4413      	add	r3, r2
 80023c4:	3342      	adds	r3, #66	; 0x42
 80023c6:	2203      	movs	r2, #3
 80023c8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80023ca:	78fb      	ldrb	r3, [r7, #3]
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	212c      	movs	r1, #44	; 0x2c
 80023d0:	fb01 f303 	mul.w	r3, r1, r3
 80023d4:	4413      	add	r3, r2
 80023d6:	333d      	adds	r3, #61	; 0x3d
 80023d8:	7f3a      	ldrb	r2, [r7, #28]
 80023da:	701a      	strb	r2, [r3, #0]
 80023dc:	e008      	b.n	80023f0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023de:	78fb      	ldrb	r3, [r7, #3]
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	212c      	movs	r1, #44	; 0x2c
 80023e4:	fb01 f303 	mul.w	r3, r1, r3
 80023e8:	4413      	add	r3, r2
 80023ea:	3342      	adds	r3, #66	; 0x42
 80023ec:	2202      	movs	r2, #2
 80023ee:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80023f0:	787b      	ldrb	r3, [r7, #1]
 80023f2:	2b03      	cmp	r3, #3
 80023f4:	f200 80c6 	bhi.w	8002584 <HAL_HCD_HC_SubmitRequest+0x210>
 80023f8:	a201      	add	r2, pc, #4	; (adr r2, 8002400 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80023fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023fe:	bf00      	nop
 8002400:	08002411 	.word	0x08002411
 8002404:	08002571 	.word	0x08002571
 8002408:	08002475 	.word	0x08002475
 800240c:	080024f3 	.word	0x080024f3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002410:	7c3b      	ldrb	r3, [r7, #16]
 8002412:	2b01      	cmp	r3, #1
 8002414:	f040 80b8 	bne.w	8002588 <HAL_HCD_HC_SubmitRequest+0x214>
 8002418:	78bb      	ldrb	r3, [r7, #2]
 800241a:	2b00      	cmp	r3, #0
 800241c:	f040 80b4 	bne.w	8002588 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002420:	8b3b      	ldrh	r3, [r7, #24]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d108      	bne.n	8002438 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002426:	78fb      	ldrb	r3, [r7, #3]
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	212c      	movs	r1, #44	; 0x2c
 800242c:	fb01 f303 	mul.w	r3, r1, r3
 8002430:	4413      	add	r3, r2
 8002432:	3355      	adds	r3, #85	; 0x55
 8002434:	2201      	movs	r2, #1
 8002436:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002438:	78fb      	ldrb	r3, [r7, #3]
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	212c      	movs	r1, #44	; 0x2c
 800243e:	fb01 f303 	mul.w	r3, r1, r3
 8002442:	4413      	add	r3, r2
 8002444:	3355      	adds	r3, #85	; 0x55
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d109      	bne.n	8002460 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800244c:	78fb      	ldrb	r3, [r7, #3]
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	212c      	movs	r1, #44	; 0x2c
 8002452:	fb01 f303 	mul.w	r3, r1, r3
 8002456:	4413      	add	r3, r2
 8002458:	3342      	adds	r3, #66	; 0x42
 800245a:	2200      	movs	r2, #0
 800245c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800245e:	e093      	b.n	8002588 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002460:	78fb      	ldrb	r3, [r7, #3]
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	212c      	movs	r1, #44	; 0x2c
 8002466:	fb01 f303 	mul.w	r3, r1, r3
 800246a:	4413      	add	r3, r2
 800246c:	3342      	adds	r3, #66	; 0x42
 800246e:	2202      	movs	r2, #2
 8002470:	701a      	strb	r2, [r3, #0]
      break;
 8002472:	e089      	b.n	8002588 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002474:	78bb      	ldrb	r3, [r7, #2]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d11d      	bne.n	80024b6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800247a:	78fb      	ldrb	r3, [r7, #3]
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	212c      	movs	r1, #44	; 0x2c
 8002480:	fb01 f303 	mul.w	r3, r1, r3
 8002484:	4413      	add	r3, r2
 8002486:	3355      	adds	r3, #85	; 0x55
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d109      	bne.n	80024a2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800248e:	78fb      	ldrb	r3, [r7, #3]
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	212c      	movs	r1, #44	; 0x2c
 8002494:	fb01 f303 	mul.w	r3, r1, r3
 8002498:	4413      	add	r3, r2
 800249a:	3342      	adds	r3, #66	; 0x42
 800249c:	2200      	movs	r2, #0
 800249e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80024a0:	e073      	b.n	800258a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024a2:	78fb      	ldrb	r3, [r7, #3]
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	212c      	movs	r1, #44	; 0x2c
 80024a8:	fb01 f303 	mul.w	r3, r1, r3
 80024ac:	4413      	add	r3, r2
 80024ae:	3342      	adds	r3, #66	; 0x42
 80024b0:	2202      	movs	r2, #2
 80024b2:	701a      	strb	r2, [r3, #0]
      break;
 80024b4:	e069      	b.n	800258a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80024b6:	78fb      	ldrb	r3, [r7, #3]
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	212c      	movs	r1, #44	; 0x2c
 80024bc:	fb01 f303 	mul.w	r3, r1, r3
 80024c0:	4413      	add	r3, r2
 80024c2:	3354      	adds	r3, #84	; 0x54
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d109      	bne.n	80024de <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024ca:	78fb      	ldrb	r3, [r7, #3]
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	212c      	movs	r1, #44	; 0x2c
 80024d0:	fb01 f303 	mul.w	r3, r1, r3
 80024d4:	4413      	add	r3, r2
 80024d6:	3342      	adds	r3, #66	; 0x42
 80024d8:	2200      	movs	r2, #0
 80024da:	701a      	strb	r2, [r3, #0]
      break;
 80024dc:	e055      	b.n	800258a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024de:	78fb      	ldrb	r3, [r7, #3]
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	212c      	movs	r1, #44	; 0x2c
 80024e4:	fb01 f303 	mul.w	r3, r1, r3
 80024e8:	4413      	add	r3, r2
 80024ea:	3342      	adds	r3, #66	; 0x42
 80024ec:	2202      	movs	r2, #2
 80024ee:	701a      	strb	r2, [r3, #0]
      break;
 80024f0:	e04b      	b.n	800258a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80024f2:	78bb      	ldrb	r3, [r7, #2]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d11d      	bne.n	8002534 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80024f8:	78fb      	ldrb	r3, [r7, #3]
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	212c      	movs	r1, #44	; 0x2c
 80024fe:	fb01 f303 	mul.w	r3, r1, r3
 8002502:	4413      	add	r3, r2
 8002504:	3355      	adds	r3, #85	; 0x55
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d109      	bne.n	8002520 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800250c:	78fb      	ldrb	r3, [r7, #3]
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	212c      	movs	r1, #44	; 0x2c
 8002512:	fb01 f303 	mul.w	r3, r1, r3
 8002516:	4413      	add	r3, r2
 8002518:	3342      	adds	r3, #66	; 0x42
 800251a:	2200      	movs	r2, #0
 800251c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800251e:	e034      	b.n	800258a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002520:	78fb      	ldrb	r3, [r7, #3]
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	212c      	movs	r1, #44	; 0x2c
 8002526:	fb01 f303 	mul.w	r3, r1, r3
 800252a:	4413      	add	r3, r2
 800252c:	3342      	adds	r3, #66	; 0x42
 800252e:	2202      	movs	r2, #2
 8002530:	701a      	strb	r2, [r3, #0]
      break;
 8002532:	e02a      	b.n	800258a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002534:	78fb      	ldrb	r3, [r7, #3]
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	212c      	movs	r1, #44	; 0x2c
 800253a:	fb01 f303 	mul.w	r3, r1, r3
 800253e:	4413      	add	r3, r2
 8002540:	3354      	adds	r3, #84	; 0x54
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d109      	bne.n	800255c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002548:	78fb      	ldrb	r3, [r7, #3]
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	212c      	movs	r1, #44	; 0x2c
 800254e:	fb01 f303 	mul.w	r3, r1, r3
 8002552:	4413      	add	r3, r2
 8002554:	3342      	adds	r3, #66	; 0x42
 8002556:	2200      	movs	r2, #0
 8002558:	701a      	strb	r2, [r3, #0]
      break;
 800255a:	e016      	b.n	800258a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800255c:	78fb      	ldrb	r3, [r7, #3]
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	212c      	movs	r1, #44	; 0x2c
 8002562:	fb01 f303 	mul.w	r3, r1, r3
 8002566:	4413      	add	r3, r2
 8002568:	3342      	adds	r3, #66	; 0x42
 800256a:	2202      	movs	r2, #2
 800256c:	701a      	strb	r2, [r3, #0]
      break;
 800256e:	e00c      	b.n	800258a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002570:	78fb      	ldrb	r3, [r7, #3]
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	212c      	movs	r1, #44	; 0x2c
 8002576:	fb01 f303 	mul.w	r3, r1, r3
 800257a:	4413      	add	r3, r2
 800257c:	3342      	adds	r3, #66	; 0x42
 800257e:	2200      	movs	r2, #0
 8002580:	701a      	strb	r2, [r3, #0]
      break;
 8002582:	e002      	b.n	800258a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002584:	bf00      	nop
 8002586:	e000      	b.n	800258a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002588:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800258a:	78fb      	ldrb	r3, [r7, #3]
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	212c      	movs	r1, #44	; 0x2c
 8002590:	fb01 f303 	mul.w	r3, r1, r3
 8002594:	4413      	add	r3, r2
 8002596:	3344      	adds	r3, #68	; 0x44
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800259c:	78fb      	ldrb	r3, [r7, #3]
 800259e:	8b3a      	ldrh	r2, [r7, #24]
 80025a0:	6879      	ldr	r1, [r7, #4]
 80025a2:	202c      	movs	r0, #44	; 0x2c
 80025a4:	fb00 f303 	mul.w	r3, r0, r3
 80025a8:	440b      	add	r3, r1
 80025aa:	334c      	adds	r3, #76	; 0x4c
 80025ac:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80025ae:	78fb      	ldrb	r3, [r7, #3]
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	212c      	movs	r1, #44	; 0x2c
 80025b4:	fb01 f303 	mul.w	r3, r1, r3
 80025b8:	4413      	add	r3, r2
 80025ba:	3360      	adds	r3, #96	; 0x60
 80025bc:	2200      	movs	r2, #0
 80025be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80025c0:	78fb      	ldrb	r3, [r7, #3]
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	212c      	movs	r1, #44	; 0x2c
 80025c6:	fb01 f303 	mul.w	r3, r1, r3
 80025ca:	4413      	add	r3, r2
 80025cc:	3350      	adds	r3, #80	; 0x50
 80025ce:	2200      	movs	r2, #0
 80025d0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80025d2:	78fb      	ldrb	r3, [r7, #3]
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	212c      	movs	r1, #44	; 0x2c
 80025d8:	fb01 f303 	mul.w	r3, r1, r3
 80025dc:	4413      	add	r3, r2
 80025de:	3339      	adds	r3, #57	; 0x39
 80025e0:	78fa      	ldrb	r2, [r7, #3]
 80025e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80025e4:	78fb      	ldrb	r3, [r7, #3]
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	212c      	movs	r1, #44	; 0x2c
 80025ea:	fb01 f303 	mul.w	r3, r1, r3
 80025ee:	4413      	add	r3, r2
 80025f0:	3361      	adds	r3, #97	; 0x61
 80025f2:	2200      	movs	r2, #0
 80025f4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6818      	ldr	r0, [r3, #0]
 80025fa:	78fb      	ldrb	r3, [r7, #3]
 80025fc:	222c      	movs	r2, #44	; 0x2c
 80025fe:	fb02 f303 	mul.w	r3, r2, r3
 8002602:	3338      	adds	r3, #56	; 0x38
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	18d1      	adds	r1, r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	b2db      	uxtb	r3, r3
 800260e:	461a      	mov	r2, r3
 8002610:	f004 f9b0 	bl	8006974 <USB_HC_StartXfer>
 8002614:	4603      	mov	r3, r0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop

08002620 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f003 feb1 	bl	800639e <USB_GetMode>
 800263c:	4603      	mov	r3, r0
 800263e:	2b01      	cmp	r3, #1
 8002640:	f040 80f6 	bne.w	8002830 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4618      	mov	r0, r3
 800264a:	f003 fe95 	bl	8006378 <USB_ReadInterrupts>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	f000 80ec 	beq.w	800282e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f003 fe8c 	bl	8006378 <USB_ReadInterrupts>
 8002660:	4603      	mov	r3, r0
 8002662:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002666:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800266a:	d104      	bne.n	8002676 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002674:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f003 fe7c 	bl	8006378 <USB_ReadInterrupts>
 8002680:	4603      	mov	r3, r0
 8002682:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002686:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800268a:	d104      	bne.n	8002696 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002694:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f003 fe6c 	bl	8006378 <USB_ReadInterrupts>
 80026a0:	4603      	mov	r3, r0
 80026a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026aa:	d104      	bne.n	80026b6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80026b4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f003 fe5c 	bl	8006378 <USB_ReadInterrupts>
 80026c0:	4603      	mov	r3, r0
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d103      	bne.n	80026d2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2202      	movs	r2, #2
 80026d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f003 fe4e 	bl	8006378 <USB_ReadInterrupts>
 80026dc:	4603      	mov	r3, r0
 80026de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026e6:	d11c      	bne.n	8002722 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80026f0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10f      	bne.n	8002722 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002702:	2110      	movs	r1, #16
 8002704:	6938      	ldr	r0, [r7, #16]
 8002706:	f003 fd3d 	bl	8006184 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800270a:	6938      	ldr	r0, [r7, #16]
 800270c:	f003 fd6e 	bl	80061ec <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2101      	movs	r1, #1
 8002716:	4618      	mov	r0, r3
 8002718:	f003 ff44 	bl	80065a4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f009 fecf 	bl	800c4c0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4618      	mov	r0, r3
 8002728:	f003 fe26 	bl	8006378 <USB_ReadInterrupts>
 800272c:	4603      	mov	r3, r0
 800272e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002732:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002736:	d102      	bne.n	800273e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f001 f89e 	bl	800387a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f003 fe18 	bl	8006378 <USB_ReadInterrupts>
 8002748:	4603      	mov	r3, r0
 800274a:	f003 0308 	and.w	r3, r3, #8
 800274e:	2b08      	cmp	r3, #8
 8002750:	d106      	bne.n	8002760 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f009 fe98 	bl	800c488 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2208      	movs	r2, #8
 800275e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4618      	mov	r0, r3
 8002766:	f003 fe07 	bl	8006378 <USB_ReadInterrupts>
 800276a:	4603      	mov	r3, r0
 800276c:	f003 0310 	and.w	r3, r3, #16
 8002770:	2b10      	cmp	r3, #16
 8002772:	d101      	bne.n	8002778 <HAL_HCD_IRQHandler+0x158>
 8002774:	2301      	movs	r3, #1
 8002776:	e000      	b.n	800277a <HAL_HCD_IRQHandler+0x15a>
 8002778:	2300      	movs	r3, #0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d012      	beq.n	80027a4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	699a      	ldr	r2, [r3, #24]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 0210 	bic.w	r2, r2, #16
 800278c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 ffa1 	bl	80036d6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	699a      	ldr	r2, [r3, #24]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f042 0210 	orr.w	r2, r2, #16
 80027a2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f003 fde5 	bl	8006378 <USB_ReadInterrupts>
 80027ae:	4603      	mov	r3, r0
 80027b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027b8:	d13a      	bne.n	8002830 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f004 fa1a 	bl	8006bf8 <USB_HC_ReadInterrupt>
 80027c4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80027c6:	2300      	movs	r3, #0
 80027c8:	617b      	str	r3, [r7, #20]
 80027ca:	e025      	b.n	8002818 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	68ba      	ldr	r2, [r7, #8]
 80027d4:	fa22 f303 	lsr.w	r3, r2, r3
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d018      	beq.n	8002812 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	015a      	lsls	r2, r3, #5
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4413      	add	r3, r2
 80027e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027f6:	d106      	bne.n	8002806 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	4619      	mov	r1, r3
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 f8ab 	bl	800295a <HCD_HC_IN_IRQHandler>
 8002804:	e005      	b.n	8002812 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	b2db      	uxtb	r3, r3
 800280a:	4619      	mov	r1, r3
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f000 fbf9 	bl	8003004 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	3301      	adds	r3, #1
 8002816:	617b      	str	r3, [r7, #20]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	697a      	ldr	r2, [r7, #20]
 800281e:	429a      	cmp	r2, r3
 8002820:	d3d4      	bcc.n	80027cc <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800282a:	615a      	str	r2, [r3, #20]
 800282c:	e000      	b.n	8002830 <HAL_HCD_IRQHandler+0x210>
      return;
 800282e:	bf00      	nop
    }
  }
}
 8002830:	3718      	adds	r7, #24
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b082      	sub	sp, #8
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002844:	2b01      	cmp	r3, #1
 8002846:	d101      	bne.n	800284c <HAL_HCD_Start+0x16>
 8002848:	2302      	movs	r3, #2
 800284a:	e013      	b.n	8002874 <HAL_HCD_Start+0x3e>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2101      	movs	r1, #1
 800285a:	4618      	mov	r0, r3
 800285c:	f003 ff06 	bl	800666c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4618      	mov	r0, r3
 8002866:	f003 fc1e 	bl	80060a6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	3708      	adds	r7, #8
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800288a:	2b01      	cmp	r3, #1
 800288c:	d101      	bne.n	8002892 <HAL_HCD_Stop+0x16>
 800288e:	2302      	movs	r3, #2
 8002890:	e00d      	b.n	80028ae <HAL_HCD_Stop+0x32>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f004 faf4 	bl	8006e8c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b082      	sub	sp, #8
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f003 fea8 	bl	8006618 <USB_ResetPort>
 80028c8:	4603      	mov	r3, r0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
 80028da:	460b      	mov	r3, r1
 80028dc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80028de:	78fb      	ldrb	r3, [r7, #3]
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	212c      	movs	r1, #44	; 0x2c
 80028e4:	fb01 f303 	mul.w	r3, r1, r3
 80028e8:	4413      	add	r3, r2
 80028ea:	3360      	adds	r3, #96	; 0x60
 80028ec:	781b      	ldrb	r3, [r3, #0]
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
 8002902:	460b      	mov	r3, r1
 8002904:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002906:	78fb      	ldrb	r3, [r7, #3]
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	212c      	movs	r1, #44	; 0x2c
 800290c:	fb01 f303 	mul.w	r3, r1, r3
 8002910:	4413      	add	r3, r2
 8002912:	3350      	adds	r3, #80	; 0x50
 8002914:	681b      	ldr	r3, [r3, #0]
}
 8002916:	4618      	mov	r0, r3
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b082      	sub	sp, #8
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f003 feec 	bl	800670c <USB_GetCurrentFrame>
 8002934:	4603      	mov	r3, r0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b082      	sub	sp, #8
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f003 fec7 	bl	80066de <USB_GetHostSpeed>
 8002950:	4603      	mov	r3, r0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b086      	sub	sp, #24
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
 8002962:	460b      	mov	r3, r1
 8002964:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002970:	78fb      	ldrb	r3, [r7, #3]
 8002972:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	015a      	lsls	r2, r3, #5
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	4413      	add	r3, r2
 800297c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 0304 	and.w	r3, r3, #4
 8002986:	2b04      	cmp	r3, #4
 8002988:	d11a      	bne.n	80029c0 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	015a      	lsls	r2, r3, #5
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	4413      	add	r3, r2
 8002992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002996:	461a      	mov	r2, r3
 8002998:	2304      	movs	r3, #4
 800299a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	212c      	movs	r1, #44	; 0x2c
 80029a2:	fb01 f303 	mul.w	r3, r1, r3
 80029a6:	4413      	add	r3, r2
 80029a8:	3361      	adds	r3, #97	; 0x61
 80029aa:	2206      	movs	r2, #6
 80029ac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	4611      	mov	r1, r2
 80029b8:	4618      	mov	r0, r3
 80029ba:	f004 f92e 	bl	8006c1a <USB_HC_Halt>
 80029be:	e0af      	b.n	8002b20 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	015a      	lsls	r2, r3, #5
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	4413      	add	r3, r2
 80029c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029d6:	d11b      	bne.n	8002a10 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	015a      	lsls	r2, r3, #5
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	4413      	add	r3, r2
 80029e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e4:	461a      	mov	r2, r3
 80029e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029ea:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	212c      	movs	r1, #44	; 0x2c
 80029f2:	fb01 f303 	mul.w	r3, r1, r3
 80029f6:	4413      	add	r3, r2
 80029f8:	3361      	adds	r3, #97	; 0x61
 80029fa:	2207      	movs	r2, #7
 80029fc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	b2d2      	uxtb	r2, r2
 8002a06:	4611      	mov	r1, r2
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f004 f906 	bl	8006c1a <USB_HC_Halt>
 8002a0e:	e087      	b.n	8002b20 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	015a      	lsls	r2, r3, #5
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	4413      	add	r3, r2
 8002a18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 0320 	and.w	r3, r3, #32
 8002a22:	2b20      	cmp	r3, #32
 8002a24:	d109      	bne.n	8002a3a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	015a      	lsls	r2, r3, #5
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a32:	461a      	mov	r2, r3
 8002a34:	2320      	movs	r3, #32
 8002a36:	6093      	str	r3, [r2, #8]
 8002a38:	e072      	b.n	8002b20 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	015a      	lsls	r2, r3, #5
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	4413      	add	r3, r2
 8002a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f003 0308 	and.w	r3, r3, #8
 8002a4c:	2b08      	cmp	r3, #8
 8002a4e:	d11a      	bne.n	8002a86 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	015a      	lsls	r2, r3, #5
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	4413      	add	r3, r2
 8002a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	2308      	movs	r3, #8
 8002a60:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	212c      	movs	r1, #44	; 0x2c
 8002a68:	fb01 f303 	mul.w	r3, r1, r3
 8002a6c:	4413      	add	r3, r2
 8002a6e:	3361      	adds	r3, #97	; 0x61
 8002a70:	2205      	movs	r2, #5
 8002a72:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	b2d2      	uxtb	r2, r2
 8002a7c:	4611      	mov	r1, r2
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f004 f8cb 	bl	8006c1a <USB_HC_Halt>
 8002a84:	e04c      	b.n	8002b20 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	015a      	lsls	r2, r3, #5
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a9c:	d11b      	bne.n	8002ad6 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	015a      	lsls	r2, r3, #5
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aaa:	461a      	mov	r2, r3
 8002aac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ab0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	212c      	movs	r1, #44	; 0x2c
 8002ab8:	fb01 f303 	mul.w	r3, r1, r3
 8002abc:	4413      	add	r3, r2
 8002abe:	3361      	adds	r3, #97	; 0x61
 8002ac0:	2208      	movs	r2, #8
 8002ac2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	b2d2      	uxtb	r2, r2
 8002acc:	4611      	mov	r1, r2
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f004 f8a3 	bl	8006c1a <USB_HC_Halt>
 8002ad4:	e024      	b.n	8002b20 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	015a      	lsls	r2, r3, #5
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	4413      	add	r3, r2
 8002ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae8:	2b80      	cmp	r3, #128	; 0x80
 8002aea:	d119      	bne.n	8002b20 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	015a      	lsls	r2, r3, #5
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	4413      	add	r3, r2
 8002af4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af8:	461a      	mov	r2, r3
 8002afa:	2380      	movs	r3, #128	; 0x80
 8002afc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	212c      	movs	r1, #44	; 0x2c
 8002b04:	fb01 f303 	mul.w	r3, r1, r3
 8002b08:	4413      	add	r3, r2
 8002b0a:	3361      	adds	r3, #97	; 0x61
 8002b0c:	2206      	movs	r2, #6
 8002b0e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	b2d2      	uxtb	r2, r2
 8002b18:	4611      	mov	r1, r2
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f004 f87d 	bl	8006c1a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	015a      	lsls	r2, r3, #5
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	4413      	add	r3, r2
 8002b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b36:	d112      	bne.n	8002b5e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	b2d2      	uxtb	r2, r2
 8002b40:	4611      	mov	r1, r2
 8002b42:	4618      	mov	r0, r3
 8002b44:	f004 f869 	bl	8006c1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	015a      	lsls	r2, r3, #5
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	4413      	add	r3, r2
 8002b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b54:	461a      	mov	r2, r3
 8002b56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b5a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002b5c:	e24e      	b.n	8002ffc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	015a      	lsls	r2, r3, #5
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	4413      	add	r3, r2
 8002b66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	f040 80df 	bne.w	8002d34 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d019      	beq.n	8002bb2 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	212c      	movs	r1, #44	; 0x2c
 8002b84:	fb01 f303 	mul.w	r3, r1, r3
 8002b88:	4413      	add	r3, r2
 8002b8a:	3348      	adds	r3, #72	; 0x48
 8002b8c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	0159      	lsls	r1, r3, #5
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	440b      	add	r3, r1
 8002b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002ba0:	1ad2      	subs	r2, r2, r3
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	202c      	movs	r0, #44	; 0x2c
 8002ba8:	fb00 f303 	mul.w	r3, r0, r3
 8002bac:	440b      	add	r3, r1
 8002bae:	3350      	adds	r3, #80	; 0x50
 8002bb0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	212c      	movs	r1, #44	; 0x2c
 8002bb8:	fb01 f303 	mul.w	r3, r1, r3
 8002bbc:	4413      	add	r3, r2
 8002bbe:	3361      	adds	r3, #97	; 0x61
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	212c      	movs	r1, #44	; 0x2c
 8002bca:	fb01 f303 	mul.w	r3, r1, r3
 8002bce:	4413      	add	r3, r2
 8002bd0:	335c      	adds	r3, #92	; 0x5c
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	015a      	lsls	r2, r3, #5
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	4413      	add	r3, r2
 8002bde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be2:	461a      	mov	r2, r3
 8002be4:	2301      	movs	r3, #1
 8002be6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	212c      	movs	r1, #44	; 0x2c
 8002bee:	fb01 f303 	mul.w	r3, r1, r3
 8002bf2:	4413      	add	r3, r2
 8002bf4:	333f      	adds	r3, #63	; 0x3f
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d009      	beq.n	8002c10 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	212c      	movs	r1, #44	; 0x2c
 8002c02:	fb01 f303 	mul.w	r3, r1, r3
 8002c06:	4413      	add	r3, r2
 8002c08:	333f      	adds	r3, #63	; 0x3f
 8002c0a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d111      	bne.n	8002c34 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68fa      	ldr	r2, [r7, #12]
 8002c16:	b2d2      	uxtb	r2, r2
 8002c18:	4611      	mov	r1, r2
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f003 fffd 	bl	8006c1a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	015a      	lsls	r2, r3, #5
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	4413      	add	r3, r2
 8002c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	2310      	movs	r3, #16
 8002c30:	6093      	str	r3, [r2, #8]
 8002c32:	e03a      	b.n	8002caa <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	212c      	movs	r1, #44	; 0x2c
 8002c3a:	fb01 f303 	mul.w	r3, r1, r3
 8002c3e:	4413      	add	r3, r2
 8002c40:	333f      	adds	r3, #63	; 0x3f
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	2b03      	cmp	r3, #3
 8002c46:	d009      	beq.n	8002c5c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	212c      	movs	r1, #44	; 0x2c
 8002c4e:	fb01 f303 	mul.w	r3, r1, r3
 8002c52:	4413      	add	r3, r2
 8002c54:	333f      	adds	r3, #63	; 0x3f
 8002c56:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d126      	bne.n	8002caa <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	015a      	lsls	r2, r3, #5
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	4413      	add	r3, r2
 8002c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	0151      	lsls	r1, r2, #5
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	440a      	add	r2, r1
 8002c72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002c7a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	212c      	movs	r1, #44	; 0x2c
 8002c82:	fb01 f303 	mul.w	r3, r1, r3
 8002c86:	4413      	add	r3, r2
 8002c88:	3360      	adds	r3, #96	; 0x60
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	b2d9      	uxtb	r1, r3
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	202c      	movs	r0, #44	; 0x2c
 8002c98:	fb00 f303 	mul.w	r3, r0, r3
 8002c9c:	4413      	add	r3, r2
 8002c9e:	3360      	adds	r3, #96	; 0x60
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f009 fc19 	bl	800c4dc <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d12b      	bne.n	8002d0a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	212c      	movs	r1, #44	; 0x2c
 8002cb8:	fb01 f303 	mul.w	r3, r1, r3
 8002cbc:	4413      	add	r3, r2
 8002cbe:	3348      	adds	r3, #72	; 0x48
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	202c      	movs	r0, #44	; 0x2c
 8002cc8:	fb00 f202 	mul.w	r2, r0, r2
 8002ccc:	440a      	add	r2, r1
 8002cce:	3240      	adds	r2, #64	; 0x40
 8002cd0:	8812      	ldrh	r2, [r2, #0]
 8002cd2:	fbb3 f3f2 	udiv	r3, r3, r2
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f000 818e 	beq.w	8002ffc <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	212c      	movs	r1, #44	; 0x2c
 8002ce6:	fb01 f303 	mul.w	r3, r1, r3
 8002cea:	4413      	add	r3, r2
 8002cec:	3354      	adds	r3, #84	; 0x54
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	f083 0301 	eor.w	r3, r3, #1
 8002cf4:	b2d8      	uxtb	r0, r3
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	212c      	movs	r1, #44	; 0x2c
 8002cfc:	fb01 f303 	mul.w	r3, r1, r3
 8002d00:	4413      	add	r3, r2
 8002d02:	3354      	adds	r3, #84	; 0x54
 8002d04:	4602      	mov	r2, r0
 8002d06:	701a      	strb	r2, [r3, #0]
}
 8002d08:	e178      	b.n	8002ffc <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	212c      	movs	r1, #44	; 0x2c
 8002d10:	fb01 f303 	mul.w	r3, r1, r3
 8002d14:	4413      	add	r3, r2
 8002d16:	3354      	adds	r3, #84	; 0x54
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	f083 0301 	eor.w	r3, r3, #1
 8002d1e:	b2d8      	uxtb	r0, r3
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	212c      	movs	r1, #44	; 0x2c
 8002d26:	fb01 f303 	mul.w	r3, r1, r3
 8002d2a:	4413      	add	r3, r2
 8002d2c:	3354      	adds	r3, #84	; 0x54
 8002d2e:	4602      	mov	r2, r0
 8002d30:	701a      	strb	r2, [r3, #0]
}
 8002d32:	e163      	b.n	8002ffc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	015a      	lsls	r2, r3, #5
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	f040 80f6 	bne.w	8002f38 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	212c      	movs	r1, #44	; 0x2c
 8002d52:	fb01 f303 	mul.w	r3, r1, r3
 8002d56:	4413      	add	r3, r2
 8002d58:	3361      	adds	r3, #97	; 0x61
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d109      	bne.n	8002d74 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	212c      	movs	r1, #44	; 0x2c
 8002d66:	fb01 f303 	mul.w	r3, r1, r3
 8002d6a:	4413      	add	r3, r2
 8002d6c:	3360      	adds	r3, #96	; 0x60
 8002d6e:	2201      	movs	r2, #1
 8002d70:	701a      	strb	r2, [r3, #0]
 8002d72:	e0c9      	b.n	8002f08 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	212c      	movs	r1, #44	; 0x2c
 8002d7a:	fb01 f303 	mul.w	r3, r1, r3
 8002d7e:	4413      	add	r3, r2
 8002d80:	3361      	adds	r3, #97	; 0x61
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	2b05      	cmp	r3, #5
 8002d86:	d109      	bne.n	8002d9c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	212c      	movs	r1, #44	; 0x2c
 8002d8e:	fb01 f303 	mul.w	r3, r1, r3
 8002d92:	4413      	add	r3, r2
 8002d94:	3360      	adds	r3, #96	; 0x60
 8002d96:	2205      	movs	r2, #5
 8002d98:	701a      	strb	r2, [r3, #0]
 8002d9a:	e0b5      	b.n	8002f08 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	212c      	movs	r1, #44	; 0x2c
 8002da2:	fb01 f303 	mul.w	r3, r1, r3
 8002da6:	4413      	add	r3, r2
 8002da8:	3361      	adds	r3, #97	; 0x61
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	2b06      	cmp	r3, #6
 8002dae:	d009      	beq.n	8002dc4 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	212c      	movs	r1, #44	; 0x2c
 8002db6:	fb01 f303 	mul.w	r3, r1, r3
 8002dba:	4413      	add	r3, r2
 8002dbc:	3361      	adds	r3, #97	; 0x61
 8002dbe:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002dc0:	2b08      	cmp	r3, #8
 8002dc2:	d150      	bne.n	8002e66 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	212c      	movs	r1, #44	; 0x2c
 8002dca:	fb01 f303 	mul.w	r3, r1, r3
 8002dce:	4413      	add	r3, r2
 8002dd0:	335c      	adds	r3, #92	; 0x5c
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	1c5a      	adds	r2, r3, #1
 8002dd6:	6879      	ldr	r1, [r7, #4]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	202c      	movs	r0, #44	; 0x2c
 8002ddc:	fb00 f303 	mul.w	r3, r0, r3
 8002de0:	440b      	add	r3, r1
 8002de2:	335c      	adds	r3, #92	; 0x5c
 8002de4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	212c      	movs	r1, #44	; 0x2c
 8002dec:	fb01 f303 	mul.w	r3, r1, r3
 8002df0:	4413      	add	r3, r2
 8002df2:	335c      	adds	r3, #92	; 0x5c
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d912      	bls.n	8002e20 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	212c      	movs	r1, #44	; 0x2c
 8002e00:	fb01 f303 	mul.w	r3, r1, r3
 8002e04:	4413      	add	r3, r2
 8002e06:	335c      	adds	r3, #92	; 0x5c
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	212c      	movs	r1, #44	; 0x2c
 8002e12:	fb01 f303 	mul.w	r3, r1, r3
 8002e16:	4413      	add	r3, r2
 8002e18:	3360      	adds	r3, #96	; 0x60
 8002e1a:	2204      	movs	r2, #4
 8002e1c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e1e:	e073      	b.n	8002f08 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	212c      	movs	r1, #44	; 0x2c
 8002e26:	fb01 f303 	mul.w	r3, r1, r3
 8002e2a:	4413      	add	r3, r2
 8002e2c:	3360      	adds	r3, #96	; 0x60
 8002e2e:	2202      	movs	r2, #2
 8002e30:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	015a      	lsls	r2, r3, #5
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	4413      	add	r3, r2
 8002e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e48:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e50:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	015a      	lsls	r2, r3, #5
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	4413      	add	r3, r2
 8002e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e5e:	461a      	mov	r2, r3
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e64:	e050      	b.n	8002f08 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	212c      	movs	r1, #44	; 0x2c
 8002e6c:	fb01 f303 	mul.w	r3, r1, r3
 8002e70:	4413      	add	r3, r2
 8002e72:	3361      	adds	r3, #97	; 0x61
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	2b03      	cmp	r3, #3
 8002e78:	d122      	bne.n	8002ec0 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	212c      	movs	r1, #44	; 0x2c
 8002e80:	fb01 f303 	mul.w	r3, r1, r3
 8002e84:	4413      	add	r3, r2
 8002e86:	3360      	adds	r3, #96	; 0x60
 8002e88:	2202      	movs	r2, #2
 8002e8a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	015a      	lsls	r2, r3, #5
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	4413      	add	r3, r2
 8002e94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ea2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002eaa:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	015a      	lsls	r2, r3, #5
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb8:	461a      	mov	r2, r3
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	6013      	str	r3, [r2, #0]
 8002ebe:	e023      	b.n	8002f08 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	212c      	movs	r1, #44	; 0x2c
 8002ec6:	fb01 f303 	mul.w	r3, r1, r3
 8002eca:	4413      	add	r3, r2
 8002ecc:	3361      	adds	r3, #97	; 0x61
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	2b07      	cmp	r3, #7
 8002ed2:	d119      	bne.n	8002f08 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	212c      	movs	r1, #44	; 0x2c
 8002eda:	fb01 f303 	mul.w	r3, r1, r3
 8002ede:	4413      	add	r3, r2
 8002ee0:	335c      	adds	r3, #92	; 0x5c
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	1c5a      	adds	r2, r3, #1
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	202c      	movs	r0, #44	; 0x2c
 8002eec:	fb00 f303 	mul.w	r3, r0, r3
 8002ef0:	440b      	add	r3, r1
 8002ef2:	335c      	adds	r3, #92	; 0x5c
 8002ef4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	212c      	movs	r1, #44	; 0x2c
 8002efc:	fb01 f303 	mul.w	r3, r1, r3
 8002f00:	4413      	add	r3, r2
 8002f02:	3360      	adds	r3, #96	; 0x60
 8002f04:	2204      	movs	r2, #4
 8002f06:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	015a      	lsls	r2, r3, #5
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	4413      	add	r3, r2
 8002f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f14:	461a      	mov	r2, r3
 8002f16:	2302      	movs	r3, #2
 8002f18:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	b2d9      	uxtb	r1, r3
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	202c      	movs	r0, #44	; 0x2c
 8002f24:	fb00 f303 	mul.w	r3, r0, r3
 8002f28:	4413      	add	r3, r2
 8002f2a:	3360      	adds	r3, #96	; 0x60
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	461a      	mov	r2, r3
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f009 fad3 	bl	800c4dc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002f36:	e061      	b.n	8002ffc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	015a      	lsls	r2, r3, #5
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	4413      	add	r3, r2
 8002f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 0310 	and.w	r3, r3, #16
 8002f4a:	2b10      	cmp	r3, #16
 8002f4c:	d156      	bne.n	8002ffc <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	212c      	movs	r1, #44	; 0x2c
 8002f54:	fb01 f303 	mul.w	r3, r1, r3
 8002f58:	4413      	add	r3, r2
 8002f5a:	333f      	adds	r3, #63	; 0x3f
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	2b03      	cmp	r3, #3
 8002f60:	d111      	bne.n	8002f86 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	212c      	movs	r1, #44	; 0x2c
 8002f68:	fb01 f303 	mul.w	r3, r1, r3
 8002f6c:	4413      	add	r3, r2
 8002f6e:	335c      	adds	r3, #92	; 0x5c
 8002f70:	2200      	movs	r2, #0
 8002f72:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	b2d2      	uxtb	r2, r2
 8002f7c:	4611      	mov	r1, r2
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f003 fe4b 	bl	8006c1a <USB_HC_Halt>
 8002f84:	e031      	b.n	8002fea <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	212c      	movs	r1, #44	; 0x2c
 8002f8c:	fb01 f303 	mul.w	r3, r1, r3
 8002f90:	4413      	add	r3, r2
 8002f92:	333f      	adds	r3, #63	; 0x3f
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d009      	beq.n	8002fae <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	212c      	movs	r1, #44	; 0x2c
 8002fa0:	fb01 f303 	mul.w	r3, r1, r3
 8002fa4:	4413      	add	r3, r2
 8002fa6:	333f      	adds	r3, #63	; 0x3f
 8002fa8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d11d      	bne.n	8002fea <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	212c      	movs	r1, #44	; 0x2c
 8002fb4:	fb01 f303 	mul.w	r3, r1, r3
 8002fb8:	4413      	add	r3, r2
 8002fba:	335c      	adds	r3, #92	; 0x5c
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d110      	bne.n	8002fea <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	212c      	movs	r1, #44	; 0x2c
 8002fce:	fb01 f303 	mul.w	r3, r1, r3
 8002fd2:	4413      	add	r3, r2
 8002fd4:	3361      	adds	r3, #97	; 0x61
 8002fd6:	2203      	movs	r2, #3
 8002fd8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	b2d2      	uxtb	r2, r2
 8002fe2:	4611      	mov	r1, r2
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f003 fe18 	bl	8006c1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	015a      	lsls	r2, r3, #5
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	2310      	movs	r3, #16
 8002ffa:	6093      	str	r3, [r2, #8]
}
 8002ffc:	bf00      	nop
 8002ffe:	3718      	adds	r7, #24
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b088      	sub	sp, #32
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	460b      	mov	r3, r1
 800300e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800301a:	78fb      	ldrb	r3, [r7, #3]
 800301c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	015a      	lsls	r2, r3, #5
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	4413      	add	r3, r2
 8003026:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f003 0304 	and.w	r3, r3, #4
 8003030:	2b04      	cmp	r3, #4
 8003032:	d11a      	bne.n	800306a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	015a      	lsls	r2, r3, #5
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	4413      	add	r3, r2
 800303c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003040:	461a      	mov	r2, r3
 8003042:	2304      	movs	r3, #4
 8003044:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	212c      	movs	r1, #44	; 0x2c
 800304c:	fb01 f303 	mul.w	r3, r1, r3
 8003050:	4413      	add	r3, r2
 8003052:	3361      	adds	r3, #97	; 0x61
 8003054:	2206      	movs	r2, #6
 8003056:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	697a      	ldr	r2, [r7, #20]
 800305e:	b2d2      	uxtb	r2, r2
 8003060:	4611      	mov	r1, r2
 8003062:	4618      	mov	r0, r3
 8003064:	f003 fdd9 	bl	8006c1a <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003068:	e331      	b.n	80036ce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	015a      	lsls	r2, r3, #5
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	4413      	add	r3, r2
 8003072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f003 0320 	and.w	r3, r3, #32
 800307c:	2b20      	cmp	r3, #32
 800307e:	d12e      	bne.n	80030de <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	015a      	lsls	r2, r3, #5
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	4413      	add	r3, r2
 8003088:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800308c:	461a      	mov	r2, r3
 800308e:	2320      	movs	r3, #32
 8003090:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	212c      	movs	r1, #44	; 0x2c
 8003098:	fb01 f303 	mul.w	r3, r1, r3
 800309c:	4413      	add	r3, r2
 800309e:	333d      	adds	r3, #61	; 0x3d
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	f040 8313 	bne.w	80036ce <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	212c      	movs	r1, #44	; 0x2c
 80030ae:	fb01 f303 	mul.w	r3, r1, r3
 80030b2:	4413      	add	r3, r2
 80030b4:	333d      	adds	r3, #61	; 0x3d
 80030b6:	2200      	movs	r2, #0
 80030b8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	212c      	movs	r1, #44	; 0x2c
 80030c0:	fb01 f303 	mul.w	r3, r1, r3
 80030c4:	4413      	add	r3, r2
 80030c6:	3360      	adds	r3, #96	; 0x60
 80030c8:	2202      	movs	r2, #2
 80030ca:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	697a      	ldr	r2, [r7, #20]
 80030d2:	b2d2      	uxtb	r2, r2
 80030d4:	4611      	mov	r1, r2
 80030d6:	4618      	mov	r0, r3
 80030d8:	f003 fd9f 	bl	8006c1a <USB_HC_Halt>
}
 80030dc:	e2f7      	b.n	80036ce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	015a      	lsls	r2, r3, #5
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	4413      	add	r3, r2
 80030e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030f4:	d112      	bne.n	800311c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	015a      	lsls	r2, r3, #5
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	4413      	add	r3, r2
 80030fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003102:	461a      	mov	r2, r3
 8003104:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003108:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	b2d2      	uxtb	r2, r2
 8003112:	4611      	mov	r1, r2
 8003114:	4618      	mov	r0, r3
 8003116:	f003 fd80 	bl	8006c1a <USB_HC_Halt>
}
 800311a:	e2d8      	b.n	80036ce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	015a      	lsls	r2, r3, #5
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	4413      	add	r3, r2
 8003124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	2b01      	cmp	r3, #1
 8003130:	d140      	bne.n	80031b4 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	212c      	movs	r1, #44	; 0x2c
 8003138:	fb01 f303 	mul.w	r3, r1, r3
 800313c:	4413      	add	r3, r2
 800313e:	335c      	adds	r3, #92	; 0x5c
 8003140:	2200      	movs	r2, #0
 8003142:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	015a      	lsls	r2, r3, #5
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	4413      	add	r3, r2
 800314c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003156:	2b40      	cmp	r3, #64	; 0x40
 8003158:	d111      	bne.n	800317e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	212c      	movs	r1, #44	; 0x2c
 8003160:	fb01 f303 	mul.w	r3, r1, r3
 8003164:	4413      	add	r3, r2
 8003166:	333d      	adds	r3, #61	; 0x3d
 8003168:	2201      	movs	r2, #1
 800316a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	015a      	lsls	r2, r3, #5
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	4413      	add	r3, r2
 8003174:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003178:	461a      	mov	r2, r3
 800317a:	2340      	movs	r3, #64	; 0x40
 800317c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	015a      	lsls	r2, r3, #5
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	4413      	add	r3, r2
 8003186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800318a:	461a      	mov	r2, r3
 800318c:	2301      	movs	r3, #1
 800318e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	212c      	movs	r1, #44	; 0x2c
 8003196:	fb01 f303 	mul.w	r3, r1, r3
 800319a:	4413      	add	r3, r2
 800319c:	3361      	adds	r3, #97	; 0x61
 800319e:	2201      	movs	r2, #1
 80031a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	b2d2      	uxtb	r2, r2
 80031aa:	4611      	mov	r1, r2
 80031ac:	4618      	mov	r0, r3
 80031ae:	f003 fd34 	bl	8006c1a <USB_HC_Halt>
}
 80031b2:	e28c      	b.n	80036ce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	015a      	lsls	r2, r3, #5
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	4413      	add	r3, r2
 80031bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c6:	2b40      	cmp	r3, #64	; 0x40
 80031c8:	d12c      	bne.n	8003224 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	212c      	movs	r1, #44	; 0x2c
 80031d0:	fb01 f303 	mul.w	r3, r1, r3
 80031d4:	4413      	add	r3, r2
 80031d6:	3361      	adds	r3, #97	; 0x61
 80031d8:	2204      	movs	r2, #4
 80031da:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	212c      	movs	r1, #44	; 0x2c
 80031e2:	fb01 f303 	mul.w	r3, r1, r3
 80031e6:	4413      	add	r3, r2
 80031e8:	333d      	adds	r3, #61	; 0x3d
 80031ea:	2201      	movs	r2, #1
 80031ec:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	212c      	movs	r1, #44	; 0x2c
 80031f4:	fb01 f303 	mul.w	r3, r1, r3
 80031f8:	4413      	add	r3, r2
 80031fa:	335c      	adds	r3, #92	; 0x5c
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	697a      	ldr	r2, [r7, #20]
 8003206:	b2d2      	uxtb	r2, r2
 8003208:	4611      	mov	r1, r2
 800320a:	4618      	mov	r0, r3
 800320c:	f003 fd05 	bl	8006c1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	015a      	lsls	r2, r3, #5
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	4413      	add	r3, r2
 8003218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800321c:	461a      	mov	r2, r3
 800321e:	2340      	movs	r3, #64	; 0x40
 8003220:	6093      	str	r3, [r2, #8]
}
 8003222:	e254      	b.n	80036ce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	015a      	lsls	r2, r3, #5
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	4413      	add	r3, r2
 800322c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	2b08      	cmp	r3, #8
 8003238:	d11a      	bne.n	8003270 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	015a      	lsls	r2, r3, #5
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	4413      	add	r3, r2
 8003242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003246:	461a      	mov	r2, r3
 8003248:	2308      	movs	r3, #8
 800324a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	212c      	movs	r1, #44	; 0x2c
 8003252:	fb01 f303 	mul.w	r3, r1, r3
 8003256:	4413      	add	r3, r2
 8003258:	3361      	adds	r3, #97	; 0x61
 800325a:	2205      	movs	r2, #5
 800325c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	697a      	ldr	r2, [r7, #20]
 8003264:	b2d2      	uxtb	r2, r2
 8003266:	4611      	mov	r1, r2
 8003268:	4618      	mov	r0, r3
 800326a:	f003 fcd6 	bl	8006c1a <USB_HC_Halt>
}
 800326e:	e22e      	b.n	80036ce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	015a      	lsls	r2, r3, #5
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	4413      	add	r3, r2
 8003278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f003 0310 	and.w	r3, r3, #16
 8003282:	2b10      	cmp	r3, #16
 8003284:	d140      	bne.n	8003308 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	212c      	movs	r1, #44	; 0x2c
 800328c:	fb01 f303 	mul.w	r3, r1, r3
 8003290:	4413      	add	r3, r2
 8003292:	335c      	adds	r3, #92	; 0x5c
 8003294:	2200      	movs	r2, #0
 8003296:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	212c      	movs	r1, #44	; 0x2c
 800329e:	fb01 f303 	mul.w	r3, r1, r3
 80032a2:	4413      	add	r3, r2
 80032a4:	3361      	adds	r3, #97	; 0x61
 80032a6:	2203      	movs	r2, #3
 80032a8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	212c      	movs	r1, #44	; 0x2c
 80032b0:	fb01 f303 	mul.w	r3, r1, r3
 80032b4:	4413      	add	r3, r2
 80032b6:	333d      	adds	r3, #61	; 0x3d
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d112      	bne.n	80032e4 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	212c      	movs	r1, #44	; 0x2c
 80032c4:	fb01 f303 	mul.w	r3, r1, r3
 80032c8:	4413      	add	r3, r2
 80032ca:	333c      	adds	r3, #60	; 0x3c
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d108      	bne.n	80032e4 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	212c      	movs	r1, #44	; 0x2c
 80032d8:	fb01 f303 	mul.w	r3, r1, r3
 80032dc:	4413      	add	r3, r2
 80032de:	333d      	adds	r3, #61	; 0x3d
 80032e0:	2201      	movs	r2, #1
 80032e2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	b2d2      	uxtb	r2, r2
 80032ec:	4611      	mov	r1, r2
 80032ee:	4618      	mov	r0, r3
 80032f0:	f003 fc93 	bl	8006c1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	015a      	lsls	r2, r3, #5
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	4413      	add	r3, r2
 80032fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003300:	461a      	mov	r2, r3
 8003302:	2310      	movs	r3, #16
 8003304:	6093      	str	r3, [r2, #8]
}
 8003306:	e1e2      	b.n	80036ce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	015a      	lsls	r2, r3, #5
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	4413      	add	r3, r2
 8003310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800331a:	2b80      	cmp	r3, #128	; 0x80
 800331c:	d164      	bne.n	80033e8 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d111      	bne.n	800334a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	212c      	movs	r1, #44	; 0x2c
 800332c:	fb01 f303 	mul.w	r3, r1, r3
 8003330:	4413      	add	r3, r2
 8003332:	3361      	adds	r3, #97	; 0x61
 8003334:	2206      	movs	r2, #6
 8003336:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	697a      	ldr	r2, [r7, #20]
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	4611      	mov	r1, r2
 8003342:	4618      	mov	r0, r3
 8003344:	f003 fc69 	bl	8006c1a <USB_HC_Halt>
 8003348:	e044      	b.n	80033d4 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	212c      	movs	r1, #44	; 0x2c
 8003350:	fb01 f303 	mul.w	r3, r1, r3
 8003354:	4413      	add	r3, r2
 8003356:	335c      	adds	r3, #92	; 0x5c
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	1c5a      	adds	r2, r3, #1
 800335c:	6879      	ldr	r1, [r7, #4]
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	202c      	movs	r0, #44	; 0x2c
 8003362:	fb00 f303 	mul.w	r3, r0, r3
 8003366:	440b      	add	r3, r1
 8003368:	335c      	adds	r3, #92	; 0x5c
 800336a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	212c      	movs	r1, #44	; 0x2c
 8003372:	fb01 f303 	mul.w	r3, r1, r3
 8003376:	4413      	add	r3, r2
 8003378:	335c      	adds	r3, #92	; 0x5c
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2b02      	cmp	r3, #2
 800337e:	d920      	bls.n	80033c2 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	212c      	movs	r1, #44	; 0x2c
 8003386:	fb01 f303 	mul.w	r3, r1, r3
 800338a:	4413      	add	r3, r2
 800338c:	335c      	adds	r3, #92	; 0x5c
 800338e:	2200      	movs	r2, #0
 8003390:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	212c      	movs	r1, #44	; 0x2c
 8003398:	fb01 f303 	mul.w	r3, r1, r3
 800339c:	4413      	add	r3, r2
 800339e:	3360      	adds	r3, #96	; 0x60
 80033a0:	2204      	movs	r2, #4
 80033a2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	b2d9      	uxtb	r1, r3
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	202c      	movs	r0, #44	; 0x2c
 80033ae:	fb00 f303 	mul.w	r3, r0, r3
 80033b2:	4413      	add	r3, r2
 80033b4:	3360      	adds	r3, #96	; 0x60
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	461a      	mov	r2, r3
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f009 f88e 	bl	800c4dc <HAL_HCD_HC_NotifyURBChange_Callback>
 80033c0:	e008      	b.n	80033d4 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	212c      	movs	r1, #44	; 0x2c
 80033c8:	fb01 f303 	mul.w	r3, r1, r3
 80033cc:	4413      	add	r3, r2
 80033ce:	3360      	adds	r3, #96	; 0x60
 80033d0:	2202      	movs	r2, #2
 80033d2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	015a      	lsls	r2, r3, #5
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	4413      	add	r3, r2
 80033dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033e0:	461a      	mov	r2, r3
 80033e2:	2380      	movs	r3, #128	; 0x80
 80033e4:	6093      	str	r3, [r2, #8]
}
 80033e6:	e172      	b.n	80036ce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	015a      	lsls	r2, r3, #5
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	4413      	add	r3, r2
 80033f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033fe:	d11b      	bne.n	8003438 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	212c      	movs	r1, #44	; 0x2c
 8003406:	fb01 f303 	mul.w	r3, r1, r3
 800340a:	4413      	add	r3, r2
 800340c:	3361      	adds	r3, #97	; 0x61
 800340e:	2208      	movs	r2, #8
 8003410:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	b2d2      	uxtb	r2, r2
 800341a:	4611      	mov	r1, r2
 800341c:	4618      	mov	r0, r3
 800341e:	f003 fbfc 	bl	8006c1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	015a      	lsls	r2, r3, #5
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	4413      	add	r3, r2
 800342a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800342e:	461a      	mov	r2, r3
 8003430:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003434:	6093      	str	r3, [r2, #8]
}
 8003436:	e14a      	b.n	80036ce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	015a      	lsls	r2, r3, #5
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	4413      	add	r3, r2
 8003440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b02      	cmp	r3, #2
 800344c:	f040 813f 	bne.w	80036ce <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	212c      	movs	r1, #44	; 0x2c
 8003456:	fb01 f303 	mul.w	r3, r1, r3
 800345a:	4413      	add	r3, r2
 800345c:	3361      	adds	r3, #97	; 0x61
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d17d      	bne.n	8003560 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	212c      	movs	r1, #44	; 0x2c
 800346a:	fb01 f303 	mul.w	r3, r1, r3
 800346e:	4413      	add	r3, r2
 8003470:	3360      	adds	r3, #96	; 0x60
 8003472:	2201      	movs	r2, #1
 8003474:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	212c      	movs	r1, #44	; 0x2c
 800347c:	fb01 f303 	mul.w	r3, r1, r3
 8003480:	4413      	add	r3, r2
 8003482:	333f      	adds	r3, #63	; 0x3f
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	2b02      	cmp	r3, #2
 8003488:	d00a      	beq.n	80034a0 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	212c      	movs	r1, #44	; 0x2c
 8003490:	fb01 f303 	mul.w	r3, r1, r3
 8003494:	4413      	add	r3, r2
 8003496:	333f      	adds	r3, #63	; 0x3f
 8003498:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800349a:	2b03      	cmp	r3, #3
 800349c:	f040 8100 	bne.w	80036a0 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d113      	bne.n	80034d0 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	212c      	movs	r1, #44	; 0x2c
 80034ae:	fb01 f303 	mul.w	r3, r1, r3
 80034b2:	4413      	add	r3, r2
 80034b4:	3355      	adds	r3, #85	; 0x55
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	f083 0301 	eor.w	r3, r3, #1
 80034bc:	b2d8      	uxtb	r0, r3
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	212c      	movs	r1, #44	; 0x2c
 80034c4:	fb01 f303 	mul.w	r3, r1, r3
 80034c8:	4413      	add	r3, r2
 80034ca:	3355      	adds	r3, #85	; 0x55
 80034cc:	4602      	mov	r2, r0
 80034ce:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	f040 80e3 	bne.w	80036a0 <HCD_HC_OUT_IRQHandler+0x69c>
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	212c      	movs	r1, #44	; 0x2c
 80034e0:	fb01 f303 	mul.w	r3, r1, r3
 80034e4:	4413      	add	r3, r2
 80034e6:	334c      	adds	r3, #76	; 0x4c
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f000 80d8 	beq.w	80036a0 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	212c      	movs	r1, #44	; 0x2c
 80034f6:	fb01 f303 	mul.w	r3, r1, r3
 80034fa:	4413      	add	r3, r2
 80034fc:	334c      	adds	r3, #76	; 0x4c
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6879      	ldr	r1, [r7, #4]
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	202c      	movs	r0, #44	; 0x2c
 8003506:	fb00 f202 	mul.w	r2, r0, r2
 800350a:	440a      	add	r2, r1
 800350c:	3240      	adds	r2, #64	; 0x40
 800350e:	8812      	ldrh	r2, [r2, #0]
 8003510:	4413      	add	r3, r2
 8003512:	3b01      	subs	r3, #1
 8003514:	6879      	ldr	r1, [r7, #4]
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	202c      	movs	r0, #44	; 0x2c
 800351a:	fb00 f202 	mul.w	r2, r0, r2
 800351e:	440a      	add	r2, r1
 8003520:	3240      	adds	r2, #64	; 0x40
 8003522:	8812      	ldrh	r2, [r2, #0]
 8003524:	fbb3 f3f2 	udiv	r3, r3, r2
 8003528:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	2b00      	cmp	r3, #0
 8003532:	f000 80b5 	beq.w	80036a0 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	212c      	movs	r1, #44	; 0x2c
 800353c:	fb01 f303 	mul.w	r3, r1, r3
 8003540:	4413      	add	r3, r2
 8003542:	3355      	adds	r3, #85	; 0x55
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	f083 0301 	eor.w	r3, r3, #1
 800354a:	b2d8      	uxtb	r0, r3
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	212c      	movs	r1, #44	; 0x2c
 8003552:	fb01 f303 	mul.w	r3, r1, r3
 8003556:	4413      	add	r3, r2
 8003558:	3355      	adds	r3, #85	; 0x55
 800355a:	4602      	mov	r2, r0
 800355c:	701a      	strb	r2, [r3, #0]
 800355e:	e09f      	b.n	80036a0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	212c      	movs	r1, #44	; 0x2c
 8003566:	fb01 f303 	mul.w	r3, r1, r3
 800356a:	4413      	add	r3, r2
 800356c:	3361      	adds	r3, #97	; 0x61
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	2b03      	cmp	r3, #3
 8003572:	d109      	bne.n	8003588 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	212c      	movs	r1, #44	; 0x2c
 800357a:	fb01 f303 	mul.w	r3, r1, r3
 800357e:	4413      	add	r3, r2
 8003580:	3360      	adds	r3, #96	; 0x60
 8003582:	2202      	movs	r2, #2
 8003584:	701a      	strb	r2, [r3, #0]
 8003586:	e08b      	b.n	80036a0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	212c      	movs	r1, #44	; 0x2c
 800358e:	fb01 f303 	mul.w	r3, r1, r3
 8003592:	4413      	add	r3, r2
 8003594:	3361      	adds	r3, #97	; 0x61
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	2b04      	cmp	r3, #4
 800359a:	d109      	bne.n	80035b0 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	212c      	movs	r1, #44	; 0x2c
 80035a2:	fb01 f303 	mul.w	r3, r1, r3
 80035a6:	4413      	add	r3, r2
 80035a8:	3360      	adds	r3, #96	; 0x60
 80035aa:	2202      	movs	r2, #2
 80035ac:	701a      	strb	r2, [r3, #0]
 80035ae:	e077      	b.n	80036a0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	212c      	movs	r1, #44	; 0x2c
 80035b6:	fb01 f303 	mul.w	r3, r1, r3
 80035ba:	4413      	add	r3, r2
 80035bc:	3361      	adds	r3, #97	; 0x61
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	2b05      	cmp	r3, #5
 80035c2:	d109      	bne.n	80035d8 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	212c      	movs	r1, #44	; 0x2c
 80035ca:	fb01 f303 	mul.w	r3, r1, r3
 80035ce:	4413      	add	r3, r2
 80035d0:	3360      	adds	r3, #96	; 0x60
 80035d2:	2205      	movs	r2, #5
 80035d4:	701a      	strb	r2, [r3, #0]
 80035d6:	e063      	b.n	80036a0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	212c      	movs	r1, #44	; 0x2c
 80035de:	fb01 f303 	mul.w	r3, r1, r3
 80035e2:	4413      	add	r3, r2
 80035e4:	3361      	adds	r3, #97	; 0x61
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	2b06      	cmp	r3, #6
 80035ea:	d009      	beq.n	8003600 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	212c      	movs	r1, #44	; 0x2c
 80035f2:	fb01 f303 	mul.w	r3, r1, r3
 80035f6:	4413      	add	r3, r2
 80035f8:	3361      	adds	r3, #97	; 0x61
 80035fa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80035fc:	2b08      	cmp	r3, #8
 80035fe:	d14f      	bne.n	80036a0 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	212c      	movs	r1, #44	; 0x2c
 8003606:	fb01 f303 	mul.w	r3, r1, r3
 800360a:	4413      	add	r3, r2
 800360c:	335c      	adds	r3, #92	; 0x5c
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	1c5a      	adds	r2, r3, #1
 8003612:	6879      	ldr	r1, [r7, #4]
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	202c      	movs	r0, #44	; 0x2c
 8003618:	fb00 f303 	mul.w	r3, r0, r3
 800361c:	440b      	add	r3, r1
 800361e:	335c      	adds	r3, #92	; 0x5c
 8003620:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	212c      	movs	r1, #44	; 0x2c
 8003628:	fb01 f303 	mul.w	r3, r1, r3
 800362c:	4413      	add	r3, r2
 800362e:	335c      	adds	r3, #92	; 0x5c
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2b02      	cmp	r3, #2
 8003634:	d912      	bls.n	800365c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	212c      	movs	r1, #44	; 0x2c
 800363c:	fb01 f303 	mul.w	r3, r1, r3
 8003640:	4413      	add	r3, r2
 8003642:	335c      	adds	r3, #92	; 0x5c
 8003644:	2200      	movs	r2, #0
 8003646:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	212c      	movs	r1, #44	; 0x2c
 800364e:	fb01 f303 	mul.w	r3, r1, r3
 8003652:	4413      	add	r3, r2
 8003654:	3360      	adds	r3, #96	; 0x60
 8003656:	2204      	movs	r2, #4
 8003658:	701a      	strb	r2, [r3, #0]
 800365a:	e021      	b.n	80036a0 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	212c      	movs	r1, #44	; 0x2c
 8003662:	fb01 f303 	mul.w	r3, r1, r3
 8003666:	4413      	add	r3, r2
 8003668:	3360      	adds	r3, #96	; 0x60
 800366a:	2202      	movs	r2, #2
 800366c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	015a      	lsls	r2, r3, #5
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	4413      	add	r3, r2
 8003676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003684:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800368c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	015a      	lsls	r2, r3, #5
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	4413      	add	r3, r2
 8003696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800369a:	461a      	mov	r2, r3
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	015a      	lsls	r2, r3, #5
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	4413      	add	r3, r2
 80036a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ac:	461a      	mov	r2, r3
 80036ae:	2302      	movs	r3, #2
 80036b0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	b2d9      	uxtb	r1, r3
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	202c      	movs	r0, #44	; 0x2c
 80036bc:	fb00 f303 	mul.w	r3, r0, r3
 80036c0:	4413      	add	r3, r2
 80036c2:	3360      	adds	r3, #96	; 0x60
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	461a      	mov	r2, r3
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f008 ff07 	bl	800c4dc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80036ce:	bf00      	nop
 80036d0:	3720      	adds	r7, #32
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b08a      	sub	sp, #40	; 0x28
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	f003 030f 	and.w	r3, r3, #15
 80036f6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	0c5b      	lsrs	r3, r3, #17
 80036fc:	f003 030f 	and.w	r3, r3, #15
 8003700:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	091b      	lsrs	r3, r3, #4
 8003706:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800370a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	2b02      	cmp	r3, #2
 8003710:	d004      	beq.n	800371c <HCD_RXQLVL_IRQHandler+0x46>
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	2b05      	cmp	r3, #5
 8003716:	f000 80a9 	beq.w	800386c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800371a:	e0aa      	b.n	8003872 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	2b00      	cmp	r3, #0
 8003720:	f000 80a6 	beq.w	8003870 <HCD_RXQLVL_IRQHandler+0x19a>
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	212c      	movs	r1, #44	; 0x2c
 800372a:	fb01 f303 	mul.w	r3, r1, r3
 800372e:	4413      	add	r3, r2
 8003730:	3344      	adds	r3, #68	; 0x44
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	f000 809b 	beq.w	8003870 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	212c      	movs	r1, #44	; 0x2c
 8003740:	fb01 f303 	mul.w	r3, r1, r3
 8003744:	4413      	add	r3, r2
 8003746:	3350      	adds	r3, #80	; 0x50
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	441a      	add	r2, r3
 800374e:	6879      	ldr	r1, [r7, #4]
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	202c      	movs	r0, #44	; 0x2c
 8003754:	fb00 f303 	mul.w	r3, r0, r3
 8003758:	440b      	add	r3, r1
 800375a:	334c      	adds	r3, #76	; 0x4c
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	429a      	cmp	r2, r3
 8003760:	d87a      	bhi.n	8003858 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6818      	ldr	r0, [r3, #0]
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	212c      	movs	r1, #44	; 0x2c
 800376c:	fb01 f303 	mul.w	r3, r1, r3
 8003770:	4413      	add	r3, r2
 8003772:	3344      	adds	r3, #68	; 0x44
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	b292      	uxth	r2, r2
 800377a:	4619      	mov	r1, r3
 800377c:	f002 fda4 	bl	80062c8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	212c      	movs	r1, #44	; 0x2c
 8003786:	fb01 f303 	mul.w	r3, r1, r3
 800378a:	4413      	add	r3, r2
 800378c:	3344      	adds	r3, #68	; 0x44
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	441a      	add	r2, r3
 8003794:	6879      	ldr	r1, [r7, #4]
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	202c      	movs	r0, #44	; 0x2c
 800379a:	fb00 f303 	mul.w	r3, r0, r3
 800379e:	440b      	add	r3, r1
 80037a0:	3344      	adds	r3, #68	; 0x44
 80037a2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	212c      	movs	r1, #44	; 0x2c
 80037aa:	fb01 f303 	mul.w	r3, r1, r3
 80037ae:	4413      	add	r3, r2
 80037b0:	3350      	adds	r3, #80	; 0x50
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	441a      	add	r2, r3
 80037b8:	6879      	ldr	r1, [r7, #4]
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	202c      	movs	r0, #44	; 0x2c
 80037be:	fb00 f303 	mul.w	r3, r0, r3
 80037c2:	440b      	add	r3, r1
 80037c4:	3350      	adds	r3, #80	; 0x50
 80037c6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	015a      	lsls	r2, r3, #5
 80037cc:	6a3b      	ldr	r3, [r7, #32]
 80037ce:	4413      	add	r3, r2
 80037d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	0cdb      	lsrs	r3, r3, #19
 80037d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037dc:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	212c      	movs	r1, #44	; 0x2c
 80037e4:	fb01 f303 	mul.w	r3, r1, r3
 80037e8:	4413      	add	r3, r2
 80037ea:	3340      	adds	r3, #64	; 0x40
 80037ec:	881b      	ldrh	r3, [r3, #0]
 80037ee:	461a      	mov	r2, r3
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d13c      	bne.n	8003870 <HCD_RXQLVL_IRQHandler+0x19a>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d039      	beq.n	8003870 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	015a      	lsls	r2, r3, #5
 8003800:	6a3b      	ldr	r3, [r7, #32]
 8003802:	4413      	add	r3, r2
 8003804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003812:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800381a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	015a      	lsls	r2, r3, #5
 8003820:	6a3b      	ldr	r3, [r7, #32]
 8003822:	4413      	add	r3, r2
 8003824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003828:	461a      	mov	r2, r3
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	212c      	movs	r1, #44	; 0x2c
 8003834:	fb01 f303 	mul.w	r3, r1, r3
 8003838:	4413      	add	r3, r2
 800383a:	3354      	adds	r3, #84	; 0x54
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	f083 0301 	eor.w	r3, r3, #1
 8003842:	b2d8      	uxtb	r0, r3
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	212c      	movs	r1, #44	; 0x2c
 800384a:	fb01 f303 	mul.w	r3, r1, r3
 800384e:	4413      	add	r3, r2
 8003850:	3354      	adds	r3, #84	; 0x54
 8003852:	4602      	mov	r2, r0
 8003854:	701a      	strb	r2, [r3, #0]
      break;
 8003856:	e00b      	b.n	8003870 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	212c      	movs	r1, #44	; 0x2c
 800385e:	fb01 f303 	mul.w	r3, r1, r3
 8003862:	4413      	add	r3, r2
 8003864:	3360      	adds	r3, #96	; 0x60
 8003866:	2204      	movs	r2, #4
 8003868:	701a      	strb	r2, [r3, #0]
      break;
 800386a:	e001      	b.n	8003870 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800386c:	bf00      	nop
 800386e:	e000      	b.n	8003872 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003870:	bf00      	nop
  }
}
 8003872:	bf00      	nop
 8003874:	3728      	adds	r7, #40	; 0x28
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800387a:	b580      	push	{r7, lr}
 800387c:	b086      	sub	sp, #24
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80038a6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d10b      	bne.n	80038ca <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f003 0301 	and.w	r3, r3, #1
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d102      	bne.n	80038c2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f008 fdf1 	bl	800c4a4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	f043 0302 	orr.w	r3, r3, #2
 80038c8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f003 0308 	and.w	r3, r3, #8
 80038d0:	2b08      	cmp	r3, #8
 80038d2:	d132      	bne.n	800393a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	f043 0308 	orr.w	r3, r3, #8
 80038da:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f003 0304 	and.w	r3, r3, #4
 80038e2:	2b04      	cmp	r3, #4
 80038e4:	d126      	bne.n	8003934 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d113      	bne.n	8003916 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80038f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038f8:	d106      	bne.n	8003908 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2102      	movs	r1, #2
 8003900:	4618      	mov	r0, r3
 8003902:	f002 fe4f 	bl	80065a4 <USB_InitFSLSPClkSel>
 8003906:	e011      	b.n	800392c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2101      	movs	r1, #1
 800390e:	4618      	mov	r0, r3
 8003910:	f002 fe48 	bl	80065a4 <USB_InitFSLSPClkSel>
 8003914:	e00a      	b.n	800392c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d106      	bne.n	800392c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003924:	461a      	mov	r2, r3
 8003926:	f64e 2360 	movw	r3, #60000	; 0xea60
 800392a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f008 fde7 	bl	800c500 <HAL_HCD_PortEnabled_Callback>
 8003932:	e002      	b.n	800393a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f008 fdf1 	bl	800c51c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f003 0320 	and.w	r3, r3, #32
 8003940:	2b20      	cmp	r3, #32
 8003942:	d103      	bne.n	800394c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	f043 0320 	orr.w	r3, r3, #32
 800394a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003952:	461a      	mov	r2, r3
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	6013      	str	r3, [r2, #0]
}
 8003958:	bf00      	nop
 800395a:	3718      	adds	r7, #24
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e267      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	d075      	beq.n	8003a6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800397e:	4b88      	ldr	r3, [pc, #544]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f003 030c 	and.w	r3, r3, #12
 8003986:	2b04      	cmp	r3, #4
 8003988:	d00c      	beq.n	80039a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800398a:	4b85      	ldr	r3, [pc, #532]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003992:	2b08      	cmp	r3, #8
 8003994:	d112      	bne.n	80039bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003996:	4b82      	ldr	r3, [pc, #520]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800399e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039a2:	d10b      	bne.n	80039bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039a4:	4b7e      	ldr	r3, [pc, #504]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d05b      	beq.n	8003a68 <HAL_RCC_OscConfig+0x108>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d157      	bne.n	8003a68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e242      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039c4:	d106      	bne.n	80039d4 <HAL_RCC_OscConfig+0x74>
 80039c6:	4b76      	ldr	r3, [pc, #472]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a75      	ldr	r2, [pc, #468]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 80039cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d0:	6013      	str	r3, [r2, #0]
 80039d2:	e01d      	b.n	8003a10 <HAL_RCC_OscConfig+0xb0>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039dc:	d10c      	bne.n	80039f8 <HAL_RCC_OscConfig+0x98>
 80039de:	4b70      	ldr	r3, [pc, #448]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a6f      	ldr	r2, [pc, #444]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 80039e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039e8:	6013      	str	r3, [r2, #0]
 80039ea:	4b6d      	ldr	r3, [pc, #436]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a6c      	ldr	r2, [pc, #432]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 80039f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039f4:	6013      	str	r3, [r2, #0]
 80039f6:	e00b      	b.n	8003a10 <HAL_RCC_OscConfig+0xb0>
 80039f8:	4b69      	ldr	r3, [pc, #420]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a68      	ldr	r2, [pc, #416]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 80039fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a02:	6013      	str	r3, [r2, #0]
 8003a04:	4b66      	ldr	r3, [pc, #408]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a65      	ldr	r2, [pc, #404]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003a0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d013      	beq.n	8003a40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a18:	f7fd fc42 	bl	80012a0 <HAL_GetTick>
 8003a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a1e:	e008      	b.n	8003a32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a20:	f7fd fc3e 	bl	80012a0 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b64      	cmp	r3, #100	; 0x64
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e207      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a32:	4b5b      	ldr	r3, [pc, #364]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d0f0      	beq.n	8003a20 <HAL_RCC_OscConfig+0xc0>
 8003a3e:	e014      	b.n	8003a6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a40:	f7fd fc2e 	bl	80012a0 <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a48:	f7fd fc2a 	bl	80012a0 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b64      	cmp	r3, #100	; 0x64
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e1f3      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a5a:	4b51      	ldr	r3, [pc, #324]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1f0      	bne.n	8003a48 <HAL_RCC_OscConfig+0xe8>
 8003a66:	e000      	b.n	8003a6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d063      	beq.n	8003b3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a76:	4b4a      	ldr	r3, [pc, #296]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f003 030c 	and.w	r3, r3, #12
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00b      	beq.n	8003a9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a82:	4b47      	ldr	r3, [pc, #284]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a8a:	2b08      	cmp	r3, #8
 8003a8c:	d11c      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a8e:	4b44      	ldr	r3, [pc, #272]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d116      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a9a:	4b41      	ldr	r3, [pc, #260]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d005      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x152>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d001      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e1c7      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ab2:	4b3b      	ldr	r3, [pc, #236]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	00db      	lsls	r3, r3, #3
 8003ac0:	4937      	ldr	r1, [pc, #220]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ac6:	e03a      	b.n	8003b3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d020      	beq.n	8003b12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ad0:	4b34      	ldr	r3, [pc, #208]	; (8003ba4 <HAL_RCC_OscConfig+0x244>)
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad6:	f7fd fbe3 	bl	80012a0 <HAL_GetTick>
 8003ada:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003adc:	e008      	b.n	8003af0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ade:	f7fd fbdf 	bl	80012a0 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d901      	bls.n	8003af0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e1a8      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003af0:	4b2b      	ldr	r3, [pc, #172]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d0f0      	beq.n	8003ade <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003afc:	4b28      	ldr	r3, [pc, #160]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	00db      	lsls	r3, r3, #3
 8003b0a:	4925      	ldr	r1, [pc, #148]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	600b      	str	r3, [r1, #0]
 8003b10:	e015      	b.n	8003b3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b12:	4b24      	ldr	r3, [pc, #144]	; (8003ba4 <HAL_RCC_OscConfig+0x244>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b18:	f7fd fbc2 	bl	80012a0 <HAL_GetTick>
 8003b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b1e:	e008      	b.n	8003b32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b20:	f7fd fbbe 	bl	80012a0 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e187      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b32:	4b1b      	ldr	r3, [pc, #108]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1f0      	bne.n	8003b20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0308 	and.w	r3, r3, #8
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d036      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d016      	beq.n	8003b80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b52:	4b15      	ldr	r3, [pc, #84]	; (8003ba8 <HAL_RCC_OscConfig+0x248>)
 8003b54:	2201      	movs	r2, #1
 8003b56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b58:	f7fd fba2 	bl	80012a0 <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b60:	f7fd fb9e 	bl	80012a0 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e167      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b72:	4b0b      	ldr	r3, [pc, #44]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003b74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d0f0      	beq.n	8003b60 <HAL_RCC_OscConfig+0x200>
 8003b7e:	e01b      	b.n	8003bb8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b80:	4b09      	ldr	r3, [pc, #36]	; (8003ba8 <HAL_RCC_OscConfig+0x248>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b86:	f7fd fb8b 	bl	80012a0 <HAL_GetTick>
 8003b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b8c:	e00e      	b.n	8003bac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b8e:	f7fd fb87 	bl	80012a0 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d907      	bls.n	8003bac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e150      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
 8003ba0:	40023800 	.word	0x40023800
 8003ba4:	42470000 	.word	0x42470000
 8003ba8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bac:	4b88      	ldr	r3, [pc, #544]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003bae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bb0:	f003 0302 	and.w	r3, r3, #2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1ea      	bne.n	8003b8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0304 	and.w	r3, r3, #4
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 8097 	beq.w	8003cf4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bca:	4b81      	ldr	r3, [pc, #516]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10f      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	60bb      	str	r3, [r7, #8]
 8003bda:	4b7d      	ldr	r3, [pc, #500]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	4a7c      	ldr	r2, [pc, #496]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003be4:	6413      	str	r3, [r2, #64]	; 0x40
 8003be6:	4b7a      	ldr	r3, [pc, #488]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bee:	60bb      	str	r3, [r7, #8]
 8003bf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf6:	4b77      	ldr	r3, [pc, #476]	; (8003dd4 <HAL_RCC_OscConfig+0x474>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d118      	bne.n	8003c34 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c02:	4b74      	ldr	r3, [pc, #464]	; (8003dd4 <HAL_RCC_OscConfig+0x474>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a73      	ldr	r2, [pc, #460]	; (8003dd4 <HAL_RCC_OscConfig+0x474>)
 8003c08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c0e:	f7fd fb47 	bl	80012a0 <HAL_GetTick>
 8003c12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c14:	e008      	b.n	8003c28 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c16:	f7fd fb43 	bl	80012a0 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d901      	bls.n	8003c28 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e10c      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c28:	4b6a      	ldr	r3, [pc, #424]	; (8003dd4 <HAL_RCC_OscConfig+0x474>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d0f0      	beq.n	8003c16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d106      	bne.n	8003c4a <HAL_RCC_OscConfig+0x2ea>
 8003c3c:	4b64      	ldr	r3, [pc, #400]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c40:	4a63      	ldr	r2, [pc, #396]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003c42:	f043 0301 	orr.w	r3, r3, #1
 8003c46:	6713      	str	r3, [r2, #112]	; 0x70
 8003c48:	e01c      	b.n	8003c84 <HAL_RCC_OscConfig+0x324>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	2b05      	cmp	r3, #5
 8003c50:	d10c      	bne.n	8003c6c <HAL_RCC_OscConfig+0x30c>
 8003c52:	4b5f      	ldr	r3, [pc, #380]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c56:	4a5e      	ldr	r2, [pc, #376]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003c58:	f043 0304 	orr.w	r3, r3, #4
 8003c5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c5e:	4b5c      	ldr	r3, [pc, #368]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c62:	4a5b      	ldr	r2, [pc, #364]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003c64:	f043 0301 	orr.w	r3, r3, #1
 8003c68:	6713      	str	r3, [r2, #112]	; 0x70
 8003c6a:	e00b      	b.n	8003c84 <HAL_RCC_OscConfig+0x324>
 8003c6c:	4b58      	ldr	r3, [pc, #352]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c70:	4a57      	ldr	r2, [pc, #348]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003c72:	f023 0301 	bic.w	r3, r3, #1
 8003c76:	6713      	str	r3, [r2, #112]	; 0x70
 8003c78:	4b55      	ldr	r3, [pc, #340]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7c:	4a54      	ldr	r2, [pc, #336]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003c7e:	f023 0304 	bic.w	r3, r3, #4
 8003c82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d015      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c8c:	f7fd fb08 	bl	80012a0 <HAL_GetTick>
 8003c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c92:	e00a      	b.n	8003caa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c94:	f7fd fb04 	bl	80012a0 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e0cb      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003caa:	4b49      	ldr	r3, [pc, #292]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d0ee      	beq.n	8003c94 <HAL_RCC_OscConfig+0x334>
 8003cb6:	e014      	b.n	8003ce2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cb8:	f7fd faf2 	bl	80012a0 <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cbe:	e00a      	b.n	8003cd6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cc0:	f7fd faee 	bl	80012a0 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e0b5      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cd6:	4b3e      	ldr	r3, [pc, #248]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1ee      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ce2:	7dfb      	ldrb	r3, [r7, #23]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d105      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ce8:	4b39      	ldr	r3, [pc, #228]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cec:	4a38      	ldr	r2, [pc, #224]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003cee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cf2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f000 80a1 	beq.w	8003e40 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cfe:	4b34      	ldr	r3, [pc, #208]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f003 030c 	and.w	r3, r3, #12
 8003d06:	2b08      	cmp	r3, #8
 8003d08:	d05c      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d141      	bne.n	8003d96 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d12:	4b31      	ldr	r3, [pc, #196]	; (8003dd8 <HAL_RCC_OscConfig+0x478>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d18:	f7fd fac2 	bl	80012a0 <HAL_GetTick>
 8003d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d1e:	e008      	b.n	8003d32 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d20:	f7fd fabe 	bl	80012a0 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e087      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d32:	4b27      	ldr	r3, [pc, #156]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1f0      	bne.n	8003d20 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	69da      	ldr	r2, [r3, #28]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	431a      	orrs	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4c:	019b      	lsls	r3, r3, #6
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d54:	085b      	lsrs	r3, r3, #1
 8003d56:	3b01      	subs	r3, #1
 8003d58:	041b      	lsls	r3, r3, #16
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d60:	061b      	lsls	r3, r3, #24
 8003d62:	491b      	ldr	r1, [pc, #108]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d68:	4b1b      	ldr	r3, [pc, #108]	; (8003dd8 <HAL_RCC_OscConfig+0x478>)
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d6e:	f7fd fa97 	bl	80012a0 <HAL_GetTick>
 8003d72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d74:	e008      	b.n	8003d88 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d76:	f7fd fa93 	bl	80012a0 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d901      	bls.n	8003d88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e05c      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d88:	4b11      	ldr	r3, [pc, #68]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d0f0      	beq.n	8003d76 <HAL_RCC_OscConfig+0x416>
 8003d94:	e054      	b.n	8003e40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d96:	4b10      	ldr	r3, [pc, #64]	; (8003dd8 <HAL_RCC_OscConfig+0x478>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d9c:	f7fd fa80 	bl	80012a0 <HAL_GetTick>
 8003da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003da2:	e008      	b.n	8003db6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003da4:	f7fd fa7c 	bl	80012a0 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e045      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003db6:	4b06      	ldr	r3, [pc, #24]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1f0      	bne.n	8003da4 <HAL_RCC_OscConfig+0x444>
 8003dc2:	e03d      	b.n	8003e40 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d107      	bne.n	8003ddc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e038      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
 8003dd0:	40023800 	.word	0x40023800
 8003dd4:	40007000 	.word	0x40007000
 8003dd8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ddc:	4b1b      	ldr	r3, [pc, #108]	; (8003e4c <HAL_RCC_OscConfig+0x4ec>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d028      	beq.n	8003e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d121      	bne.n	8003e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d11a      	bne.n	8003e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d111      	bne.n	8003e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e22:	085b      	lsrs	r3, r3, #1
 8003e24:	3b01      	subs	r3, #1
 8003e26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d107      	bne.n	8003e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d001      	beq.n	8003e40 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e000      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3718      	adds	r7, #24
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	40023800 	.word	0x40023800

08003e50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e0cc      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e64:	4b68      	ldr	r3, [pc, #416]	; (8004008 <HAL_RCC_ClockConfig+0x1b8>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0307 	and.w	r3, r3, #7
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d90c      	bls.n	8003e8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e72:	4b65      	ldr	r3, [pc, #404]	; (8004008 <HAL_RCC_ClockConfig+0x1b8>)
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	b2d2      	uxtb	r2, r2
 8003e78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e7a:	4b63      	ldr	r3, [pc, #396]	; (8004008 <HAL_RCC_ClockConfig+0x1b8>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0307 	and.w	r3, r3, #7
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d001      	beq.n	8003e8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e0b8      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d020      	beq.n	8003eda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0304 	and.w	r3, r3, #4
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d005      	beq.n	8003eb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ea4:	4b59      	ldr	r3, [pc, #356]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	4a58      	ldr	r2, [pc, #352]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003eaa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003eae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0308 	and.w	r3, r3, #8
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d005      	beq.n	8003ec8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ebc:	4b53      	ldr	r3, [pc, #332]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	4a52      	ldr	r2, [pc, #328]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003ec2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ec6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ec8:	4b50      	ldr	r3, [pc, #320]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	494d      	ldr	r1, [pc, #308]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d044      	beq.n	8003f70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d107      	bne.n	8003efe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eee:	4b47      	ldr	r3, [pc, #284]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d119      	bne.n	8003f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e07f      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d003      	beq.n	8003f0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f0a:	2b03      	cmp	r3, #3
 8003f0c:	d107      	bne.n	8003f1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f0e:	4b3f      	ldr	r3, [pc, #252]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d109      	bne.n	8003f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e06f      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f1e:	4b3b      	ldr	r3, [pc, #236]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e067      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f2e:	4b37      	ldr	r3, [pc, #220]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f023 0203 	bic.w	r2, r3, #3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	4934      	ldr	r1, [pc, #208]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f40:	f7fd f9ae 	bl	80012a0 <HAL_GetTick>
 8003f44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f46:	e00a      	b.n	8003f5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f48:	f7fd f9aa 	bl	80012a0 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e04f      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f5e:	4b2b      	ldr	r3, [pc, #172]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f003 020c 	and.w	r2, r3, #12
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d1eb      	bne.n	8003f48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f70:	4b25      	ldr	r3, [pc, #148]	; (8004008 <HAL_RCC_ClockConfig+0x1b8>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0307 	and.w	r3, r3, #7
 8003f78:	683a      	ldr	r2, [r7, #0]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d20c      	bcs.n	8003f98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f7e:	4b22      	ldr	r3, [pc, #136]	; (8004008 <HAL_RCC_ClockConfig+0x1b8>)
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	b2d2      	uxtb	r2, r2
 8003f84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f86:	4b20      	ldr	r3, [pc, #128]	; (8004008 <HAL_RCC_ClockConfig+0x1b8>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0307 	and.w	r3, r3, #7
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d001      	beq.n	8003f98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e032      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0304 	and.w	r3, r3, #4
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d008      	beq.n	8003fb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fa4:	4b19      	ldr	r3, [pc, #100]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	4916      	ldr	r1, [pc, #88]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0308 	and.w	r3, r3, #8
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d009      	beq.n	8003fd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fc2:	4b12      	ldr	r3, [pc, #72]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	490e      	ldr	r1, [pc, #56]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fd6:	f000 f821 	bl	800401c <HAL_RCC_GetSysClockFreq>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	4b0b      	ldr	r3, [pc, #44]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	091b      	lsrs	r3, r3, #4
 8003fe2:	f003 030f 	and.w	r3, r3, #15
 8003fe6:	490a      	ldr	r1, [pc, #40]	; (8004010 <HAL_RCC_ClockConfig+0x1c0>)
 8003fe8:	5ccb      	ldrb	r3, [r1, r3]
 8003fea:	fa22 f303 	lsr.w	r3, r2, r3
 8003fee:	4a09      	ldr	r2, [pc, #36]	; (8004014 <HAL_RCC_ClockConfig+0x1c4>)
 8003ff0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ff2:	4b09      	ldr	r3, [pc, #36]	; (8004018 <HAL_RCC_ClockConfig+0x1c8>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7fd f90e 	bl	8001218 <HAL_InitTick>

  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	40023c00 	.word	0x40023c00
 800400c:	40023800 	.word	0x40023800
 8004010:	0800d354 	.word	0x0800d354
 8004014:	20000000 	.word	0x20000000
 8004018:	20000004 	.word	0x20000004

0800401c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800401c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004020:	b094      	sub	sp, #80	; 0x50
 8004022:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004024:	2300      	movs	r3, #0
 8004026:	647b      	str	r3, [r7, #68]	; 0x44
 8004028:	2300      	movs	r3, #0
 800402a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800402c:	2300      	movs	r3, #0
 800402e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004030:	2300      	movs	r3, #0
 8004032:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004034:	4b79      	ldr	r3, [pc, #484]	; (800421c <HAL_RCC_GetSysClockFreq+0x200>)
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f003 030c 	and.w	r3, r3, #12
 800403c:	2b08      	cmp	r3, #8
 800403e:	d00d      	beq.n	800405c <HAL_RCC_GetSysClockFreq+0x40>
 8004040:	2b08      	cmp	r3, #8
 8004042:	f200 80e1 	bhi.w	8004208 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004046:	2b00      	cmp	r3, #0
 8004048:	d002      	beq.n	8004050 <HAL_RCC_GetSysClockFreq+0x34>
 800404a:	2b04      	cmp	r3, #4
 800404c:	d003      	beq.n	8004056 <HAL_RCC_GetSysClockFreq+0x3a>
 800404e:	e0db      	b.n	8004208 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004050:	4b73      	ldr	r3, [pc, #460]	; (8004220 <HAL_RCC_GetSysClockFreq+0x204>)
 8004052:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004054:	e0db      	b.n	800420e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004056:	4b73      	ldr	r3, [pc, #460]	; (8004224 <HAL_RCC_GetSysClockFreq+0x208>)
 8004058:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800405a:	e0d8      	b.n	800420e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800405c:	4b6f      	ldr	r3, [pc, #444]	; (800421c <HAL_RCC_GetSysClockFreq+0x200>)
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004064:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004066:	4b6d      	ldr	r3, [pc, #436]	; (800421c <HAL_RCC_GetSysClockFreq+0x200>)
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d063      	beq.n	800413a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004072:	4b6a      	ldr	r3, [pc, #424]	; (800421c <HAL_RCC_GetSysClockFreq+0x200>)
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	099b      	lsrs	r3, r3, #6
 8004078:	2200      	movs	r2, #0
 800407a:	63bb      	str	r3, [r7, #56]	; 0x38
 800407c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800407e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004080:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004084:	633b      	str	r3, [r7, #48]	; 0x30
 8004086:	2300      	movs	r3, #0
 8004088:	637b      	str	r3, [r7, #52]	; 0x34
 800408a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800408e:	4622      	mov	r2, r4
 8004090:	462b      	mov	r3, r5
 8004092:	f04f 0000 	mov.w	r0, #0
 8004096:	f04f 0100 	mov.w	r1, #0
 800409a:	0159      	lsls	r1, r3, #5
 800409c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040a0:	0150      	lsls	r0, r2, #5
 80040a2:	4602      	mov	r2, r0
 80040a4:	460b      	mov	r3, r1
 80040a6:	4621      	mov	r1, r4
 80040a8:	1a51      	subs	r1, r2, r1
 80040aa:	6139      	str	r1, [r7, #16]
 80040ac:	4629      	mov	r1, r5
 80040ae:	eb63 0301 	sbc.w	r3, r3, r1
 80040b2:	617b      	str	r3, [r7, #20]
 80040b4:	f04f 0200 	mov.w	r2, #0
 80040b8:	f04f 0300 	mov.w	r3, #0
 80040bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040c0:	4659      	mov	r1, fp
 80040c2:	018b      	lsls	r3, r1, #6
 80040c4:	4651      	mov	r1, sl
 80040c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040ca:	4651      	mov	r1, sl
 80040cc:	018a      	lsls	r2, r1, #6
 80040ce:	4651      	mov	r1, sl
 80040d0:	ebb2 0801 	subs.w	r8, r2, r1
 80040d4:	4659      	mov	r1, fp
 80040d6:	eb63 0901 	sbc.w	r9, r3, r1
 80040da:	f04f 0200 	mov.w	r2, #0
 80040de:	f04f 0300 	mov.w	r3, #0
 80040e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040ee:	4690      	mov	r8, r2
 80040f0:	4699      	mov	r9, r3
 80040f2:	4623      	mov	r3, r4
 80040f4:	eb18 0303 	adds.w	r3, r8, r3
 80040f8:	60bb      	str	r3, [r7, #8]
 80040fa:	462b      	mov	r3, r5
 80040fc:	eb49 0303 	adc.w	r3, r9, r3
 8004100:	60fb      	str	r3, [r7, #12]
 8004102:	f04f 0200 	mov.w	r2, #0
 8004106:	f04f 0300 	mov.w	r3, #0
 800410a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800410e:	4629      	mov	r1, r5
 8004110:	024b      	lsls	r3, r1, #9
 8004112:	4621      	mov	r1, r4
 8004114:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004118:	4621      	mov	r1, r4
 800411a:	024a      	lsls	r2, r1, #9
 800411c:	4610      	mov	r0, r2
 800411e:	4619      	mov	r1, r3
 8004120:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004122:	2200      	movs	r2, #0
 8004124:	62bb      	str	r3, [r7, #40]	; 0x28
 8004126:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004128:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800412c:	f7fc f8a0 	bl	8000270 <__aeabi_uldivmod>
 8004130:	4602      	mov	r2, r0
 8004132:	460b      	mov	r3, r1
 8004134:	4613      	mov	r3, r2
 8004136:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004138:	e058      	b.n	80041ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800413a:	4b38      	ldr	r3, [pc, #224]	; (800421c <HAL_RCC_GetSysClockFreq+0x200>)
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	099b      	lsrs	r3, r3, #6
 8004140:	2200      	movs	r2, #0
 8004142:	4618      	mov	r0, r3
 8004144:	4611      	mov	r1, r2
 8004146:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800414a:	623b      	str	r3, [r7, #32]
 800414c:	2300      	movs	r3, #0
 800414e:	627b      	str	r3, [r7, #36]	; 0x24
 8004150:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004154:	4642      	mov	r2, r8
 8004156:	464b      	mov	r3, r9
 8004158:	f04f 0000 	mov.w	r0, #0
 800415c:	f04f 0100 	mov.w	r1, #0
 8004160:	0159      	lsls	r1, r3, #5
 8004162:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004166:	0150      	lsls	r0, r2, #5
 8004168:	4602      	mov	r2, r0
 800416a:	460b      	mov	r3, r1
 800416c:	4641      	mov	r1, r8
 800416e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004172:	4649      	mov	r1, r9
 8004174:	eb63 0b01 	sbc.w	fp, r3, r1
 8004178:	f04f 0200 	mov.w	r2, #0
 800417c:	f04f 0300 	mov.w	r3, #0
 8004180:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004184:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004188:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800418c:	ebb2 040a 	subs.w	r4, r2, sl
 8004190:	eb63 050b 	sbc.w	r5, r3, fp
 8004194:	f04f 0200 	mov.w	r2, #0
 8004198:	f04f 0300 	mov.w	r3, #0
 800419c:	00eb      	lsls	r3, r5, #3
 800419e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041a2:	00e2      	lsls	r2, r4, #3
 80041a4:	4614      	mov	r4, r2
 80041a6:	461d      	mov	r5, r3
 80041a8:	4643      	mov	r3, r8
 80041aa:	18e3      	adds	r3, r4, r3
 80041ac:	603b      	str	r3, [r7, #0]
 80041ae:	464b      	mov	r3, r9
 80041b0:	eb45 0303 	adc.w	r3, r5, r3
 80041b4:	607b      	str	r3, [r7, #4]
 80041b6:	f04f 0200 	mov.w	r2, #0
 80041ba:	f04f 0300 	mov.w	r3, #0
 80041be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041c2:	4629      	mov	r1, r5
 80041c4:	028b      	lsls	r3, r1, #10
 80041c6:	4621      	mov	r1, r4
 80041c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041cc:	4621      	mov	r1, r4
 80041ce:	028a      	lsls	r2, r1, #10
 80041d0:	4610      	mov	r0, r2
 80041d2:	4619      	mov	r1, r3
 80041d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041d6:	2200      	movs	r2, #0
 80041d8:	61bb      	str	r3, [r7, #24]
 80041da:	61fa      	str	r2, [r7, #28]
 80041dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041e0:	f7fc f846 	bl	8000270 <__aeabi_uldivmod>
 80041e4:	4602      	mov	r2, r0
 80041e6:	460b      	mov	r3, r1
 80041e8:	4613      	mov	r3, r2
 80041ea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041ec:	4b0b      	ldr	r3, [pc, #44]	; (800421c <HAL_RCC_GetSysClockFreq+0x200>)
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	0c1b      	lsrs	r3, r3, #16
 80041f2:	f003 0303 	and.w	r3, r3, #3
 80041f6:	3301      	adds	r3, #1
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80041fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004200:	fbb2 f3f3 	udiv	r3, r2, r3
 8004204:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004206:	e002      	b.n	800420e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004208:	4b05      	ldr	r3, [pc, #20]	; (8004220 <HAL_RCC_GetSysClockFreq+0x204>)
 800420a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800420c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800420e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004210:	4618      	mov	r0, r3
 8004212:	3750      	adds	r7, #80	; 0x50
 8004214:	46bd      	mov	sp, r7
 8004216:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800421a:	bf00      	nop
 800421c:	40023800 	.word	0x40023800
 8004220:	00f42400 	.word	0x00f42400
 8004224:	007a1200 	.word	0x007a1200

08004228 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004228:	b480      	push	{r7}
 800422a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800422c:	4b03      	ldr	r3, [pc, #12]	; (800423c <HAL_RCC_GetHCLKFreq+0x14>)
 800422e:	681b      	ldr	r3, [r3, #0]
}
 8004230:	4618      	mov	r0, r3
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	20000000 	.word	0x20000000

08004240 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004244:	f7ff fff0 	bl	8004228 <HAL_RCC_GetHCLKFreq>
 8004248:	4602      	mov	r2, r0
 800424a:	4b05      	ldr	r3, [pc, #20]	; (8004260 <HAL_RCC_GetPCLK1Freq+0x20>)
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	0a9b      	lsrs	r3, r3, #10
 8004250:	f003 0307 	and.w	r3, r3, #7
 8004254:	4903      	ldr	r1, [pc, #12]	; (8004264 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004256:	5ccb      	ldrb	r3, [r1, r3]
 8004258:	fa22 f303 	lsr.w	r3, r2, r3
}
 800425c:	4618      	mov	r0, r3
 800425e:	bd80      	pop	{r7, pc}
 8004260:	40023800 	.word	0x40023800
 8004264:	0800d364 	.word	0x0800d364

08004268 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800426c:	f7ff ffdc 	bl	8004228 <HAL_RCC_GetHCLKFreq>
 8004270:	4602      	mov	r2, r0
 8004272:	4b05      	ldr	r3, [pc, #20]	; (8004288 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	0b5b      	lsrs	r3, r3, #13
 8004278:	f003 0307 	and.w	r3, r3, #7
 800427c:	4903      	ldr	r1, [pc, #12]	; (800428c <HAL_RCC_GetPCLK2Freq+0x24>)
 800427e:	5ccb      	ldrb	r3, [r1, r3]
 8004280:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004284:	4618      	mov	r0, r3
 8004286:	bd80      	pop	{r7, pc}
 8004288:	40023800 	.word	0x40023800
 800428c:	0800d364 	.word	0x0800d364

08004290 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e041      	b.n	8004326 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d106      	bne.n	80042bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f7fc fe2e 	bl	8000f18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2202      	movs	r2, #2
 80042c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	3304      	adds	r3, #4
 80042cc:	4619      	mov	r1, r3
 80042ce:	4610      	mov	r0, r2
 80042d0:	f000 fad8 	bl	8004884 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3708      	adds	r7, #8
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800432e:	b580      	push	{r7, lr}
 8004330:	b082      	sub	sp, #8
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d101      	bne.n	8004340 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e041      	b.n	80043c4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004346:	b2db      	uxtb	r3, r3
 8004348:	2b00      	cmp	r3, #0
 800434a:	d106      	bne.n	800435a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 f839 	bl	80043cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2202      	movs	r2, #2
 800435e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	3304      	adds	r3, #4
 800436a:	4619      	mov	r1, r3
 800436c:	4610      	mov	r0, r2
 800436e:	f000 fa89 	bl	8004884 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2201      	movs	r2, #1
 80043be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3708      	adds	r7, #8
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80043d4:	bf00      	nop
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d109      	bne.n	8004404 <HAL_TIM_PWM_Start+0x24>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	bf14      	ite	ne
 80043fc:	2301      	movne	r3, #1
 80043fe:	2300      	moveq	r3, #0
 8004400:	b2db      	uxtb	r3, r3
 8004402:	e022      	b.n	800444a <HAL_TIM_PWM_Start+0x6a>
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	2b04      	cmp	r3, #4
 8004408:	d109      	bne.n	800441e <HAL_TIM_PWM_Start+0x3e>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b01      	cmp	r3, #1
 8004414:	bf14      	ite	ne
 8004416:	2301      	movne	r3, #1
 8004418:	2300      	moveq	r3, #0
 800441a:	b2db      	uxtb	r3, r3
 800441c:	e015      	b.n	800444a <HAL_TIM_PWM_Start+0x6a>
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	2b08      	cmp	r3, #8
 8004422:	d109      	bne.n	8004438 <HAL_TIM_PWM_Start+0x58>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b01      	cmp	r3, #1
 800442e:	bf14      	ite	ne
 8004430:	2301      	movne	r3, #1
 8004432:	2300      	moveq	r3, #0
 8004434:	b2db      	uxtb	r3, r3
 8004436:	e008      	b.n	800444a <HAL_TIM_PWM_Start+0x6a>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800443e:	b2db      	uxtb	r3, r3
 8004440:	2b01      	cmp	r3, #1
 8004442:	bf14      	ite	ne
 8004444:	2301      	movne	r3, #1
 8004446:	2300      	moveq	r3, #0
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d001      	beq.n	8004452 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e07c      	b.n	800454c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d104      	bne.n	8004462 <HAL_TIM_PWM_Start+0x82>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2202      	movs	r2, #2
 800445c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004460:	e013      	b.n	800448a <HAL_TIM_PWM_Start+0xaa>
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	2b04      	cmp	r3, #4
 8004466:	d104      	bne.n	8004472 <HAL_TIM_PWM_Start+0x92>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2202      	movs	r2, #2
 800446c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004470:	e00b      	b.n	800448a <HAL_TIM_PWM_Start+0xaa>
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	2b08      	cmp	r3, #8
 8004476:	d104      	bne.n	8004482 <HAL_TIM_PWM_Start+0xa2>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2202      	movs	r2, #2
 800447c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004480:	e003      	b.n	800448a <HAL_TIM_PWM_Start+0xaa>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2202      	movs	r2, #2
 8004486:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2201      	movs	r2, #1
 8004490:	6839      	ldr	r1, [r7, #0]
 8004492:	4618      	mov	r0, r3
 8004494:	f000 fce0 	bl	8004e58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a2d      	ldr	r2, [pc, #180]	; (8004554 <HAL_TIM_PWM_Start+0x174>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d004      	beq.n	80044ac <HAL_TIM_PWM_Start+0xcc>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a2c      	ldr	r2, [pc, #176]	; (8004558 <HAL_TIM_PWM_Start+0x178>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d101      	bne.n	80044b0 <HAL_TIM_PWM_Start+0xd0>
 80044ac:	2301      	movs	r3, #1
 80044ae:	e000      	b.n	80044b2 <HAL_TIM_PWM_Start+0xd2>
 80044b0:	2300      	movs	r3, #0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d007      	beq.n	80044c6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a22      	ldr	r2, [pc, #136]	; (8004554 <HAL_TIM_PWM_Start+0x174>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d022      	beq.n	8004516 <HAL_TIM_PWM_Start+0x136>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044d8:	d01d      	beq.n	8004516 <HAL_TIM_PWM_Start+0x136>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a1f      	ldr	r2, [pc, #124]	; (800455c <HAL_TIM_PWM_Start+0x17c>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d018      	beq.n	8004516 <HAL_TIM_PWM_Start+0x136>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a1d      	ldr	r2, [pc, #116]	; (8004560 <HAL_TIM_PWM_Start+0x180>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d013      	beq.n	8004516 <HAL_TIM_PWM_Start+0x136>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a1c      	ldr	r2, [pc, #112]	; (8004564 <HAL_TIM_PWM_Start+0x184>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d00e      	beq.n	8004516 <HAL_TIM_PWM_Start+0x136>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a16      	ldr	r2, [pc, #88]	; (8004558 <HAL_TIM_PWM_Start+0x178>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d009      	beq.n	8004516 <HAL_TIM_PWM_Start+0x136>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a18      	ldr	r2, [pc, #96]	; (8004568 <HAL_TIM_PWM_Start+0x188>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d004      	beq.n	8004516 <HAL_TIM_PWM_Start+0x136>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a16      	ldr	r2, [pc, #88]	; (800456c <HAL_TIM_PWM_Start+0x18c>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d111      	bne.n	800453a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f003 0307 	and.w	r3, r3, #7
 8004520:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2b06      	cmp	r3, #6
 8004526:	d010      	beq.n	800454a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f042 0201 	orr.w	r2, r2, #1
 8004536:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004538:	e007      	b.n	800454a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f042 0201 	orr.w	r2, r2, #1
 8004548:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	40010000 	.word	0x40010000
 8004558:	40010400 	.word	0x40010400
 800455c:	40000400 	.word	0x40000400
 8004560:	40000800 	.word	0x40000800
 8004564:	40000c00 	.word	0x40000c00
 8004568:	40014000 	.word	0x40014000
 800456c:	40001800 	.word	0x40001800

08004570 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800457c:	2300      	movs	r3, #0
 800457e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004586:	2b01      	cmp	r3, #1
 8004588:	d101      	bne.n	800458e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800458a:	2302      	movs	r3, #2
 800458c:	e0ae      	b.n	80046ec <HAL_TIM_PWM_ConfigChannel+0x17c>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2b0c      	cmp	r3, #12
 800459a:	f200 809f 	bhi.w	80046dc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800459e:	a201      	add	r2, pc, #4	; (adr r2, 80045a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80045a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a4:	080045d9 	.word	0x080045d9
 80045a8:	080046dd 	.word	0x080046dd
 80045ac:	080046dd 	.word	0x080046dd
 80045b0:	080046dd 	.word	0x080046dd
 80045b4:	08004619 	.word	0x08004619
 80045b8:	080046dd 	.word	0x080046dd
 80045bc:	080046dd 	.word	0x080046dd
 80045c0:	080046dd 	.word	0x080046dd
 80045c4:	0800465b 	.word	0x0800465b
 80045c8:	080046dd 	.word	0x080046dd
 80045cc:	080046dd 	.word	0x080046dd
 80045d0:	080046dd 	.word	0x080046dd
 80045d4:	0800469b 	.word	0x0800469b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68b9      	ldr	r1, [r7, #8]
 80045de:	4618      	mov	r0, r3
 80045e0:	f000 f9f0 	bl	80049c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	699a      	ldr	r2, [r3, #24]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f042 0208 	orr.w	r2, r2, #8
 80045f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	699a      	ldr	r2, [r3, #24]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f022 0204 	bic.w	r2, r2, #4
 8004602:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6999      	ldr	r1, [r3, #24]
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	691a      	ldr	r2, [r3, #16]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	430a      	orrs	r2, r1
 8004614:	619a      	str	r2, [r3, #24]
      break;
 8004616:	e064      	b.n	80046e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68b9      	ldr	r1, [r7, #8]
 800461e:	4618      	mov	r0, r3
 8004620:	f000 fa40 	bl	8004aa4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	699a      	ldr	r2, [r3, #24]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004632:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	699a      	ldr	r2, [r3, #24]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004642:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	6999      	ldr	r1, [r3, #24]
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	021a      	lsls	r2, r3, #8
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	430a      	orrs	r2, r1
 8004656:	619a      	str	r2, [r3, #24]
      break;
 8004658:	e043      	b.n	80046e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68b9      	ldr	r1, [r7, #8]
 8004660:	4618      	mov	r0, r3
 8004662:	f000 fa95 	bl	8004b90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	69da      	ldr	r2, [r3, #28]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f042 0208 	orr.w	r2, r2, #8
 8004674:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	69da      	ldr	r2, [r3, #28]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f022 0204 	bic.w	r2, r2, #4
 8004684:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	69d9      	ldr	r1, [r3, #28]
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	691a      	ldr	r2, [r3, #16]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	430a      	orrs	r2, r1
 8004696:	61da      	str	r2, [r3, #28]
      break;
 8004698:	e023      	b.n	80046e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68b9      	ldr	r1, [r7, #8]
 80046a0:	4618      	mov	r0, r3
 80046a2:	f000 fae9 	bl	8004c78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	69da      	ldr	r2, [r3, #28]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	69da      	ldr	r2, [r3, #28]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	69d9      	ldr	r1, [r3, #28]
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	021a      	lsls	r2, r3, #8
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	430a      	orrs	r2, r1
 80046d8:	61da      	str	r2, [r3, #28]
      break;
 80046da:	e002      	b.n	80046e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	75fb      	strb	r3, [r7, #23]
      break;
 80046e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3718      	adds	r7, #24
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046fe:	2300      	movs	r3, #0
 8004700:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004708:	2b01      	cmp	r3, #1
 800470a:	d101      	bne.n	8004710 <HAL_TIM_ConfigClockSource+0x1c>
 800470c:	2302      	movs	r3, #2
 800470e:	e0b4      	b.n	800487a <HAL_TIM_ConfigClockSource+0x186>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2202      	movs	r2, #2
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800472e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004736:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68ba      	ldr	r2, [r7, #8]
 800473e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004748:	d03e      	beq.n	80047c8 <HAL_TIM_ConfigClockSource+0xd4>
 800474a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800474e:	f200 8087 	bhi.w	8004860 <HAL_TIM_ConfigClockSource+0x16c>
 8004752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004756:	f000 8086 	beq.w	8004866 <HAL_TIM_ConfigClockSource+0x172>
 800475a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800475e:	d87f      	bhi.n	8004860 <HAL_TIM_ConfigClockSource+0x16c>
 8004760:	2b70      	cmp	r3, #112	; 0x70
 8004762:	d01a      	beq.n	800479a <HAL_TIM_ConfigClockSource+0xa6>
 8004764:	2b70      	cmp	r3, #112	; 0x70
 8004766:	d87b      	bhi.n	8004860 <HAL_TIM_ConfigClockSource+0x16c>
 8004768:	2b60      	cmp	r3, #96	; 0x60
 800476a:	d050      	beq.n	800480e <HAL_TIM_ConfigClockSource+0x11a>
 800476c:	2b60      	cmp	r3, #96	; 0x60
 800476e:	d877      	bhi.n	8004860 <HAL_TIM_ConfigClockSource+0x16c>
 8004770:	2b50      	cmp	r3, #80	; 0x50
 8004772:	d03c      	beq.n	80047ee <HAL_TIM_ConfigClockSource+0xfa>
 8004774:	2b50      	cmp	r3, #80	; 0x50
 8004776:	d873      	bhi.n	8004860 <HAL_TIM_ConfigClockSource+0x16c>
 8004778:	2b40      	cmp	r3, #64	; 0x40
 800477a:	d058      	beq.n	800482e <HAL_TIM_ConfigClockSource+0x13a>
 800477c:	2b40      	cmp	r3, #64	; 0x40
 800477e:	d86f      	bhi.n	8004860 <HAL_TIM_ConfigClockSource+0x16c>
 8004780:	2b30      	cmp	r3, #48	; 0x30
 8004782:	d064      	beq.n	800484e <HAL_TIM_ConfigClockSource+0x15a>
 8004784:	2b30      	cmp	r3, #48	; 0x30
 8004786:	d86b      	bhi.n	8004860 <HAL_TIM_ConfigClockSource+0x16c>
 8004788:	2b20      	cmp	r3, #32
 800478a:	d060      	beq.n	800484e <HAL_TIM_ConfigClockSource+0x15a>
 800478c:	2b20      	cmp	r3, #32
 800478e:	d867      	bhi.n	8004860 <HAL_TIM_ConfigClockSource+0x16c>
 8004790:	2b00      	cmp	r3, #0
 8004792:	d05c      	beq.n	800484e <HAL_TIM_ConfigClockSource+0x15a>
 8004794:	2b10      	cmp	r3, #16
 8004796:	d05a      	beq.n	800484e <HAL_TIM_ConfigClockSource+0x15a>
 8004798:	e062      	b.n	8004860 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6818      	ldr	r0, [r3, #0]
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	6899      	ldr	r1, [r3, #8]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	f000 fb35 	bl	8004e18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68ba      	ldr	r2, [r7, #8]
 80047c4:	609a      	str	r2, [r3, #8]
      break;
 80047c6:	e04f      	b.n	8004868 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6818      	ldr	r0, [r3, #0]
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	6899      	ldr	r1, [r3, #8]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685a      	ldr	r2, [r3, #4]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	f000 fb1e 	bl	8004e18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	689a      	ldr	r2, [r3, #8]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047ea:	609a      	str	r2, [r3, #8]
      break;
 80047ec:	e03c      	b.n	8004868 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6818      	ldr	r0, [r3, #0]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	6859      	ldr	r1, [r3, #4]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	461a      	mov	r2, r3
 80047fc:	f000 fa92 	bl	8004d24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2150      	movs	r1, #80	; 0x50
 8004806:	4618      	mov	r0, r3
 8004808:	f000 faeb 	bl	8004de2 <TIM_ITRx_SetConfig>
      break;
 800480c:	e02c      	b.n	8004868 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6818      	ldr	r0, [r3, #0]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	6859      	ldr	r1, [r3, #4]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	461a      	mov	r2, r3
 800481c:	f000 fab1 	bl	8004d82 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2160      	movs	r1, #96	; 0x60
 8004826:	4618      	mov	r0, r3
 8004828:	f000 fadb 	bl	8004de2 <TIM_ITRx_SetConfig>
      break;
 800482c:	e01c      	b.n	8004868 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6818      	ldr	r0, [r3, #0]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	6859      	ldr	r1, [r3, #4]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	461a      	mov	r2, r3
 800483c:	f000 fa72 	bl	8004d24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2140      	movs	r1, #64	; 0x40
 8004846:	4618      	mov	r0, r3
 8004848:	f000 facb 	bl	8004de2 <TIM_ITRx_SetConfig>
      break;
 800484c:	e00c      	b.n	8004868 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4619      	mov	r1, r3
 8004858:	4610      	mov	r0, r2
 800485a:	f000 fac2 	bl	8004de2 <TIM_ITRx_SetConfig>
      break;
 800485e:	e003      	b.n	8004868 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	73fb      	strb	r3, [r7, #15]
      break;
 8004864:	e000      	b.n	8004868 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004866:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004878:	7bfb      	ldrb	r3, [r7, #15]
}
 800487a:	4618      	mov	r0, r3
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
	...

08004884 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004884:	b480      	push	{r7}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a40      	ldr	r2, [pc, #256]	; (8004998 <TIM_Base_SetConfig+0x114>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d013      	beq.n	80048c4 <TIM_Base_SetConfig+0x40>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048a2:	d00f      	beq.n	80048c4 <TIM_Base_SetConfig+0x40>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a3d      	ldr	r2, [pc, #244]	; (800499c <TIM_Base_SetConfig+0x118>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d00b      	beq.n	80048c4 <TIM_Base_SetConfig+0x40>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a3c      	ldr	r2, [pc, #240]	; (80049a0 <TIM_Base_SetConfig+0x11c>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d007      	beq.n	80048c4 <TIM_Base_SetConfig+0x40>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a3b      	ldr	r2, [pc, #236]	; (80049a4 <TIM_Base_SetConfig+0x120>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d003      	beq.n	80048c4 <TIM_Base_SetConfig+0x40>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a3a      	ldr	r2, [pc, #232]	; (80049a8 <TIM_Base_SetConfig+0x124>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d108      	bne.n	80048d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a2f      	ldr	r2, [pc, #188]	; (8004998 <TIM_Base_SetConfig+0x114>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d02b      	beq.n	8004936 <TIM_Base_SetConfig+0xb2>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048e4:	d027      	beq.n	8004936 <TIM_Base_SetConfig+0xb2>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a2c      	ldr	r2, [pc, #176]	; (800499c <TIM_Base_SetConfig+0x118>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d023      	beq.n	8004936 <TIM_Base_SetConfig+0xb2>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a2b      	ldr	r2, [pc, #172]	; (80049a0 <TIM_Base_SetConfig+0x11c>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d01f      	beq.n	8004936 <TIM_Base_SetConfig+0xb2>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a2a      	ldr	r2, [pc, #168]	; (80049a4 <TIM_Base_SetConfig+0x120>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d01b      	beq.n	8004936 <TIM_Base_SetConfig+0xb2>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a29      	ldr	r2, [pc, #164]	; (80049a8 <TIM_Base_SetConfig+0x124>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d017      	beq.n	8004936 <TIM_Base_SetConfig+0xb2>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a28      	ldr	r2, [pc, #160]	; (80049ac <TIM_Base_SetConfig+0x128>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d013      	beq.n	8004936 <TIM_Base_SetConfig+0xb2>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a27      	ldr	r2, [pc, #156]	; (80049b0 <TIM_Base_SetConfig+0x12c>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d00f      	beq.n	8004936 <TIM_Base_SetConfig+0xb2>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a26      	ldr	r2, [pc, #152]	; (80049b4 <TIM_Base_SetConfig+0x130>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d00b      	beq.n	8004936 <TIM_Base_SetConfig+0xb2>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a25      	ldr	r2, [pc, #148]	; (80049b8 <TIM_Base_SetConfig+0x134>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d007      	beq.n	8004936 <TIM_Base_SetConfig+0xb2>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a24      	ldr	r2, [pc, #144]	; (80049bc <TIM_Base_SetConfig+0x138>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d003      	beq.n	8004936 <TIM_Base_SetConfig+0xb2>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a23      	ldr	r2, [pc, #140]	; (80049c0 <TIM_Base_SetConfig+0x13c>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d108      	bne.n	8004948 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800493c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	4313      	orrs	r3, r2
 8004946:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	4313      	orrs	r3, r2
 8004954:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	689a      	ldr	r2, [r3, #8]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a0a      	ldr	r2, [pc, #40]	; (8004998 <TIM_Base_SetConfig+0x114>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d003      	beq.n	800497c <TIM_Base_SetConfig+0xf8>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a0c      	ldr	r2, [pc, #48]	; (80049a8 <TIM_Base_SetConfig+0x124>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d103      	bne.n	8004984 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	691a      	ldr	r2, [r3, #16]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	615a      	str	r2, [r3, #20]
}
 800498a:	bf00      	nop
 800498c:	3714      	adds	r7, #20
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	40010000 	.word	0x40010000
 800499c:	40000400 	.word	0x40000400
 80049a0:	40000800 	.word	0x40000800
 80049a4:	40000c00 	.word	0x40000c00
 80049a8:	40010400 	.word	0x40010400
 80049ac:	40014000 	.word	0x40014000
 80049b0:	40014400 	.word	0x40014400
 80049b4:	40014800 	.word	0x40014800
 80049b8:	40001800 	.word	0x40001800
 80049bc:	40001c00 	.word	0x40001c00
 80049c0:	40002000 	.word	0x40002000

080049c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b087      	sub	sp, #28
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	f023 0201 	bic.w	r2, r3, #1
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f023 0303 	bic.w	r3, r3, #3
 80049fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	f023 0302 	bic.w	r3, r3, #2
 8004a0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a20      	ldr	r2, [pc, #128]	; (8004a9c <TIM_OC1_SetConfig+0xd8>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d003      	beq.n	8004a28 <TIM_OC1_SetConfig+0x64>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a1f      	ldr	r2, [pc, #124]	; (8004aa0 <TIM_OC1_SetConfig+0xdc>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d10c      	bne.n	8004a42 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	f023 0308 	bic.w	r3, r3, #8
 8004a2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	f023 0304 	bic.w	r3, r3, #4
 8004a40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a15      	ldr	r2, [pc, #84]	; (8004a9c <TIM_OC1_SetConfig+0xd8>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d003      	beq.n	8004a52 <TIM_OC1_SetConfig+0x8e>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a14      	ldr	r2, [pc, #80]	; (8004aa0 <TIM_OC1_SetConfig+0xdc>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d111      	bne.n	8004a76 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	693a      	ldr	r2, [r7, #16]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	693a      	ldr	r2, [r7, #16]
 8004a7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	685a      	ldr	r2, [r3, #4]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	697a      	ldr	r2, [r7, #20]
 8004a8e:	621a      	str	r2, [r3, #32]
}
 8004a90:	bf00      	nop
 8004a92:	371c      	adds	r7, #28
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr
 8004a9c:	40010000 	.word	0x40010000
 8004aa0:	40010400 	.word	0x40010400

08004aa4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b087      	sub	sp, #28
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	f023 0210 	bic.w	r2, r3, #16
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ada:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	021b      	lsls	r3, r3, #8
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	f023 0320 	bic.w	r3, r3, #32
 8004aee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	011b      	lsls	r3, r3, #4
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a22      	ldr	r2, [pc, #136]	; (8004b88 <TIM_OC2_SetConfig+0xe4>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d003      	beq.n	8004b0c <TIM_OC2_SetConfig+0x68>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a21      	ldr	r2, [pc, #132]	; (8004b8c <TIM_OC2_SetConfig+0xe8>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d10d      	bne.n	8004b28 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	011b      	lsls	r3, r3, #4
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a17      	ldr	r2, [pc, #92]	; (8004b88 <TIM_OC2_SetConfig+0xe4>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d003      	beq.n	8004b38 <TIM_OC2_SetConfig+0x94>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a16      	ldr	r2, [pc, #88]	; (8004b8c <TIM_OC2_SetConfig+0xe8>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d113      	bne.n	8004b60 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	695b      	ldr	r3, [r3, #20]
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	693a      	ldr	r2, [r7, #16]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	693a      	ldr	r2, [r7, #16]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	685a      	ldr	r2, [r3, #4]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	697a      	ldr	r2, [r7, #20]
 8004b78:	621a      	str	r2, [r3, #32]
}
 8004b7a:	bf00      	nop
 8004b7c:	371c      	adds	r7, #28
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	40010000 	.word	0x40010000
 8004b8c:	40010400 	.word	0x40010400

08004b90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b087      	sub	sp, #28
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
 8004b9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
 8004baa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	69db      	ldr	r3, [r3, #28]
 8004bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f023 0303 	bic.w	r3, r3, #3
 8004bc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	021b      	lsls	r3, r3, #8
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a21      	ldr	r2, [pc, #132]	; (8004c70 <TIM_OC3_SetConfig+0xe0>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d003      	beq.n	8004bf6 <TIM_OC3_SetConfig+0x66>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a20      	ldr	r2, [pc, #128]	; (8004c74 <TIM_OC3_SetConfig+0xe4>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d10d      	bne.n	8004c12 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	021b      	lsls	r3, r3, #8
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a16      	ldr	r2, [pc, #88]	; (8004c70 <TIM_OC3_SetConfig+0xe0>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d003      	beq.n	8004c22 <TIM_OC3_SetConfig+0x92>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a15      	ldr	r2, [pc, #84]	; (8004c74 <TIM_OC3_SetConfig+0xe4>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d113      	bne.n	8004c4a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	011b      	lsls	r3, r3, #4
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	011b      	lsls	r3, r3, #4
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	685a      	ldr	r2, [r3, #4]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	621a      	str	r2, [r3, #32]
}
 8004c64:	bf00      	nop
 8004c66:	371c      	adds	r7, #28
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr
 8004c70:	40010000 	.word	0x40010000
 8004c74:	40010400 	.word	0x40010400

08004c78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b087      	sub	sp, #28
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a1b      	ldr	r3, [r3, #32]
 8004c92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	69db      	ldr	r3, [r3, #28]
 8004c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ca6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	021b      	lsls	r3, r3, #8
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	031b      	lsls	r3, r3, #12
 8004cca:	693a      	ldr	r2, [r7, #16]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a12      	ldr	r2, [pc, #72]	; (8004d1c <TIM_OC4_SetConfig+0xa4>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d003      	beq.n	8004ce0 <TIM_OC4_SetConfig+0x68>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a11      	ldr	r2, [pc, #68]	; (8004d20 <TIM_OC4_SetConfig+0xa8>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d109      	bne.n	8004cf4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ce6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	695b      	ldr	r3, [r3, #20]
 8004cec:	019b      	lsls	r3, r3, #6
 8004cee:	697a      	ldr	r2, [r7, #20]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	693a      	ldr	r2, [r7, #16]
 8004d0c:	621a      	str	r2, [r3, #32]
}
 8004d0e:	bf00      	nop
 8004d10:	371c      	adds	r7, #28
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	40010000 	.word	0x40010000
 8004d20:	40010400 	.word	0x40010400

08004d24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b087      	sub	sp, #28
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6a1b      	ldr	r3, [r3, #32]
 8004d34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6a1b      	ldr	r3, [r3, #32]
 8004d3a:	f023 0201 	bic.w	r2, r3, #1
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	011b      	lsls	r3, r3, #4
 8004d54:	693a      	ldr	r2, [r7, #16]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	f023 030a 	bic.w	r3, r3, #10
 8004d60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d62:	697a      	ldr	r2, [r7, #20]
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	621a      	str	r2, [r3, #32]
}
 8004d76:	bf00      	nop
 8004d78:	371c      	adds	r7, #28
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b087      	sub	sp, #28
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	60f8      	str	r0, [r7, #12]
 8004d8a:	60b9      	str	r1, [r7, #8]
 8004d8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	f023 0210 	bic.w	r2, r3, #16
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6a1b      	ldr	r3, [r3, #32]
 8004da4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004dac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	031b      	lsls	r3, r3, #12
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004dbe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	011b      	lsls	r3, r3, #4
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	697a      	ldr	r2, [r7, #20]
 8004dce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	621a      	str	r2, [r3, #32]
}
 8004dd6:	bf00      	nop
 8004dd8:	371c      	adds	r7, #28
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr

08004de2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004de2:	b480      	push	{r7}
 8004de4:	b085      	sub	sp, #20
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
 8004dea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004dfa:	683a      	ldr	r2, [r7, #0]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	f043 0307 	orr.w	r3, r3, #7
 8004e04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	609a      	str	r2, [r3, #8]
}
 8004e0c:	bf00      	nop
 8004e0e:	3714      	adds	r7, #20
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b087      	sub	sp, #28
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
 8004e24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	021a      	lsls	r2, r3, #8
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	697a      	ldr	r2, [r7, #20]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	609a      	str	r2, [r3, #8]
}
 8004e4c:	bf00      	nop
 8004e4e:	371c      	adds	r7, #28
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b087      	sub	sp, #28
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	f003 031f 	and.w	r3, r3, #31
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6a1a      	ldr	r2, [r3, #32]
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	43db      	mvns	r3, r3
 8004e7a:	401a      	ands	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6a1a      	ldr	r2, [r3, #32]
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	f003 031f 	and.w	r3, r3, #31
 8004e8a:	6879      	ldr	r1, [r7, #4]
 8004e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e90:	431a      	orrs	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	621a      	str	r2, [r3, #32]
}
 8004e96:	bf00      	nop
 8004e98:	371c      	adds	r7, #28
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
	...

08004ea4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d101      	bne.n	8004ebc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004eb8:	2302      	movs	r3, #2
 8004eba:	e05a      	b.n	8004f72 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2202      	movs	r2, #2
 8004ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ee2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a21      	ldr	r2, [pc, #132]	; (8004f80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d022      	beq.n	8004f46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f08:	d01d      	beq.n	8004f46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a1d      	ldr	r2, [pc, #116]	; (8004f84 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d018      	beq.n	8004f46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a1b      	ldr	r2, [pc, #108]	; (8004f88 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d013      	beq.n	8004f46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a1a      	ldr	r2, [pc, #104]	; (8004f8c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d00e      	beq.n	8004f46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a18      	ldr	r2, [pc, #96]	; (8004f90 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d009      	beq.n	8004f46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a17      	ldr	r2, [pc, #92]	; (8004f94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d004      	beq.n	8004f46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a15      	ldr	r2, [pc, #84]	; (8004f98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d10c      	bne.n	8004f60 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	68ba      	ldr	r2, [r7, #8]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68ba      	ldr	r2, [r7, #8]
 8004f5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3714      	adds	r7, #20
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	40010000 	.word	0x40010000
 8004f84:	40000400 	.word	0x40000400
 8004f88:	40000800 	.word	0x40000800
 8004f8c:	40000c00 	.word	0x40000c00
 8004f90:	40010400 	.word	0x40010400
 8004f94:	40014000 	.word	0x40014000
 8004f98:	40001800 	.word	0x40001800

08004f9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d101      	bne.n	8004fae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e03f      	b.n	800502e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d106      	bne.n	8004fc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f7fc f804 	bl	8000fd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2224      	movs	r2, #36	; 0x24
 8004fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68da      	ldr	r2, [r3, #12]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 fd8b 	bl	8005afc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	691a      	ldr	r2, [r3, #16]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ff4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	695a      	ldr	r2, [r3, #20]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005004:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68da      	ldr	r2, [r3, #12]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005014:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2220      	movs	r2, #32
 8005020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2220      	movs	r2, #32
 8005028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3708      	adds	r7, #8
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005036:	b580      	push	{r7, lr}
 8005038:	b08a      	sub	sp, #40	; 0x28
 800503a:	af02      	add	r7, sp, #8
 800503c:	60f8      	str	r0, [r7, #12]
 800503e:	60b9      	str	r1, [r7, #8]
 8005040:	603b      	str	r3, [r7, #0]
 8005042:	4613      	mov	r3, r2
 8005044:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005046:	2300      	movs	r3, #0
 8005048:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005050:	b2db      	uxtb	r3, r3
 8005052:	2b20      	cmp	r3, #32
 8005054:	f040 808c 	bne.w	8005170 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d002      	beq.n	8005064 <HAL_UART_Receive+0x2e>
 800505e:	88fb      	ldrh	r3, [r7, #6]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d101      	bne.n	8005068 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e084      	b.n	8005172 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800506e:	2b01      	cmp	r3, #1
 8005070:	d101      	bne.n	8005076 <HAL_UART_Receive+0x40>
 8005072:	2302      	movs	r3, #2
 8005074:	e07d      	b.n	8005172 <HAL_UART_Receive+0x13c>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2201      	movs	r2, #1
 800507a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2222      	movs	r2, #34	; 0x22
 8005088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2200      	movs	r2, #0
 8005090:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005092:	f7fc f905 	bl	80012a0 <HAL_GetTick>
 8005096:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	88fa      	ldrh	r2, [r7, #6]
 800509c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	88fa      	ldrh	r2, [r7, #6]
 80050a2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ac:	d108      	bne.n	80050c0 <HAL_UART_Receive+0x8a>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d104      	bne.n	80050c0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80050b6:	2300      	movs	r3, #0
 80050b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	61bb      	str	r3, [r7, #24]
 80050be:	e003      	b.n	80050c8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050c4:	2300      	movs	r3, #0
 80050c6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80050d0:	e043      	b.n	800515a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	9300      	str	r3, [sp, #0]
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	2200      	movs	r2, #0
 80050da:	2120      	movs	r1, #32
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f000 fb05 	bl	80056ec <UART_WaitOnFlagUntilTimeout>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d001      	beq.n	80050ec <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e042      	b.n	8005172 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10c      	bne.n	800510c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050fe:	b29a      	uxth	r2, r3
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	3302      	adds	r3, #2
 8005108:	61bb      	str	r3, [r7, #24]
 800510a:	e01f      	b.n	800514c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005114:	d007      	beq.n	8005126 <HAL_UART_Receive+0xf0>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d10a      	bne.n	8005134 <HAL_UART_Receive+0xfe>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d106      	bne.n	8005134 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	b2da      	uxtb	r2, r3
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	701a      	strb	r2, [r3, #0]
 8005132:	e008      	b.n	8005146 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	b2db      	uxtb	r3, r3
 800513c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005140:	b2da      	uxtb	r2, r3
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	3301      	adds	r3, #1
 800514a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005150:	b29b      	uxth	r3, r3
 8005152:	3b01      	subs	r3, #1
 8005154:	b29a      	uxth	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800515e:	b29b      	uxth	r3, r3
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1b6      	bne.n	80050d2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2220      	movs	r2, #32
 8005168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800516c:	2300      	movs	r3, #0
 800516e:	e000      	b.n	8005172 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8005170:	2302      	movs	r3, #2
  }
}
 8005172:	4618      	mov	r0, r3
 8005174:	3720      	adds	r7, #32
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
	...

0800517c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b0ba      	sub	sp, #232	; 0xe8
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80051a2:	2300      	movs	r3, #0
 80051a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80051a8:	2300      	movs	r3, #0
 80051aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80051ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051b2:	f003 030f 	and.w	r3, r3, #15
 80051b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80051ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d10f      	bne.n	80051e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051c6:	f003 0320 	and.w	r3, r3, #32
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d009      	beq.n	80051e2 <HAL_UART_IRQHandler+0x66>
 80051ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051d2:	f003 0320 	and.w	r3, r3, #32
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d003      	beq.n	80051e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 fbd3 	bl	8005986 <UART_Receive_IT>
      return;
 80051e0:	e256      	b.n	8005690 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80051e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	f000 80de 	beq.w	80053a8 <HAL_UART_IRQHandler+0x22c>
 80051ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051f0:	f003 0301 	and.w	r3, r3, #1
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d106      	bne.n	8005206 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80051f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051fc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005200:	2b00      	cmp	r3, #0
 8005202:	f000 80d1 	beq.w	80053a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	2b00      	cmp	r3, #0
 8005210:	d00b      	beq.n	800522a <HAL_UART_IRQHandler+0xae>
 8005212:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800521a:	2b00      	cmp	r3, #0
 800521c:	d005      	beq.n	800522a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005222:	f043 0201 	orr.w	r2, r3, #1
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800522a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800522e:	f003 0304 	and.w	r3, r3, #4
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00b      	beq.n	800524e <HAL_UART_IRQHandler+0xd2>
 8005236:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800523a:	f003 0301 	and.w	r3, r3, #1
 800523e:	2b00      	cmp	r3, #0
 8005240:	d005      	beq.n	800524e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005246:	f043 0202 	orr.w	r2, r3, #2
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800524e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005252:	f003 0302 	and.w	r3, r3, #2
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00b      	beq.n	8005272 <HAL_UART_IRQHandler+0xf6>
 800525a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	2b00      	cmp	r3, #0
 8005264:	d005      	beq.n	8005272 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526a:	f043 0204 	orr.w	r2, r3, #4
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005276:	f003 0308 	and.w	r3, r3, #8
 800527a:	2b00      	cmp	r3, #0
 800527c:	d011      	beq.n	80052a2 <HAL_UART_IRQHandler+0x126>
 800527e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005282:	f003 0320 	and.w	r3, r3, #32
 8005286:	2b00      	cmp	r3, #0
 8005288:	d105      	bne.n	8005296 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800528a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800528e:	f003 0301 	and.w	r3, r3, #1
 8005292:	2b00      	cmp	r3, #0
 8005294:	d005      	beq.n	80052a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529a:	f043 0208 	orr.w	r2, r3, #8
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	f000 81ed 	beq.w	8005686 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052b0:	f003 0320 	and.w	r3, r3, #32
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d008      	beq.n	80052ca <HAL_UART_IRQHandler+0x14e>
 80052b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052bc:	f003 0320 	and.w	r3, r3, #32
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d002      	beq.n	80052ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 fb5e 	bl	8005986 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	695b      	ldr	r3, [r3, #20]
 80052d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d4:	2b40      	cmp	r3, #64	; 0x40
 80052d6:	bf0c      	ite	eq
 80052d8:	2301      	moveq	r3, #1
 80052da:	2300      	movne	r3, #0
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e6:	f003 0308 	and.w	r3, r3, #8
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d103      	bne.n	80052f6 <HAL_UART_IRQHandler+0x17a>
 80052ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d04f      	beq.n	8005396 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 fa66 	bl	80057c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	695b      	ldr	r3, [r3, #20]
 8005302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005306:	2b40      	cmp	r3, #64	; 0x40
 8005308:	d141      	bne.n	800538e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	3314      	adds	r3, #20
 8005310:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005314:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005318:	e853 3f00 	ldrex	r3, [r3]
 800531c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005320:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005324:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005328:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	3314      	adds	r3, #20
 8005332:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005336:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800533a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005342:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005346:	e841 2300 	strex	r3, r2, [r1]
 800534a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800534e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d1d9      	bne.n	800530a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535a:	2b00      	cmp	r3, #0
 800535c:	d013      	beq.n	8005386 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005362:	4a7d      	ldr	r2, [pc, #500]	; (8005558 <HAL_UART_IRQHandler+0x3dc>)
 8005364:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536a:	4618      	mov	r0, r3
 800536c:	f7fc fd15 	bl	8001d9a <HAL_DMA_Abort_IT>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d016      	beq.n	80053a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005380:	4610      	mov	r0, r2
 8005382:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005384:	e00e      	b.n	80053a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 f99a 	bl	80056c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800538c:	e00a      	b.n	80053a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 f996 	bl	80056c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005394:	e006      	b.n	80053a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 f992 	bl	80056c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80053a2:	e170      	b.n	8005686 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053a4:	bf00      	nop
    return;
 80053a6:	e16e      	b.n	8005686 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	f040 814a 	bne.w	8005646 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80053b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053b6:	f003 0310 	and.w	r3, r3, #16
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f000 8143 	beq.w	8005646 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80053c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053c4:	f003 0310 	and.w	r3, r3, #16
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	f000 813c 	beq.w	8005646 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053ce:	2300      	movs	r3, #0
 80053d0:	60bb      	str	r3, [r7, #8]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	60bb      	str	r3, [r7, #8]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	60bb      	str	r3, [r7, #8]
 80053e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ee:	2b40      	cmp	r3, #64	; 0x40
 80053f0:	f040 80b4 	bne.w	800555c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005400:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005404:	2b00      	cmp	r3, #0
 8005406:	f000 8140 	beq.w	800568a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800540e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005412:	429a      	cmp	r2, r3
 8005414:	f080 8139 	bcs.w	800568a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800541e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005424:	69db      	ldr	r3, [r3, #28]
 8005426:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800542a:	f000 8088 	beq.w	800553e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	330c      	adds	r3, #12
 8005434:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005438:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800543c:	e853 3f00 	ldrex	r3, [r3]
 8005440:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005444:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005448:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800544c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	330c      	adds	r3, #12
 8005456:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800545a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800545e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005462:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005466:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800546a:	e841 2300 	strex	r3, r2, [r1]
 800546e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005472:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1d9      	bne.n	800542e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	3314      	adds	r3, #20
 8005480:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005482:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005484:	e853 3f00 	ldrex	r3, [r3]
 8005488:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800548a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800548c:	f023 0301 	bic.w	r3, r3, #1
 8005490:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	3314      	adds	r3, #20
 800549a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800549e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80054a2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80054a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80054aa:	e841 2300 	strex	r3, r2, [r1]
 80054ae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80054b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d1e1      	bne.n	800547a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	3314      	adds	r3, #20
 80054bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054c0:	e853 3f00 	ldrex	r3, [r3]
 80054c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80054c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	3314      	adds	r3, #20
 80054d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80054da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80054dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80054e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80054e2:	e841 2300 	strex	r3, r2, [r1]
 80054e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80054e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1e3      	bne.n	80054b6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2220      	movs	r2, #32
 80054f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	330c      	adds	r3, #12
 8005502:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005504:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005506:	e853 3f00 	ldrex	r3, [r3]
 800550a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800550c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800550e:	f023 0310 	bic.w	r3, r3, #16
 8005512:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	330c      	adds	r3, #12
 800551c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005520:	65ba      	str	r2, [r7, #88]	; 0x58
 8005522:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005524:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005526:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005528:	e841 2300 	strex	r3, r2, [r1]
 800552c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800552e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005530:	2b00      	cmp	r3, #0
 8005532:	d1e3      	bne.n	80054fc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005538:	4618      	mov	r0, r3
 800553a:	f7fc fbbe 	bl	8001cba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005546:	b29b      	uxth	r3, r3
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	b29b      	uxth	r3, r3
 800554c:	4619      	mov	r1, r3
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 f8c0 	bl	80056d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005554:	e099      	b.n	800568a <HAL_UART_IRQHandler+0x50e>
 8005556:	bf00      	nop
 8005558:	0800588f 	.word	0x0800588f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005564:	b29b      	uxth	r3, r3
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005570:	b29b      	uxth	r3, r3
 8005572:	2b00      	cmp	r3, #0
 8005574:	f000 808b 	beq.w	800568e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005578:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800557c:	2b00      	cmp	r3, #0
 800557e:	f000 8086 	beq.w	800568e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	330c      	adds	r3, #12
 8005588:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800558a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558c:	e853 3f00 	ldrex	r3, [r3]
 8005590:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005594:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005598:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	330c      	adds	r3, #12
 80055a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80055a6:	647a      	str	r2, [r7, #68]	; 0x44
 80055a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80055ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055ae:	e841 2300 	strex	r3, r2, [r1]
 80055b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80055b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1e3      	bne.n	8005582 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	3314      	adds	r3, #20
 80055c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c4:	e853 3f00 	ldrex	r3, [r3]
 80055c8:	623b      	str	r3, [r7, #32]
   return(result);
 80055ca:	6a3b      	ldr	r3, [r7, #32]
 80055cc:	f023 0301 	bic.w	r3, r3, #1
 80055d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	3314      	adds	r3, #20
 80055da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80055de:	633a      	str	r2, [r7, #48]	; 0x30
 80055e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055e6:	e841 2300 	strex	r3, r2, [r1]
 80055ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80055ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d1e3      	bne.n	80055ba <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2220      	movs	r2, #32
 80055f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	330c      	adds	r3, #12
 8005606:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	e853 3f00 	ldrex	r3, [r3]
 800560e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f023 0310 	bic.w	r3, r3, #16
 8005616:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	330c      	adds	r3, #12
 8005620:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005624:	61fa      	str	r2, [r7, #28]
 8005626:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005628:	69b9      	ldr	r1, [r7, #24]
 800562a:	69fa      	ldr	r2, [r7, #28]
 800562c:	e841 2300 	strex	r3, r2, [r1]
 8005630:	617b      	str	r3, [r7, #20]
   return(result);
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d1e3      	bne.n	8005600 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005638:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800563c:	4619      	mov	r1, r3
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f848 	bl	80056d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005644:	e023      	b.n	800568e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800564a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800564e:	2b00      	cmp	r3, #0
 8005650:	d009      	beq.n	8005666 <HAL_UART_IRQHandler+0x4ea>
 8005652:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800565a:	2b00      	cmp	r3, #0
 800565c:	d003      	beq.n	8005666 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 f929 	bl	80058b6 <UART_Transmit_IT>
    return;
 8005664:	e014      	b.n	8005690 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800566a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00e      	beq.n	8005690 <HAL_UART_IRQHandler+0x514>
 8005672:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800567a:	2b00      	cmp	r3, #0
 800567c:	d008      	beq.n	8005690 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 f969 	bl	8005956 <UART_EndTransmit_IT>
    return;
 8005684:	e004      	b.n	8005690 <HAL_UART_IRQHandler+0x514>
    return;
 8005686:	bf00      	nop
 8005688:	e002      	b.n	8005690 <HAL_UART_IRQHandler+0x514>
      return;
 800568a:	bf00      	nop
 800568c:	e000      	b.n	8005690 <HAL_UART_IRQHandler+0x514>
      return;
 800568e:	bf00      	nop
  }
}
 8005690:	37e8      	adds	r7, #232	; 0xe8
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop

08005698 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80056a0:	bf00      	nop
 80056a2:	370c      	adds	r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	460b      	mov	r3, r1
 80056de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80056e0:	bf00      	nop
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b090      	sub	sp, #64	; 0x40
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	603b      	str	r3, [r7, #0]
 80056f8:	4613      	mov	r3, r2
 80056fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056fc:	e050      	b.n	80057a0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005704:	d04c      	beq.n	80057a0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005706:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005708:	2b00      	cmp	r3, #0
 800570a:	d007      	beq.n	800571c <UART_WaitOnFlagUntilTimeout+0x30>
 800570c:	f7fb fdc8 	bl	80012a0 <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005718:	429a      	cmp	r2, r3
 800571a:	d241      	bcs.n	80057a0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	330c      	adds	r3, #12
 8005722:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005726:	e853 3f00 	ldrex	r3, [r3]
 800572a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800572c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005732:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	330c      	adds	r3, #12
 800573a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800573c:	637a      	str	r2, [r7, #52]	; 0x34
 800573e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005740:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005742:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005744:	e841 2300 	strex	r3, r2, [r1]
 8005748:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800574a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800574c:	2b00      	cmp	r3, #0
 800574e:	d1e5      	bne.n	800571c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	3314      	adds	r3, #20
 8005756:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	e853 3f00 	ldrex	r3, [r3]
 800575e:	613b      	str	r3, [r7, #16]
   return(result);
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	f023 0301 	bic.w	r3, r3, #1
 8005766:	63bb      	str	r3, [r7, #56]	; 0x38
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	3314      	adds	r3, #20
 800576e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005770:	623a      	str	r2, [r7, #32]
 8005772:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005774:	69f9      	ldr	r1, [r7, #28]
 8005776:	6a3a      	ldr	r2, [r7, #32]
 8005778:	e841 2300 	strex	r3, r2, [r1]
 800577c:	61bb      	str	r3, [r7, #24]
   return(result);
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d1e5      	bne.n	8005750 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2220      	movs	r2, #32
 8005788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2220      	movs	r2, #32
 8005790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	e00f      	b.n	80057c0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	4013      	ands	r3, r2
 80057aa:	68ba      	ldr	r2, [r7, #8]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	bf0c      	ite	eq
 80057b0:	2301      	moveq	r3, #1
 80057b2:	2300      	movne	r3, #0
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	461a      	mov	r2, r3
 80057b8:	79fb      	ldrb	r3, [r7, #7]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d09f      	beq.n	80056fe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3740      	adds	r7, #64	; 0x40
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b095      	sub	sp, #84	; 0x54
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	330c      	adds	r3, #12
 80057d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057da:	e853 3f00 	ldrex	r3, [r3]
 80057de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80057e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	330c      	adds	r3, #12
 80057ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80057f0:	643a      	str	r2, [r7, #64]	; 0x40
 80057f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80057f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80057f8:	e841 2300 	strex	r3, r2, [r1]
 80057fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005800:	2b00      	cmp	r3, #0
 8005802:	d1e5      	bne.n	80057d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	3314      	adds	r3, #20
 800580a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580c:	6a3b      	ldr	r3, [r7, #32]
 800580e:	e853 3f00 	ldrex	r3, [r3]
 8005812:	61fb      	str	r3, [r7, #28]
   return(result);
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	f023 0301 	bic.w	r3, r3, #1
 800581a:	64bb      	str	r3, [r7, #72]	; 0x48
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	3314      	adds	r3, #20
 8005822:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005824:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005826:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005828:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800582a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800582c:	e841 2300 	strex	r3, r2, [r1]
 8005830:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005834:	2b00      	cmp	r3, #0
 8005836:	d1e5      	bne.n	8005804 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800583c:	2b01      	cmp	r3, #1
 800583e:	d119      	bne.n	8005874 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	330c      	adds	r3, #12
 8005846:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	e853 3f00 	ldrex	r3, [r3]
 800584e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	f023 0310 	bic.w	r3, r3, #16
 8005856:	647b      	str	r3, [r7, #68]	; 0x44
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	330c      	adds	r3, #12
 800585e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005860:	61ba      	str	r2, [r7, #24]
 8005862:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005864:	6979      	ldr	r1, [r7, #20]
 8005866:	69ba      	ldr	r2, [r7, #24]
 8005868:	e841 2300 	strex	r3, r2, [r1]
 800586c:	613b      	str	r3, [r7, #16]
   return(result);
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d1e5      	bne.n	8005840 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2220      	movs	r2, #32
 8005878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005882:	bf00      	nop
 8005884:	3754      	adds	r7, #84	; 0x54
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr

0800588e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800588e:	b580      	push	{r7, lr}
 8005890:	b084      	sub	sp, #16
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2200      	movs	r2, #0
 80058a6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f7ff ff09 	bl	80056c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058ae:	bf00      	nop
 80058b0:	3710      	adds	r7, #16
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}

080058b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80058b6:	b480      	push	{r7}
 80058b8:	b085      	sub	sp, #20
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	2b21      	cmp	r3, #33	; 0x21
 80058c8:	d13e      	bne.n	8005948 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058d2:	d114      	bne.n	80058fe <UART_Transmit_IT+0x48>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	691b      	ldr	r3, [r3, #16]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d110      	bne.n	80058fe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a1b      	ldr	r3, [r3, #32]
 80058e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	881b      	ldrh	r3, [r3, #0]
 80058e6:	461a      	mov	r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a1b      	ldr	r3, [r3, #32]
 80058f6:	1c9a      	adds	r2, r3, #2
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	621a      	str	r2, [r3, #32]
 80058fc:	e008      	b.n	8005910 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a1b      	ldr	r3, [r3, #32]
 8005902:	1c59      	adds	r1, r3, #1
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	6211      	str	r1, [r2, #32]
 8005908:	781a      	ldrb	r2, [r3, #0]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005914:	b29b      	uxth	r3, r3
 8005916:	3b01      	subs	r3, #1
 8005918:	b29b      	uxth	r3, r3
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	4619      	mov	r1, r3
 800591e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005920:	2b00      	cmp	r3, #0
 8005922:	d10f      	bne.n	8005944 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68da      	ldr	r2, [r3, #12]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005932:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68da      	ldr	r2, [r3, #12]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005942:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005944:	2300      	movs	r3, #0
 8005946:	e000      	b.n	800594a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005948:	2302      	movs	r3, #2
  }
}
 800594a:	4618      	mov	r0, r3
 800594c:	3714      	adds	r7, #20
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr

08005956 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005956:	b580      	push	{r7, lr}
 8005958:	b082      	sub	sp, #8
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68da      	ldr	r2, [r3, #12]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800596c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2220      	movs	r2, #32
 8005972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f7ff fe8e 	bl	8005698 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3708      	adds	r7, #8
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}

08005986 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005986:	b580      	push	{r7, lr}
 8005988:	b08c      	sub	sp, #48	; 0x30
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005994:	b2db      	uxtb	r3, r3
 8005996:	2b22      	cmp	r3, #34	; 0x22
 8005998:	f040 80ab 	bne.w	8005af2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059a4:	d117      	bne.n	80059d6 <UART_Receive_IT+0x50>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d113      	bne.n	80059d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80059ae:	2300      	movs	r3, #0
 80059b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	b29b      	uxth	r3, r3
 80059c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059c4:	b29a      	uxth	r2, r3
 80059c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ce:	1c9a      	adds	r2, r3, #2
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	629a      	str	r2, [r3, #40]	; 0x28
 80059d4:	e026      	b.n	8005a24 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059da:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80059dc:	2300      	movs	r3, #0
 80059de:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059e8:	d007      	beq.n	80059fa <UART_Receive_IT+0x74>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d10a      	bne.n	8005a08 <UART_Receive_IT+0x82>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d106      	bne.n	8005a08 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	b2da      	uxtb	r2, r3
 8005a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a04:	701a      	strb	r2, [r3, #0]
 8005a06:	e008      	b.n	8005a1a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a14:	b2da      	uxtb	r2, r3
 8005a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a18:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1e:	1c5a      	adds	r2, r3, #1
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	4619      	mov	r1, r3
 8005a32:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d15a      	bne.n	8005aee <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68da      	ldr	r2, [r3, #12]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f022 0220 	bic.w	r2, r2, #32
 8005a46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68da      	ldr	r2, [r3, #12]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	695a      	ldr	r2, [r3, #20]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f022 0201 	bic.w	r2, r2, #1
 8005a66:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2220      	movs	r2, #32
 8005a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d135      	bne.n	8005ae4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	330c      	adds	r3, #12
 8005a84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	e853 3f00 	ldrex	r3, [r3]
 8005a8c:	613b      	str	r3, [r7, #16]
   return(result);
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	f023 0310 	bic.w	r3, r3, #16
 8005a94:	627b      	str	r3, [r7, #36]	; 0x24
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	330c      	adds	r3, #12
 8005a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a9e:	623a      	str	r2, [r7, #32]
 8005aa0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa2:	69f9      	ldr	r1, [r7, #28]
 8005aa4:	6a3a      	ldr	r2, [r7, #32]
 8005aa6:	e841 2300 	strex	r3, r2, [r1]
 8005aaa:	61bb      	str	r3, [r7, #24]
   return(result);
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d1e5      	bne.n	8005a7e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 0310 	and.w	r3, r3, #16
 8005abc:	2b10      	cmp	r3, #16
 8005abe:	d10a      	bne.n	8005ad6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	60fb      	str	r3, [r7, #12]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	60fb      	str	r3, [r7, #12]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	60fb      	str	r3, [r7, #12]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ada:	4619      	mov	r1, r3
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f7ff fdf9 	bl	80056d4 <HAL_UARTEx_RxEventCallback>
 8005ae2:	e002      	b.n	8005aea <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f7ff fde1 	bl	80056ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005aea:	2300      	movs	r3, #0
 8005aec:	e002      	b.n	8005af4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005aee:	2300      	movs	r3, #0
 8005af0:	e000      	b.n	8005af4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005af2:	2302      	movs	r3, #2
  }
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3730      	adds	r7, #48	; 0x30
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005afc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b00:	b0c0      	sub	sp, #256	; 0x100
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	691b      	ldr	r3, [r3, #16]
 8005b10:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b18:	68d9      	ldr	r1, [r3, #12]
 8005b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	ea40 0301 	orr.w	r3, r0, r1
 8005b24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b2a:	689a      	ldr	r2, [r3, #8]
 8005b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	431a      	orrs	r2, r3
 8005b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b38:	695b      	ldr	r3, [r3, #20]
 8005b3a:	431a      	orrs	r2, r3
 8005b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b40:	69db      	ldr	r3, [r3, #28]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005b54:	f021 010c 	bic.w	r1, r1, #12
 8005b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005b62:	430b      	orrs	r3, r1
 8005b64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	695b      	ldr	r3, [r3, #20]
 8005b6e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b76:	6999      	ldr	r1, [r3, #24]
 8005b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	ea40 0301 	orr.w	r3, r0, r1
 8005b82:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	4b8f      	ldr	r3, [pc, #572]	; (8005dc8 <UART_SetConfig+0x2cc>)
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d005      	beq.n	8005b9c <UART_SetConfig+0xa0>
 8005b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	4b8d      	ldr	r3, [pc, #564]	; (8005dcc <UART_SetConfig+0x2d0>)
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d104      	bne.n	8005ba6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b9c:	f7fe fb64 	bl	8004268 <HAL_RCC_GetPCLK2Freq>
 8005ba0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005ba4:	e003      	b.n	8005bae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ba6:	f7fe fb4b 	bl	8004240 <HAL_RCC_GetPCLK1Freq>
 8005baa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bb2:	69db      	ldr	r3, [r3, #28]
 8005bb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bb8:	f040 810c 	bne.w	8005dd4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005bbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005bc6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005bca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005bce:	4622      	mov	r2, r4
 8005bd0:	462b      	mov	r3, r5
 8005bd2:	1891      	adds	r1, r2, r2
 8005bd4:	65b9      	str	r1, [r7, #88]	; 0x58
 8005bd6:	415b      	adcs	r3, r3
 8005bd8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bda:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005bde:	4621      	mov	r1, r4
 8005be0:	eb12 0801 	adds.w	r8, r2, r1
 8005be4:	4629      	mov	r1, r5
 8005be6:	eb43 0901 	adc.w	r9, r3, r1
 8005bea:	f04f 0200 	mov.w	r2, #0
 8005bee:	f04f 0300 	mov.w	r3, #0
 8005bf2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005bf6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005bfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005bfe:	4690      	mov	r8, r2
 8005c00:	4699      	mov	r9, r3
 8005c02:	4623      	mov	r3, r4
 8005c04:	eb18 0303 	adds.w	r3, r8, r3
 8005c08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005c0c:	462b      	mov	r3, r5
 8005c0e:	eb49 0303 	adc.w	r3, r9, r3
 8005c12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005c22:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005c26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	18db      	adds	r3, r3, r3
 8005c2e:	653b      	str	r3, [r7, #80]	; 0x50
 8005c30:	4613      	mov	r3, r2
 8005c32:	eb42 0303 	adc.w	r3, r2, r3
 8005c36:	657b      	str	r3, [r7, #84]	; 0x54
 8005c38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005c3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005c40:	f7fa fb16 	bl	8000270 <__aeabi_uldivmod>
 8005c44:	4602      	mov	r2, r0
 8005c46:	460b      	mov	r3, r1
 8005c48:	4b61      	ldr	r3, [pc, #388]	; (8005dd0 <UART_SetConfig+0x2d4>)
 8005c4a:	fba3 2302 	umull	r2, r3, r3, r2
 8005c4e:	095b      	lsrs	r3, r3, #5
 8005c50:	011c      	lsls	r4, r3, #4
 8005c52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c56:	2200      	movs	r2, #0
 8005c58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c5c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005c60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005c64:	4642      	mov	r2, r8
 8005c66:	464b      	mov	r3, r9
 8005c68:	1891      	adds	r1, r2, r2
 8005c6a:	64b9      	str	r1, [r7, #72]	; 0x48
 8005c6c:	415b      	adcs	r3, r3
 8005c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005c74:	4641      	mov	r1, r8
 8005c76:	eb12 0a01 	adds.w	sl, r2, r1
 8005c7a:	4649      	mov	r1, r9
 8005c7c:	eb43 0b01 	adc.w	fp, r3, r1
 8005c80:	f04f 0200 	mov.w	r2, #0
 8005c84:	f04f 0300 	mov.w	r3, #0
 8005c88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005c8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005c90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c94:	4692      	mov	sl, r2
 8005c96:	469b      	mov	fp, r3
 8005c98:	4643      	mov	r3, r8
 8005c9a:	eb1a 0303 	adds.w	r3, sl, r3
 8005c9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ca2:	464b      	mov	r3, r9
 8005ca4:	eb4b 0303 	adc.w	r3, fp, r3
 8005ca8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005cb8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005cbc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	18db      	adds	r3, r3, r3
 8005cc4:	643b      	str	r3, [r7, #64]	; 0x40
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	eb42 0303 	adc.w	r3, r2, r3
 8005ccc:	647b      	str	r3, [r7, #68]	; 0x44
 8005cce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005cd2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005cd6:	f7fa facb 	bl	8000270 <__aeabi_uldivmod>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	460b      	mov	r3, r1
 8005cde:	4611      	mov	r1, r2
 8005ce0:	4b3b      	ldr	r3, [pc, #236]	; (8005dd0 <UART_SetConfig+0x2d4>)
 8005ce2:	fba3 2301 	umull	r2, r3, r3, r1
 8005ce6:	095b      	lsrs	r3, r3, #5
 8005ce8:	2264      	movs	r2, #100	; 0x64
 8005cea:	fb02 f303 	mul.w	r3, r2, r3
 8005cee:	1acb      	subs	r3, r1, r3
 8005cf0:	00db      	lsls	r3, r3, #3
 8005cf2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005cf6:	4b36      	ldr	r3, [pc, #216]	; (8005dd0 <UART_SetConfig+0x2d4>)
 8005cf8:	fba3 2302 	umull	r2, r3, r3, r2
 8005cfc:	095b      	lsrs	r3, r3, #5
 8005cfe:	005b      	lsls	r3, r3, #1
 8005d00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005d04:	441c      	add	r4, r3
 8005d06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d10:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005d14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005d18:	4642      	mov	r2, r8
 8005d1a:	464b      	mov	r3, r9
 8005d1c:	1891      	adds	r1, r2, r2
 8005d1e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005d20:	415b      	adcs	r3, r3
 8005d22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005d28:	4641      	mov	r1, r8
 8005d2a:	1851      	adds	r1, r2, r1
 8005d2c:	6339      	str	r1, [r7, #48]	; 0x30
 8005d2e:	4649      	mov	r1, r9
 8005d30:	414b      	adcs	r3, r1
 8005d32:	637b      	str	r3, [r7, #52]	; 0x34
 8005d34:	f04f 0200 	mov.w	r2, #0
 8005d38:	f04f 0300 	mov.w	r3, #0
 8005d3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005d40:	4659      	mov	r1, fp
 8005d42:	00cb      	lsls	r3, r1, #3
 8005d44:	4651      	mov	r1, sl
 8005d46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d4a:	4651      	mov	r1, sl
 8005d4c:	00ca      	lsls	r2, r1, #3
 8005d4e:	4610      	mov	r0, r2
 8005d50:	4619      	mov	r1, r3
 8005d52:	4603      	mov	r3, r0
 8005d54:	4642      	mov	r2, r8
 8005d56:	189b      	adds	r3, r3, r2
 8005d58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d5c:	464b      	mov	r3, r9
 8005d5e:	460a      	mov	r2, r1
 8005d60:	eb42 0303 	adc.w	r3, r2, r3
 8005d64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005d74:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005d78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005d7c:	460b      	mov	r3, r1
 8005d7e:	18db      	adds	r3, r3, r3
 8005d80:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d82:	4613      	mov	r3, r2
 8005d84:	eb42 0303 	adc.w	r3, r2, r3
 8005d88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005d92:	f7fa fa6d 	bl	8000270 <__aeabi_uldivmod>
 8005d96:	4602      	mov	r2, r0
 8005d98:	460b      	mov	r3, r1
 8005d9a:	4b0d      	ldr	r3, [pc, #52]	; (8005dd0 <UART_SetConfig+0x2d4>)
 8005d9c:	fba3 1302 	umull	r1, r3, r3, r2
 8005da0:	095b      	lsrs	r3, r3, #5
 8005da2:	2164      	movs	r1, #100	; 0x64
 8005da4:	fb01 f303 	mul.w	r3, r1, r3
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	00db      	lsls	r3, r3, #3
 8005dac:	3332      	adds	r3, #50	; 0x32
 8005dae:	4a08      	ldr	r2, [pc, #32]	; (8005dd0 <UART_SetConfig+0x2d4>)
 8005db0:	fba2 2303 	umull	r2, r3, r2, r3
 8005db4:	095b      	lsrs	r3, r3, #5
 8005db6:	f003 0207 	and.w	r2, r3, #7
 8005dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4422      	add	r2, r4
 8005dc2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005dc4:	e105      	b.n	8005fd2 <UART_SetConfig+0x4d6>
 8005dc6:	bf00      	nop
 8005dc8:	40011000 	.word	0x40011000
 8005dcc:	40011400 	.word	0x40011400
 8005dd0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005dd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005dde:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005de2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005de6:	4642      	mov	r2, r8
 8005de8:	464b      	mov	r3, r9
 8005dea:	1891      	adds	r1, r2, r2
 8005dec:	6239      	str	r1, [r7, #32]
 8005dee:	415b      	adcs	r3, r3
 8005df0:	627b      	str	r3, [r7, #36]	; 0x24
 8005df2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005df6:	4641      	mov	r1, r8
 8005df8:	1854      	adds	r4, r2, r1
 8005dfa:	4649      	mov	r1, r9
 8005dfc:	eb43 0501 	adc.w	r5, r3, r1
 8005e00:	f04f 0200 	mov.w	r2, #0
 8005e04:	f04f 0300 	mov.w	r3, #0
 8005e08:	00eb      	lsls	r3, r5, #3
 8005e0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e0e:	00e2      	lsls	r2, r4, #3
 8005e10:	4614      	mov	r4, r2
 8005e12:	461d      	mov	r5, r3
 8005e14:	4643      	mov	r3, r8
 8005e16:	18e3      	adds	r3, r4, r3
 8005e18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005e1c:	464b      	mov	r3, r9
 8005e1e:	eb45 0303 	adc.w	r3, r5, r3
 8005e22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e32:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e36:	f04f 0200 	mov.w	r2, #0
 8005e3a:	f04f 0300 	mov.w	r3, #0
 8005e3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005e42:	4629      	mov	r1, r5
 8005e44:	008b      	lsls	r3, r1, #2
 8005e46:	4621      	mov	r1, r4
 8005e48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e4c:	4621      	mov	r1, r4
 8005e4e:	008a      	lsls	r2, r1, #2
 8005e50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005e54:	f7fa fa0c 	bl	8000270 <__aeabi_uldivmod>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	4b60      	ldr	r3, [pc, #384]	; (8005fe0 <UART_SetConfig+0x4e4>)
 8005e5e:	fba3 2302 	umull	r2, r3, r3, r2
 8005e62:	095b      	lsrs	r3, r3, #5
 8005e64:	011c      	lsls	r4, r3, #4
 8005e66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005e70:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005e74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005e78:	4642      	mov	r2, r8
 8005e7a:	464b      	mov	r3, r9
 8005e7c:	1891      	adds	r1, r2, r2
 8005e7e:	61b9      	str	r1, [r7, #24]
 8005e80:	415b      	adcs	r3, r3
 8005e82:	61fb      	str	r3, [r7, #28]
 8005e84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e88:	4641      	mov	r1, r8
 8005e8a:	1851      	adds	r1, r2, r1
 8005e8c:	6139      	str	r1, [r7, #16]
 8005e8e:	4649      	mov	r1, r9
 8005e90:	414b      	adcs	r3, r1
 8005e92:	617b      	str	r3, [r7, #20]
 8005e94:	f04f 0200 	mov.w	r2, #0
 8005e98:	f04f 0300 	mov.w	r3, #0
 8005e9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ea0:	4659      	mov	r1, fp
 8005ea2:	00cb      	lsls	r3, r1, #3
 8005ea4:	4651      	mov	r1, sl
 8005ea6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005eaa:	4651      	mov	r1, sl
 8005eac:	00ca      	lsls	r2, r1, #3
 8005eae:	4610      	mov	r0, r2
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	4642      	mov	r2, r8
 8005eb6:	189b      	adds	r3, r3, r2
 8005eb8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ebc:	464b      	mov	r3, r9
 8005ebe:	460a      	mov	r2, r1
 8005ec0:	eb42 0303 	adc.w	r3, r2, r3
 8005ec4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ed2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005ed4:	f04f 0200 	mov.w	r2, #0
 8005ed8:	f04f 0300 	mov.w	r3, #0
 8005edc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005ee0:	4649      	mov	r1, r9
 8005ee2:	008b      	lsls	r3, r1, #2
 8005ee4:	4641      	mov	r1, r8
 8005ee6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005eea:	4641      	mov	r1, r8
 8005eec:	008a      	lsls	r2, r1, #2
 8005eee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005ef2:	f7fa f9bd 	bl	8000270 <__aeabi_uldivmod>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	460b      	mov	r3, r1
 8005efa:	4b39      	ldr	r3, [pc, #228]	; (8005fe0 <UART_SetConfig+0x4e4>)
 8005efc:	fba3 1302 	umull	r1, r3, r3, r2
 8005f00:	095b      	lsrs	r3, r3, #5
 8005f02:	2164      	movs	r1, #100	; 0x64
 8005f04:	fb01 f303 	mul.w	r3, r1, r3
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	011b      	lsls	r3, r3, #4
 8005f0c:	3332      	adds	r3, #50	; 0x32
 8005f0e:	4a34      	ldr	r2, [pc, #208]	; (8005fe0 <UART_SetConfig+0x4e4>)
 8005f10:	fba2 2303 	umull	r2, r3, r2, r3
 8005f14:	095b      	lsrs	r3, r3, #5
 8005f16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f1a:	441c      	add	r4, r3
 8005f1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f20:	2200      	movs	r2, #0
 8005f22:	673b      	str	r3, [r7, #112]	; 0x70
 8005f24:	677a      	str	r2, [r7, #116]	; 0x74
 8005f26:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005f2a:	4642      	mov	r2, r8
 8005f2c:	464b      	mov	r3, r9
 8005f2e:	1891      	adds	r1, r2, r2
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	415b      	adcs	r3, r3
 8005f34:	60fb      	str	r3, [r7, #12]
 8005f36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f3a:	4641      	mov	r1, r8
 8005f3c:	1851      	adds	r1, r2, r1
 8005f3e:	6039      	str	r1, [r7, #0]
 8005f40:	4649      	mov	r1, r9
 8005f42:	414b      	adcs	r3, r1
 8005f44:	607b      	str	r3, [r7, #4]
 8005f46:	f04f 0200 	mov.w	r2, #0
 8005f4a:	f04f 0300 	mov.w	r3, #0
 8005f4e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005f52:	4659      	mov	r1, fp
 8005f54:	00cb      	lsls	r3, r1, #3
 8005f56:	4651      	mov	r1, sl
 8005f58:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f5c:	4651      	mov	r1, sl
 8005f5e:	00ca      	lsls	r2, r1, #3
 8005f60:	4610      	mov	r0, r2
 8005f62:	4619      	mov	r1, r3
 8005f64:	4603      	mov	r3, r0
 8005f66:	4642      	mov	r2, r8
 8005f68:	189b      	adds	r3, r3, r2
 8005f6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f6c:	464b      	mov	r3, r9
 8005f6e:	460a      	mov	r2, r1
 8005f70:	eb42 0303 	adc.w	r3, r2, r3
 8005f74:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	663b      	str	r3, [r7, #96]	; 0x60
 8005f80:	667a      	str	r2, [r7, #100]	; 0x64
 8005f82:	f04f 0200 	mov.w	r2, #0
 8005f86:	f04f 0300 	mov.w	r3, #0
 8005f8a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005f8e:	4649      	mov	r1, r9
 8005f90:	008b      	lsls	r3, r1, #2
 8005f92:	4641      	mov	r1, r8
 8005f94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f98:	4641      	mov	r1, r8
 8005f9a:	008a      	lsls	r2, r1, #2
 8005f9c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005fa0:	f7fa f966 	bl	8000270 <__aeabi_uldivmod>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	4b0d      	ldr	r3, [pc, #52]	; (8005fe0 <UART_SetConfig+0x4e4>)
 8005faa:	fba3 1302 	umull	r1, r3, r3, r2
 8005fae:	095b      	lsrs	r3, r3, #5
 8005fb0:	2164      	movs	r1, #100	; 0x64
 8005fb2:	fb01 f303 	mul.w	r3, r1, r3
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	011b      	lsls	r3, r3, #4
 8005fba:	3332      	adds	r3, #50	; 0x32
 8005fbc:	4a08      	ldr	r2, [pc, #32]	; (8005fe0 <UART_SetConfig+0x4e4>)
 8005fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8005fc2:	095b      	lsrs	r3, r3, #5
 8005fc4:	f003 020f 	and.w	r2, r3, #15
 8005fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4422      	add	r2, r4
 8005fd0:	609a      	str	r2, [r3, #8]
}
 8005fd2:	bf00      	nop
 8005fd4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fde:	bf00      	nop
 8005fe0:	51eb851f 	.word	0x51eb851f

08005fe4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005fe4:	b084      	sub	sp, #16
 8005fe6:	b580      	push	{r7, lr}
 8005fe8:	b084      	sub	sp, #16
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
 8005fee:	f107 001c 	add.w	r0, r7, #28
 8005ff2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d122      	bne.n	8006042 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006000:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006010:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006024:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006026:	2b01      	cmp	r3, #1
 8006028:	d105      	bne.n	8006036 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f9c0 	bl	80063bc <USB_CoreReset>
 800603c:	4603      	mov	r3, r0
 800603e:	73fb      	strb	r3, [r7, #15]
 8006040:	e01a      	b.n	8006078 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 f9b4 	bl	80063bc <USB_CoreReset>
 8006054:	4603      	mov	r3, r0
 8006056:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006058:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800605a:	2b00      	cmp	r3, #0
 800605c:	d106      	bne.n	800606c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006062:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	639a      	str	r2, [r3, #56]	; 0x38
 800606a:	e005      	b.n	8006078 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006070:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800607a:	2b01      	cmp	r3, #1
 800607c:	d10b      	bne.n	8006096 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	f043 0206 	orr.w	r2, r3, #6
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	f043 0220 	orr.w	r2, r3, #32
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006096:	7bfb      	ldrb	r3, [r7, #15]
}
 8006098:	4618      	mov	r0, r3
 800609a:	3710      	adds	r7, #16
 800609c:	46bd      	mov	sp, r7
 800609e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80060a2:	b004      	add	sp, #16
 80060a4:	4770      	bx	lr

080060a6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060a6:	b480      	push	{r7}
 80060a8:	b083      	sub	sp, #12
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	f043 0201 	orr.w	r2, r3, #1
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80060ba:	2300      	movs	r3, #0
}
 80060bc:	4618      	mov	r0, r3
 80060be:	370c      	adds	r7, #12
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	f023 0201 	bic.w	r2, r3, #1
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	370c      	adds	r7, #12
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr

080060ea <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80060ea:	b580      	push	{r7, lr}
 80060ec:	b084      	sub	sp, #16
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
 80060f2:	460b      	mov	r3, r1
 80060f4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80060f6:	2300      	movs	r3, #0
 80060f8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006106:	78fb      	ldrb	r3, [r7, #3]
 8006108:	2b01      	cmp	r3, #1
 800610a:	d115      	bne.n	8006138 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006118:	2001      	movs	r0, #1
 800611a:	f7fb f8cd 	bl	80012b8 <HAL_Delay>
      ms++;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	3301      	adds	r3, #1
 8006122:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 f93a 	bl	800639e <USB_GetMode>
 800612a:	4603      	mov	r3, r0
 800612c:	2b01      	cmp	r3, #1
 800612e:	d01e      	beq.n	800616e <USB_SetCurrentMode+0x84>
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2b31      	cmp	r3, #49	; 0x31
 8006134:	d9f0      	bls.n	8006118 <USB_SetCurrentMode+0x2e>
 8006136:	e01a      	b.n	800616e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006138:	78fb      	ldrb	r3, [r7, #3]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d115      	bne.n	800616a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800614a:	2001      	movs	r0, #1
 800614c:	f7fb f8b4 	bl	80012b8 <HAL_Delay>
      ms++;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	3301      	adds	r3, #1
 8006154:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 f921 	bl	800639e <USB_GetMode>
 800615c:	4603      	mov	r3, r0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d005      	beq.n	800616e <USB_SetCurrentMode+0x84>
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2b31      	cmp	r3, #49	; 0x31
 8006166:	d9f0      	bls.n	800614a <USB_SetCurrentMode+0x60>
 8006168:	e001      	b.n	800616e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e005      	b.n	800617a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2b32      	cmp	r3, #50	; 0x32
 8006172:	d101      	bne.n	8006178 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e000      	b.n	800617a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006178:	2300      	movs	r3, #0
}
 800617a:	4618      	mov	r0, r3
 800617c:	3710      	adds	r7, #16
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
	...

08006184 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006184:	b480      	push	{r7}
 8006186:	b085      	sub	sp, #20
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800618e:	2300      	movs	r3, #0
 8006190:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	3301      	adds	r3, #1
 8006196:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	4a13      	ldr	r2, [pc, #76]	; (80061e8 <USB_FlushTxFifo+0x64>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d901      	bls.n	80061a4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80061a0:	2303      	movs	r3, #3
 80061a2:	e01b      	b.n	80061dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	daf2      	bge.n	8006192 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80061ac:	2300      	movs	r3, #0
 80061ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	019b      	lsls	r3, r3, #6
 80061b4:	f043 0220 	orr.w	r2, r3, #32
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	3301      	adds	r3, #1
 80061c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	4a08      	ldr	r2, [pc, #32]	; (80061e8 <USB_FlushTxFifo+0x64>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d901      	bls.n	80061ce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	e006      	b.n	80061dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	f003 0320 	and.w	r3, r3, #32
 80061d6:	2b20      	cmp	r3, #32
 80061d8:	d0f0      	beq.n	80061bc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3714      	adds	r7, #20
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr
 80061e8:	00030d40 	.word	0x00030d40

080061ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b085      	sub	sp, #20
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80061f4:	2300      	movs	r3, #0
 80061f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	3301      	adds	r3, #1
 80061fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	4a11      	ldr	r2, [pc, #68]	; (8006248 <USB_FlushRxFifo+0x5c>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d901      	bls.n	800620a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006206:	2303      	movs	r3, #3
 8006208:	e018      	b.n	800623c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	2b00      	cmp	r3, #0
 8006210:	daf2      	bge.n	80061f8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006212:	2300      	movs	r3, #0
 8006214:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2210      	movs	r2, #16
 800621a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	3301      	adds	r3, #1
 8006220:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	4a08      	ldr	r2, [pc, #32]	; (8006248 <USB_FlushRxFifo+0x5c>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d901      	bls.n	800622e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e006      	b.n	800623c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	f003 0310 	and.w	r3, r3, #16
 8006236:	2b10      	cmp	r3, #16
 8006238:	d0f0      	beq.n	800621c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800623a:	2300      	movs	r3, #0
}
 800623c:	4618      	mov	r0, r3
 800623e:	3714      	adds	r7, #20
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr
 8006248:	00030d40 	.word	0x00030d40

0800624c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800624c:	b480      	push	{r7}
 800624e:	b089      	sub	sp, #36	; 0x24
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	4611      	mov	r1, r2
 8006258:	461a      	mov	r2, r3
 800625a:	460b      	mov	r3, r1
 800625c:	71fb      	strb	r3, [r7, #7]
 800625e:	4613      	mov	r3, r2
 8006260:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800626a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800626e:	2b00      	cmp	r3, #0
 8006270:	d123      	bne.n	80062ba <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006272:	88bb      	ldrh	r3, [r7, #4]
 8006274:	3303      	adds	r3, #3
 8006276:	089b      	lsrs	r3, r3, #2
 8006278:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800627a:	2300      	movs	r3, #0
 800627c:	61bb      	str	r3, [r7, #24]
 800627e:	e018      	b.n	80062b2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006280:	79fb      	ldrb	r3, [r7, #7]
 8006282:	031a      	lsls	r2, r3, #12
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	4413      	add	r3, r2
 8006288:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800628c:	461a      	mov	r2, r3
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	3301      	adds	r3, #1
 8006298:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	3301      	adds	r3, #1
 800629e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	3301      	adds	r3, #1
 80062a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	3301      	adds	r3, #1
 80062aa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80062ac:	69bb      	ldr	r3, [r7, #24]
 80062ae:	3301      	adds	r3, #1
 80062b0:	61bb      	str	r3, [r7, #24]
 80062b2:	69ba      	ldr	r2, [r7, #24]
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d3e2      	bcc.n	8006280 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80062ba:	2300      	movs	r3, #0
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3724      	adds	r7, #36	; 0x24
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b08b      	sub	sp, #44	; 0x2c
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	4613      	mov	r3, r2
 80062d4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80062de:	88fb      	ldrh	r3, [r7, #6]
 80062e0:	089b      	lsrs	r3, r3, #2
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80062e6:	88fb      	ldrh	r3, [r7, #6]
 80062e8:	f003 0303 	and.w	r3, r3, #3
 80062ec:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80062ee:	2300      	movs	r3, #0
 80062f0:	623b      	str	r3, [r7, #32]
 80062f2:	e014      	b.n	800631e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fe:	601a      	str	r2, [r3, #0]
    pDest++;
 8006300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006302:	3301      	adds	r3, #1
 8006304:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006308:	3301      	adds	r3, #1
 800630a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800630c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630e:	3301      	adds	r3, #1
 8006310:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006314:	3301      	adds	r3, #1
 8006316:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006318:	6a3b      	ldr	r3, [r7, #32]
 800631a:	3301      	adds	r3, #1
 800631c:	623b      	str	r3, [r7, #32]
 800631e:	6a3a      	ldr	r2, [r7, #32]
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	429a      	cmp	r2, r3
 8006324:	d3e6      	bcc.n	80062f4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006326:	8bfb      	ldrh	r3, [r7, #30]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d01e      	beq.n	800636a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800632c:	2300      	movs	r3, #0
 800632e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006336:	461a      	mov	r2, r3
 8006338:	f107 0310 	add.w	r3, r7, #16
 800633c:	6812      	ldr	r2, [r2, #0]
 800633e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006340:	693a      	ldr	r2, [r7, #16]
 8006342:	6a3b      	ldr	r3, [r7, #32]
 8006344:	b2db      	uxtb	r3, r3
 8006346:	00db      	lsls	r3, r3, #3
 8006348:	fa22 f303 	lsr.w	r3, r2, r3
 800634c:	b2da      	uxtb	r2, r3
 800634e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006350:	701a      	strb	r2, [r3, #0]
      i++;
 8006352:	6a3b      	ldr	r3, [r7, #32]
 8006354:	3301      	adds	r3, #1
 8006356:	623b      	str	r3, [r7, #32]
      pDest++;
 8006358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635a:	3301      	adds	r3, #1
 800635c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800635e:	8bfb      	ldrh	r3, [r7, #30]
 8006360:	3b01      	subs	r3, #1
 8006362:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006364:	8bfb      	ldrh	r3, [r7, #30]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d1ea      	bne.n	8006340 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800636a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800636c:	4618      	mov	r0, r3
 800636e:	372c      	adds	r7, #44	; 0x2c
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006378:	b480      	push	{r7}
 800637a:	b085      	sub	sp, #20
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	695b      	ldr	r3, [r3, #20]
 8006384:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	699b      	ldr	r3, [r3, #24]
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	4013      	ands	r3, r2
 800638e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006390:	68fb      	ldr	r3, [r7, #12]
}
 8006392:	4618      	mov	r0, r3
 8006394:	3714      	adds	r7, #20
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr

0800639e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800639e:	b480      	push	{r7}
 80063a0:	b083      	sub	sp, #12
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	695b      	ldr	r3, [r3, #20]
 80063aa:	f003 0301 	and.w	r3, r3, #1
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	370c      	adds	r7, #12
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
	...

080063bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80063bc:	b480      	push	{r7}
 80063be:	b085      	sub	sp, #20
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80063c4:	2300      	movs	r3, #0
 80063c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	3301      	adds	r3, #1
 80063cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	4a13      	ldr	r2, [pc, #76]	; (8006420 <USB_CoreReset+0x64>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d901      	bls.n	80063da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80063d6:	2303      	movs	r3, #3
 80063d8:	e01b      	b.n	8006412 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	daf2      	bge.n	80063c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80063e2:	2300      	movs	r3, #0
 80063e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	f043 0201 	orr.w	r2, r3, #1
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	3301      	adds	r3, #1
 80063f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	4a09      	ldr	r2, [pc, #36]	; (8006420 <USB_CoreReset+0x64>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d901      	bls.n	8006404 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006400:	2303      	movs	r3, #3
 8006402:	e006      	b.n	8006412 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	f003 0301 	and.w	r3, r3, #1
 800640c:	2b01      	cmp	r3, #1
 800640e:	d0f0      	beq.n	80063f2 <USB_CoreReset+0x36>

  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3714      	adds	r7, #20
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	00030d40 	.word	0x00030d40

08006424 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006424:	b084      	sub	sp, #16
 8006426:	b580      	push	{r7, lr}
 8006428:	b086      	sub	sp, #24
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
 800642e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006432:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006436:	2300      	movs	r3, #0
 8006438:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006444:	461a      	mov	r2, r3
 8006446:	2300      	movs	r3, #0
 8006448:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800644e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800645a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006466:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006476:	2b00      	cmp	r3, #0
 8006478:	d018      	beq.n	80064ac <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800647a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800647c:	2b01      	cmp	r3, #1
 800647e:	d10a      	bne.n	8006496 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800648e:	f043 0304 	orr.w	r3, r3, #4
 8006492:	6013      	str	r3, [r2, #0]
 8006494:	e014      	b.n	80064c0 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80064a4:	f023 0304 	bic.w	r3, r3, #4
 80064a8:	6013      	str	r3, [r2, #0]
 80064aa:	e009      	b.n	80064c0 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80064ba:	f023 0304 	bic.w	r3, r3, #4
 80064be:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80064c0:	2110      	movs	r1, #16
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f7ff fe5e 	bl	8006184 <USB_FlushTxFifo>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d001      	beq.n	80064d2 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f7ff fe8a 	bl	80061ec <USB_FlushRxFifo>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d001      	beq.n	80064e2 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80064e2:	2300      	movs	r3, #0
 80064e4:	613b      	str	r3, [r7, #16]
 80064e6:	e015      	b.n	8006514 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	015a      	lsls	r2, r3, #5
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	4413      	add	r3, r2
 80064f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064f4:	461a      	mov	r2, r3
 80064f6:	f04f 33ff 	mov.w	r3, #4294967295
 80064fa:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	015a      	lsls	r2, r3, #5
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	4413      	add	r3, r2
 8006504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006508:	461a      	mov	r2, r3
 800650a:	2300      	movs	r3, #0
 800650c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	3301      	adds	r3, #1
 8006512:	613b      	str	r3, [r7, #16]
 8006514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006516:	693a      	ldr	r2, [r7, #16]
 8006518:	429a      	cmp	r2, r3
 800651a:	d3e5      	bcc.n	80064e8 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f04f 32ff 	mov.w	r2, #4294967295
 8006528:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800652e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006532:	2b00      	cmp	r3, #0
 8006534:	d00b      	beq.n	800654e <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f44f 7200 	mov.w	r2, #512	; 0x200
 800653c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a13      	ldr	r2, [pc, #76]	; (8006590 <USB_HostInit+0x16c>)
 8006542:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a13      	ldr	r2, [pc, #76]	; (8006594 <USB_HostInit+0x170>)
 8006548:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800654c:	e009      	b.n	8006562 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2280      	movs	r2, #128	; 0x80
 8006552:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a10      	ldr	r2, [pc, #64]	; (8006598 <USB_HostInit+0x174>)
 8006558:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a0f      	ldr	r2, [pc, #60]	; (800659c <USB_HostInit+0x178>)
 800655e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006564:	2b00      	cmp	r3, #0
 8006566:	d105      	bne.n	8006574 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	699b      	ldr	r3, [r3, #24]
 800656c:	f043 0210 	orr.w	r2, r3, #16
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	699a      	ldr	r2, [r3, #24]
 8006578:	4b09      	ldr	r3, [pc, #36]	; (80065a0 <USB_HostInit+0x17c>)
 800657a:	4313      	orrs	r3, r2
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006580:	7dfb      	ldrb	r3, [r7, #23]
}
 8006582:	4618      	mov	r0, r3
 8006584:	3718      	adds	r7, #24
 8006586:	46bd      	mov	sp, r7
 8006588:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800658c:	b004      	add	sp, #16
 800658e:	4770      	bx	lr
 8006590:	01000200 	.word	0x01000200
 8006594:	00e00300 	.word	0x00e00300
 8006598:	00600080 	.word	0x00600080
 800659c:	004000e0 	.word	0x004000e0
 80065a0:	a3200008 	.word	0xa3200008

080065a4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b085      	sub	sp, #20
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	460b      	mov	r3, r1
 80065ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80065c2:	f023 0303 	bic.w	r3, r3, #3
 80065c6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	78fb      	ldrb	r3, [r7, #3]
 80065d2:	f003 0303 	and.w	r3, r3, #3
 80065d6:	68f9      	ldr	r1, [r7, #12]
 80065d8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80065dc:	4313      	orrs	r3, r2
 80065de:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80065e0:	78fb      	ldrb	r3, [r7, #3]
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d107      	bne.n	80065f6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065ec:	461a      	mov	r2, r3
 80065ee:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80065f2:	6053      	str	r3, [r2, #4]
 80065f4:	e009      	b.n	800660a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80065f6:	78fb      	ldrb	r3, [r7, #3]
 80065f8:	2b02      	cmp	r3, #2
 80065fa:	d106      	bne.n	800660a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006602:	461a      	mov	r2, r3
 8006604:	f241 7370 	movw	r3, #6000	; 0x1770
 8006608:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	3714      	adds	r7, #20
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006624:	2300      	movs	r3, #0
 8006626:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006638:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006646:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006648:	2064      	movs	r0, #100	; 0x64
 800664a:	f7fa fe35 	bl	80012b8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	68fa      	ldr	r2, [r7, #12]
 8006652:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006656:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800665a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800665c:	200a      	movs	r0, #10
 800665e:	f7fa fe2b 	bl	80012b8 <HAL_Delay>

  return HAL_OK;
 8006662:	2300      	movs	r3, #0
}
 8006664:	4618      	mov	r0, r3
 8006666:	3710      	adds	r7, #16
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800666c:	b480      	push	{r7}
 800666e:	b085      	sub	sp, #20
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	460b      	mov	r3, r1
 8006676:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800667c:	2300      	movs	r3, #0
 800667e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006690:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006698:	2b00      	cmp	r3, #0
 800669a:	d109      	bne.n	80066b0 <USB_DriveVbus+0x44>
 800669c:	78fb      	ldrb	r3, [r7, #3]
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d106      	bne.n	80066b0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80066aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80066ae:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80066b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066ba:	d109      	bne.n	80066d0 <USB_DriveVbus+0x64>
 80066bc:	78fb      	ldrb	r3, [r7, #3]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d106      	bne.n	80066d0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80066ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066ce:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3714      	adds	r7, #20
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr

080066de <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80066de:	b480      	push	{r7}
 80066e0:	b085      	sub	sp, #20
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80066ea:	2300      	movs	r3, #0
 80066ec:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	0c5b      	lsrs	r3, r3, #17
 80066fc:	f003 0303 	and.w	r3, r3, #3
}
 8006700:	4618      	mov	r0, r3
 8006702:	3714      	adds	r7, #20
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800670c:	b480      	push	{r7}
 800670e:	b085      	sub	sp, #20
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	b29b      	uxth	r3, r3
}
 8006722:	4618      	mov	r0, r3
 8006724:	3714      	adds	r7, #20
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr
	...

08006730 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b088      	sub	sp, #32
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	4608      	mov	r0, r1
 800673a:	4611      	mov	r1, r2
 800673c:	461a      	mov	r2, r3
 800673e:	4603      	mov	r3, r0
 8006740:	70fb      	strb	r3, [r7, #3]
 8006742:	460b      	mov	r3, r1
 8006744:	70bb      	strb	r3, [r7, #2]
 8006746:	4613      	mov	r3, r2
 8006748:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800674a:	2300      	movs	r3, #0
 800674c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006752:	78fb      	ldrb	r3, [r7, #3]
 8006754:	015a      	lsls	r2, r3, #5
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	4413      	add	r3, r2
 800675a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800675e:	461a      	mov	r2, r3
 8006760:	f04f 33ff 	mov.w	r3, #4294967295
 8006764:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006766:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800676a:	2b03      	cmp	r3, #3
 800676c:	d87e      	bhi.n	800686c <USB_HC_Init+0x13c>
 800676e:	a201      	add	r2, pc, #4	; (adr r2, 8006774 <USB_HC_Init+0x44>)
 8006770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006774:	08006785 	.word	0x08006785
 8006778:	0800682f 	.word	0x0800682f
 800677c:	08006785 	.word	0x08006785
 8006780:	080067f1 	.word	0x080067f1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006784:	78fb      	ldrb	r3, [r7, #3]
 8006786:	015a      	lsls	r2, r3, #5
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	4413      	add	r3, r2
 800678c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006790:	461a      	mov	r2, r3
 8006792:	f240 439d 	movw	r3, #1181	; 0x49d
 8006796:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006798:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800679c:	2b00      	cmp	r3, #0
 800679e:	da10      	bge.n	80067c2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80067a0:	78fb      	ldrb	r3, [r7, #3]
 80067a2:	015a      	lsls	r2, r3, #5
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	4413      	add	r3, r2
 80067a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	78fa      	ldrb	r2, [r7, #3]
 80067b0:	0151      	lsls	r1, r2, #5
 80067b2:	693a      	ldr	r2, [r7, #16]
 80067b4:	440a      	add	r2, r1
 80067b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067be:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80067c0:	e057      	b.n	8006872 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d051      	beq.n	8006872 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80067ce:	78fb      	ldrb	r3, [r7, #3]
 80067d0:	015a      	lsls	r2, r3, #5
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	4413      	add	r3, r2
 80067d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	78fa      	ldrb	r2, [r7, #3]
 80067de:	0151      	lsls	r1, r2, #5
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	440a      	add	r2, r1
 80067e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067e8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80067ec:	60d3      	str	r3, [r2, #12]
      break;
 80067ee:	e040      	b.n	8006872 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80067f0:	78fb      	ldrb	r3, [r7, #3]
 80067f2:	015a      	lsls	r2, r3, #5
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	4413      	add	r3, r2
 80067f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067fc:	461a      	mov	r2, r3
 80067fe:	f240 639d 	movw	r3, #1693	; 0x69d
 8006802:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006804:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006808:	2b00      	cmp	r3, #0
 800680a:	da34      	bge.n	8006876 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800680c:	78fb      	ldrb	r3, [r7, #3]
 800680e:	015a      	lsls	r2, r3, #5
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	4413      	add	r3, r2
 8006814:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	78fa      	ldrb	r2, [r7, #3]
 800681c:	0151      	lsls	r1, r2, #5
 800681e:	693a      	ldr	r2, [r7, #16]
 8006820:	440a      	add	r2, r1
 8006822:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006826:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800682a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800682c:	e023      	b.n	8006876 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800682e:	78fb      	ldrb	r3, [r7, #3]
 8006830:	015a      	lsls	r2, r3, #5
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	4413      	add	r3, r2
 8006836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800683a:	461a      	mov	r2, r3
 800683c:	f240 2325 	movw	r3, #549	; 0x225
 8006840:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006842:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006846:	2b00      	cmp	r3, #0
 8006848:	da17      	bge.n	800687a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800684a:	78fb      	ldrb	r3, [r7, #3]
 800684c:	015a      	lsls	r2, r3, #5
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	4413      	add	r3, r2
 8006852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	78fa      	ldrb	r2, [r7, #3]
 800685a:	0151      	lsls	r1, r2, #5
 800685c:	693a      	ldr	r2, [r7, #16]
 800685e:	440a      	add	r2, r1
 8006860:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006864:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006868:	60d3      	str	r3, [r2, #12]
      }
      break;
 800686a:	e006      	b.n	800687a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	77fb      	strb	r3, [r7, #31]
      break;
 8006870:	e004      	b.n	800687c <USB_HC_Init+0x14c>
      break;
 8006872:	bf00      	nop
 8006874:	e002      	b.n	800687c <USB_HC_Init+0x14c>
      break;
 8006876:	bf00      	nop
 8006878:	e000      	b.n	800687c <USB_HC_Init+0x14c>
      break;
 800687a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800687c:	78fb      	ldrb	r3, [r7, #3]
 800687e:	015a      	lsls	r2, r3, #5
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	4413      	add	r3, r2
 8006884:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	78fa      	ldrb	r2, [r7, #3]
 800688c:	0151      	lsls	r1, r2, #5
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	440a      	add	r2, r1
 8006892:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006896:	f043 0302 	orr.w	r3, r3, #2
 800689a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068a2:	699a      	ldr	r2, [r3, #24]
 80068a4:	78fb      	ldrb	r3, [r7, #3]
 80068a6:	f003 030f 	and.w	r3, r3, #15
 80068aa:	2101      	movs	r1, #1
 80068ac:	fa01 f303 	lsl.w	r3, r1, r3
 80068b0:	6939      	ldr	r1, [r7, #16]
 80068b2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80068b6:	4313      	orrs	r3, r2
 80068b8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	699b      	ldr	r3, [r3, #24]
 80068be:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80068c6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	da03      	bge.n	80068d6 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80068ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068d2:	61bb      	str	r3, [r7, #24]
 80068d4:	e001      	b.n	80068da <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80068d6:	2300      	movs	r3, #0
 80068d8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f7ff feff 	bl	80066de <USB_GetHostSpeed>
 80068e0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80068e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	d106      	bne.n	80068f8 <USB_HC_Init+0x1c8>
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2b02      	cmp	r3, #2
 80068ee:	d003      	beq.n	80068f8 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80068f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80068f4:	617b      	str	r3, [r7, #20]
 80068f6:	e001      	b.n	80068fc <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80068f8:	2300      	movs	r3, #0
 80068fa:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80068fc:	787b      	ldrb	r3, [r7, #1]
 80068fe:	059b      	lsls	r3, r3, #22
 8006900:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006904:	78bb      	ldrb	r3, [r7, #2]
 8006906:	02db      	lsls	r3, r3, #11
 8006908:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800690c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800690e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006912:	049b      	lsls	r3, r3, #18
 8006914:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006918:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800691a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800691c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006920:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006926:	78fb      	ldrb	r3, [r7, #3]
 8006928:	0159      	lsls	r1, r3, #5
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	440b      	add	r3, r1
 800692e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006932:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006938:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800693a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800693e:	2b03      	cmp	r3, #3
 8006940:	d003      	beq.n	800694a <USB_HC_Init+0x21a>
 8006942:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006946:	2b01      	cmp	r3, #1
 8006948:	d10f      	bne.n	800696a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800694a:	78fb      	ldrb	r3, [r7, #3]
 800694c:	015a      	lsls	r2, r3, #5
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	4413      	add	r3, r2
 8006952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	78fa      	ldrb	r2, [r7, #3]
 800695a:	0151      	lsls	r1, r2, #5
 800695c:	693a      	ldr	r2, [r7, #16]
 800695e:	440a      	add	r2, r1
 8006960:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006964:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006968:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800696a:	7ffb      	ldrb	r3, [r7, #31]
}
 800696c:	4618      	mov	r0, r3
 800696e:	3720      	adds	r7, #32
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b08c      	sub	sp, #48	; 0x30
 8006978:	af02      	add	r7, sp, #8
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	4613      	mov	r3, r2
 8006980:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	785b      	ldrb	r3, [r3, #1]
 800698a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800698c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006990:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800699a:	2b00      	cmp	r3, #0
 800699c:	d02d      	beq.n	80069fa <USB_HC_StartXfer+0x86>
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	791b      	ldrb	r3, [r3, #4]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d129      	bne.n	80069fa <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80069a6:	79fb      	ldrb	r3, [r7, #7]
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d117      	bne.n	80069dc <USB_HC_StartXfer+0x68>
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	79db      	ldrb	r3, [r3, #7]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d003      	beq.n	80069bc <USB_HC_StartXfer+0x48>
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	79db      	ldrb	r3, [r3, #7]
 80069b8:	2b02      	cmp	r3, #2
 80069ba:	d10f      	bne.n	80069dc <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	015a      	lsls	r2, r3, #5
 80069c0:	6a3b      	ldr	r3, [r7, #32]
 80069c2:	4413      	add	r3, r2
 80069c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069c8:	68db      	ldr	r3, [r3, #12]
 80069ca:	69fa      	ldr	r2, [r7, #28]
 80069cc:	0151      	lsls	r1, r2, #5
 80069ce:	6a3a      	ldr	r2, [r7, #32]
 80069d0:	440a      	add	r2, r1
 80069d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069da:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80069dc:	79fb      	ldrb	r3, [r7, #7]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d10b      	bne.n	80069fa <USB_HC_StartXfer+0x86>
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	795b      	ldrb	r3, [r3, #5]
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d107      	bne.n	80069fa <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	785b      	ldrb	r3, [r3, #1]
 80069ee:	4619      	mov	r1, r3
 80069f0:	68f8      	ldr	r0, [r7, #12]
 80069f2:	f000 fa0f 	bl	8006e14 <USB_DoPing>
      return HAL_OK;
 80069f6:	2300      	movs	r3, #0
 80069f8:	e0f8      	b.n	8006bec <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	695b      	ldr	r3, [r3, #20]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d018      	beq.n	8006a34 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	695b      	ldr	r3, [r3, #20]
 8006a06:	68ba      	ldr	r2, [r7, #8]
 8006a08:	8912      	ldrh	r2, [r2, #8]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	3b01      	subs	r3, #1
 8006a0e:	68ba      	ldr	r2, [r7, #8]
 8006a10:	8912      	ldrh	r2, [r2, #8]
 8006a12:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a16:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006a18:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006a1a:	8b7b      	ldrh	r3, [r7, #26]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d90b      	bls.n	8006a38 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006a20:	8b7b      	ldrh	r3, [r7, #26]
 8006a22:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006a24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	8912      	ldrh	r2, [r2, #8]
 8006a2a:	fb03 f202 	mul.w	r2, r3, r2
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	611a      	str	r2, [r3, #16]
 8006a32:	e001      	b.n	8006a38 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006a34:	2301      	movs	r3, #1
 8006a36:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	78db      	ldrb	r3, [r3, #3]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d007      	beq.n	8006a50 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006a40:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a42:	68ba      	ldr	r2, [r7, #8]
 8006a44:	8912      	ldrh	r2, [r2, #8]
 8006a46:	fb03 f202 	mul.w	r2, r3, r2
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	611a      	str	r2, [r3, #16]
 8006a4e:	e003      	b.n	8006a58 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	695a      	ldr	r2, [r3, #20]
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	691b      	ldr	r3, [r3, #16]
 8006a5c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006a60:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a62:	04d9      	lsls	r1, r3, #19
 8006a64:	4b63      	ldr	r3, [pc, #396]	; (8006bf4 <USB_HC_StartXfer+0x280>)
 8006a66:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006a68:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	7a9b      	ldrb	r3, [r3, #10]
 8006a6e:	075b      	lsls	r3, r3, #29
 8006a70:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006a74:	69f9      	ldr	r1, [r7, #28]
 8006a76:	0148      	lsls	r0, r1, #5
 8006a78:	6a39      	ldr	r1, [r7, #32]
 8006a7a:	4401      	add	r1, r0
 8006a7c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006a80:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006a82:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006a84:	79fb      	ldrb	r3, [r7, #7]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d009      	beq.n	8006a9e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	68d9      	ldr	r1, [r3, #12]
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	015a      	lsls	r2, r3, #5
 8006a92:	6a3b      	ldr	r3, [r7, #32]
 8006a94:	4413      	add	r3, r2
 8006a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a9a:	460a      	mov	r2, r1
 8006a9c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006a9e:	6a3b      	ldr	r3, [r7, #32]
 8006aa0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	f003 0301 	and.w	r3, r3, #1
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	bf0c      	ite	eq
 8006aae:	2301      	moveq	r3, #1
 8006ab0:	2300      	movne	r3, #0
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	015a      	lsls	r2, r3, #5
 8006aba:	6a3b      	ldr	r3, [r7, #32]
 8006abc:	4413      	add	r3, r2
 8006abe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	69fa      	ldr	r2, [r7, #28]
 8006ac6:	0151      	lsls	r1, r2, #5
 8006ac8:	6a3a      	ldr	r2, [r7, #32]
 8006aca:	440a      	add	r2, r1
 8006acc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ad0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006ad4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	015a      	lsls	r2, r3, #5
 8006ada:	6a3b      	ldr	r3, [r7, #32]
 8006adc:	4413      	add	r3, r2
 8006ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	7e7b      	ldrb	r3, [r7, #25]
 8006ae6:	075b      	lsls	r3, r3, #29
 8006ae8:	69f9      	ldr	r1, [r7, #28]
 8006aea:	0148      	lsls	r0, r1, #5
 8006aec:	6a39      	ldr	r1, [r7, #32]
 8006aee:	4401      	add	r1, r0
 8006af0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006af4:	4313      	orrs	r3, r2
 8006af6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	015a      	lsls	r2, r3, #5
 8006afc:	6a3b      	ldr	r3, [r7, #32]
 8006afe:	4413      	add	r3, r2
 8006b00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006b0e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	78db      	ldrb	r3, [r3, #3]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d004      	beq.n	8006b22 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b1e:	613b      	str	r3, [r7, #16]
 8006b20:	e003      	b.n	8006b2a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b28:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b30:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	015a      	lsls	r2, r3, #5
 8006b36:	6a3b      	ldr	r3, [r7, #32]
 8006b38:	4413      	add	r3, r2
 8006b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b3e:	461a      	mov	r2, r3
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006b44:	79fb      	ldrb	r3, [r7, #7]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d001      	beq.n	8006b4e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	e04e      	b.n	8006bec <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	78db      	ldrb	r3, [r3, #3]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d149      	bne.n	8006bea <USB_HC_StartXfer+0x276>
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	695b      	ldr	r3, [r3, #20]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d045      	beq.n	8006bea <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	79db      	ldrb	r3, [r3, #7]
 8006b62:	2b03      	cmp	r3, #3
 8006b64:	d830      	bhi.n	8006bc8 <USB_HC_StartXfer+0x254>
 8006b66:	a201      	add	r2, pc, #4	; (adr r2, 8006b6c <USB_HC_StartXfer+0x1f8>)
 8006b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b6c:	08006b7d 	.word	0x08006b7d
 8006b70:	08006ba1 	.word	0x08006ba1
 8006b74:	08006b7d 	.word	0x08006b7d
 8006b78:	08006ba1 	.word	0x08006ba1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	695b      	ldr	r3, [r3, #20]
 8006b80:	3303      	adds	r3, #3
 8006b82:	089b      	lsrs	r3, r3, #2
 8006b84:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006b86:	8afa      	ldrh	r2, [r7, #22]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d91c      	bls.n	8006bcc <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	699b      	ldr	r3, [r3, #24]
 8006b96:	f043 0220 	orr.w	r2, r3, #32
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	619a      	str	r2, [r3, #24]
        }
        break;
 8006b9e:	e015      	b.n	8006bcc <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	695b      	ldr	r3, [r3, #20]
 8006ba4:	3303      	adds	r3, #3
 8006ba6:	089b      	lsrs	r3, r3, #2
 8006ba8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006baa:	8afa      	ldrh	r2, [r7, #22]
 8006bac:	6a3b      	ldr	r3, [r7, #32]
 8006bae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bb2:	691b      	ldr	r3, [r3, #16]
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d90a      	bls.n	8006bd0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	699b      	ldr	r3, [r3, #24]
 8006bbe:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	619a      	str	r2, [r3, #24]
        }
        break;
 8006bc6:	e003      	b.n	8006bd0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006bc8:	bf00      	nop
 8006bca:	e002      	b.n	8006bd2 <USB_HC_StartXfer+0x25e>
        break;
 8006bcc:	bf00      	nop
 8006bce:	e000      	b.n	8006bd2 <USB_HC_StartXfer+0x25e>
        break;
 8006bd0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	68d9      	ldr	r1, [r3, #12]
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	785a      	ldrb	r2, [r3, #1]
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	695b      	ldr	r3, [r3, #20]
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	2000      	movs	r0, #0
 8006be2:	9000      	str	r0, [sp, #0]
 8006be4:	68f8      	ldr	r0, [r7, #12]
 8006be6:	f7ff fb31 	bl	800624c <USB_WritePacket>
  }

  return HAL_OK;
 8006bea:	2300      	movs	r3, #0
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3728      	adds	r7, #40	; 0x28
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	1ff80000 	.word	0x1ff80000

08006bf8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b085      	sub	sp, #20
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c0a:	695b      	ldr	r3, [r3, #20]
 8006c0c:	b29b      	uxth	r3, r3
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3714      	adds	r7, #20
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr

08006c1a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006c1a:	b480      	push	{r7}
 8006c1c:	b089      	sub	sp, #36	; 0x24
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
 8006c22:	460b      	mov	r3, r1
 8006c24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006c2a:	78fb      	ldrb	r3, [r7, #3]
 8006c2c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	015a      	lsls	r2, r3, #5
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	4413      	add	r3, r2
 8006c3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	0c9b      	lsrs	r3, r3, #18
 8006c42:	f003 0303 	and.w	r3, r3, #3
 8006c46:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	015a      	lsls	r2, r3, #5
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	4413      	add	r3, r2
 8006c50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	0fdb      	lsrs	r3, r3, #31
 8006c58:	f003 0301 	and.w	r3, r3, #1
 8006c5c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	f003 0320 	and.w	r3, r3, #32
 8006c66:	2b20      	cmp	r3, #32
 8006c68:	d104      	bne.n	8006c74 <USB_HC_Halt+0x5a>
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d101      	bne.n	8006c74 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006c70:	2300      	movs	r3, #0
 8006c72:	e0c8      	b.n	8006e06 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d002      	beq.n	8006c80 <USB_HC_Halt+0x66>
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	2b02      	cmp	r3, #2
 8006c7e:	d163      	bne.n	8006d48 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	015a      	lsls	r2, r3, #5
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	4413      	add	r3, r2
 8006c88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	69ba      	ldr	r2, [r7, #24]
 8006c90:	0151      	lsls	r1, r2, #5
 8006c92:	69fa      	ldr	r2, [r7, #28]
 8006c94:	440a      	add	r2, r1
 8006c96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c9e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	f003 0320 	and.w	r3, r3, #32
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	f040 80ab 	bne.w	8006e04 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d133      	bne.n	8006d22 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	015a      	lsls	r2, r3, #5
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	69ba      	ldr	r2, [r7, #24]
 8006cca:	0151      	lsls	r1, r2, #5
 8006ccc:	69fa      	ldr	r2, [r7, #28]
 8006cce:	440a      	add	r2, r1
 8006cd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006cd8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006cda:	69bb      	ldr	r3, [r7, #24]
 8006cdc:	015a      	lsls	r2, r3, #5
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	69ba      	ldr	r2, [r7, #24]
 8006cea:	0151      	lsls	r1, r2, #5
 8006cec:	69fa      	ldr	r2, [r7, #28]
 8006cee:	440a      	add	r2, r1
 8006cf0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cf4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006cf8:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d06:	d81d      	bhi.n	8006d44 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	015a      	lsls	r2, r3, #5
 8006d0c:	69fb      	ldr	r3, [r7, #28]
 8006d0e:	4413      	add	r3, r2
 8006d10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d1e:	d0ec      	beq.n	8006cfa <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006d20:	e070      	b.n	8006e04 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	015a      	lsls	r2, r3, #5
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	4413      	add	r3, r2
 8006d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	69ba      	ldr	r2, [r7, #24]
 8006d32:	0151      	lsls	r1, r2, #5
 8006d34:	69fa      	ldr	r2, [r7, #28]
 8006d36:	440a      	add	r2, r1
 8006d38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d40:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006d42:	e05f      	b.n	8006e04 <USB_HC_Halt+0x1ea>
            break;
 8006d44:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006d46:	e05d      	b.n	8006e04 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006d48:	69bb      	ldr	r3, [r7, #24]
 8006d4a:	015a      	lsls	r2, r3, #5
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	4413      	add	r3, r2
 8006d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	69ba      	ldr	r2, [r7, #24]
 8006d58:	0151      	lsls	r1, r2, #5
 8006d5a:	69fa      	ldr	r2, [r7, #28]
 8006d5c:	440a      	add	r2, r1
 8006d5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d66:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d6e:	691b      	ldr	r3, [r3, #16]
 8006d70:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d133      	bne.n	8006de0 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006d78:	69bb      	ldr	r3, [r7, #24]
 8006d7a:	015a      	lsls	r2, r3, #5
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	4413      	add	r3, r2
 8006d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	69ba      	ldr	r2, [r7, #24]
 8006d88:	0151      	lsls	r1, r2, #5
 8006d8a:	69fa      	ldr	r2, [r7, #28]
 8006d8c:	440a      	add	r2, r1
 8006d8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d96:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	015a      	lsls	r2, r3, #5
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	4413      	add	r3, r2
 8006da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	69ba      	ldr	r2, [r7, #24]
 8006da8:	0151      	lsls	r1, r2, #5
 8006daa:	69fa      	ldr	r2, [r7, #28]
 8006dac:	440a      	add	r2, r1
 8006dae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006db2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006db6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	3301      	adds	r3, #1
 8006dbc:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006dc4:	d81d      	bhi.n	8006e02 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	015a      	lsls	r2, r3, #5
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	4413      	add	r3, r2
 8006dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006dd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ddc:	d0ec      	beq.n	8006db8 <USB_HC_Halt+0x19e>
 8006dde:	e011      	b.n	8006e04 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	015a      	lsls	r2, r3, #5
 8006de4:	69fb      	ldr	r3, [r7, #28]
 8006de6:	4413      	add	r3, r2
 8006de8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	69ba      	ldr	r2, [r7, #24]
 8006df0:	0151      	lsls	r1, r2, #5
 8006df2:	69fa      	ldr	r2, [r7, #28]
 8006df4:	440a      	add	r2, r1
 8006df6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006dfa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006dfe:	6013      	str	r3, [r2, #0]
 8006e00:	e000      	b.n	8006e04 <USB_HC_Halt+0x1ea>
          break;
 8006e02:	bf00      	nop
    }
  }

  return HAL_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3724      	adds	r7, #36	; 0x24
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr
	...

08006e14 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b087      	sub	sp, #28
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006e24:	78fb      	ldrb	r3, [r7, #3]
 8006e26:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	04da      	lsls	r2, r3, #19
 8006e30:	4b15      	ldr	r3, [pc, #84]	; (8006e88 <USB_DoPing+0x74>)
 8006e32:	4013      	ands	r3, r2
 8006e34:	693a      	ldr	r2, [r7, #16]
 8006e36:	0151      	lsls	r1, r2, #5
 8006e38:	697a      	ldr	r2, [r7, #20]
 8006e3a:	440a      	add	r2, r1
 8006e3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e44:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	015a      	lsls	r2, r3, #5
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006e5c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e64:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	015a      	lsls	r2, r3, #5
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e72:	461a      	mov	r2, r3
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006e78:	2300      	movs	r3, #0
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	371c      	adds	r7, #28
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr
 8006e86:	bf00      	nop
 8006e88:	1ff80000 	.word	0x1ff80000

08006e8c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b088      	sub	sp, #32
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006e94:	2300      	movs	r3, #0
 8006e96:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f7ff f911 	bl	80060c8 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006ea6:	2110      	movs	r1, #16
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f7ff f96b 	bl	8006184 <USB_FlushTxFifo>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d001      	beq.n	8006eb8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f7ff f997 	bl	80061ec <USB_FlushRxFifo>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d001      	beq.n	8006ec8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006ec8:	2300      	movs	r3, #0
 8006eca:	61bb      	str	r3, [r7, #24]
 8006ecc:	e01f      	b.n	8006f0e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	015a      	lsls	r2, r3, #5
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ee4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006eec:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006ef4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006ef6:	69bb      	ldr	r3, [r7, #24]
 8006ef8:	015a      	lsls	r2, r3, #5
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	4413      	add	r3, r2
 8006efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f02:	461a      	mov	r2, r3
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006f08:	69bb      	ldr	r3, [r7, #24]
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	61bb      	str	r3, [r7, #24]
 8006f0e:	69bb      	ldr	r3, [r7, #24]
 8006f10:	2b0f      	cmp	r3, #15
 8006f12:	d9dc      	bls.n	8006ece <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006f14:	2300      	movs	r3, #0
 8006f16:	61bb      	str	r3, [r7, #24]
 8006f18:	e034      	b.n	8006f84 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	015a      	lsls	r2, r3, #5
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	4413      	add	r3, r2
 8006f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f30:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f38:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f40:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	015a      	lsls	r2, r3, #5
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	4413      	add	r3, r2
 8006f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f4e:	461a      	mov	r2, r3
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	3301      	adds	r3, #1
 8006f58:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f60:	d80c      	bhi.n	8006f7c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	015a      	lsls	r2, r3, #5
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	4413      	add	r3, r2
 8006f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f78:	d0ec      	beq.n	8006f54 <USB_StopHost+0xc8>
 8006f7a:	e000      	b.n	8006f7e <USB_StopHost+0xf2>
        break;
 8006f7c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	3301      	adds	r3, #1
 8006f82:	61bb      	str	r3, [r7, #24]
 8006f84:	69bb      	ldr	r3, [r7, #24]
 8006f86:	2b0f      	cmp	r3, #15
 8006f88:	d9c7      	bls.n	8006f1a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f90:	461a      	mov	r2, r3
 8006f92:	f04f 33ff 	mov.w	r3, #4294967295
 8006f96:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f9e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f7ff f880 	bl	80060a6 <USB_EnableGlobalInt>

  return ret;
 8006fa6:	7ffb      	ldrb	r3, [r7, #31]
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3720      	adds	r7, #32
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006fb0:	b590      	push	{r4, r7, lr}
 8006fb2:	b089      	sub	sp, #36	; 0x24
 8006fb4:	af04      	add	r7, sp, #16
 8006fb6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006fb8:	2301      	movs	r3, #1
 8006fba:	2202      	movs	r2, #2
 8006fbc:	2102      	movs	r1, #2
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 fcb2 	bl	8007928 <USBH_FindInterface>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006fc8:	7bfb      	ldrb	r3, [r7, #15]
 8006fca:	2bff      	cmp	r3, #255	; 0xff
 8006fcc:	d002      	beq.n	8006fd4 <USBH_CDC_InterfaceInit+0x24>
 8006fce:	7bfb      	ldrb	r3, [r7, #15]
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d901      	bls.n	8006fd8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006fd4:	2302      	movs	r3, #2
 8006fd6:	e13d      	b.n	8007254 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006fd8:	7bfb      	ldrb	r3, [r7, #15]
 8006fda:	4619      	mov	r1, r3
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 fc87 	bl	80078f0 <USBH_SelectInterface>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006fe6:	7bbb      	ldrb	r3, [r7, #14]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d001      	beq.n	8006ff0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006fec:	2302      	movs	r3, #2
 8006fee:	e131      	b.n	8007254 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006ff6:	2050      	movs	r0, #80	; 0x50
 8006ff8:	f005 fcbc 	bl	800c974 <malloc>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007006:	69db      	ldr	r3, [r3, #28]
 8007008:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d101      	bne.n	8007014 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007010:	2302      	movs	r3, #2
 8007012:	e11f      	b.n	8007254 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007014:	2250      	movs	r2, #80	; 0x50
 8007016:	2100      	movs	r1, #0
 8007018:	68b8      	ldr	r0, [r7, #8]
 800701a:	f005 fcc9 	bl	800c9b0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800701e:	7bfb      	ldrb	r3, [r7, #15]
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	211a      	movs	r1, #26
 8007024:	fb01 f303 	mul.w	r3, r1, r3
 8007028:	4413      	add	r3, r2
 800702a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	b25b      	sxtb	r3, r3
 8007032:	2b00      	cmp	r3, #0
 8007034:	da15      	bge.n	8007062 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007036:	7bfb      	ldrb	r3, [r7, #15]
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	211a      	movs	r1, #26
 800703c:	fb01 f303 	mul.w	r3, r1, r3
 8007040:	4413      	add	r3, r2
 8007042:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007046:	781a      	ldrb	r2, [r3, #0]
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800704c:	7bfb      	ldrb	r3, [r7, #15]
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	211a      	movs	r1, #26
 8007052:	fb01 f303 	mul.w	r3, r1, r3
 8007056:	4413      	add	r3, r2
 8007058:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800705c:	881a      	ldrh	r2, [r3, #0]
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	785b      	ldrb	r3, [r3, #1]
 8007066:	4619      	mov	r1, r3
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f002 f984 	bl	8009376 <USBH_AllocPipe>
 800706e:	4603      	mov	r3, r0
 8007070:	461a      	mov	r2, r3
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	7819      	ldrb	r1, [r3, #0]
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	7858      	ldrb	r0, [r3, #1]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800708a:	68ba      	ldr	r2, [r7, #8]
 800708c:	8952      	ldrh	r2, [r2, #10]
 800708e:	9202      	str	r2, [sp, #8]
 8007090:	2203      	movs	r2, #3
 8007092:	9201      	str	r2, [sp, #4]
 8007094:	9300      	str	r3, [sp, #0]
 8007096:	4623      	mov	r3, r4
 8007098:	4602      	mov	r2, r0
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f002 f93c 	bl	8009318 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	2200      	movs	r2, #0
 80070a6:	4619      	mov	r1, r3
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f005 fbb5 	bl	800c818 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80070ae:	2300      	movs	r3, #0
 80070b0:	2200      	movs	r2, #0
 80070b2:	210a      	movs	r1, #10
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 fc37 	bl	8007928 <USBH_FindInterface>
 80070ba:	4603      	mov	r3, r0
 80070bc:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80070be:	7bfb      	ldrb	r3, [r7, #15]
 80070c0:	2bff      	cmp	r3, #255	; 0xff
 80070c2:	d002      	beq.n	80070ca <USBH_CDC_InterfaceInit+0x11a>
 80070c4:	7bfb      	ldrb	r3, [r7, #15]
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d901      	bls.n	80070ce <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80070ca:	2302      	movs	r3, #2
 80070cc:	e0c2      	b.n	8007254 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80070ce:	7bfb      	ldrb	r3, [r7, #15]
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	211a      	movs	r1, #26
 80070d4:	fb01 f303 	mul.w	r3, r1, r3
 80070d8:	4413      	add	r3, r2
 80070da:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	b25b      	sxtb	r3, r3
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	da16      	bge.n	8007114 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80070e6:	7bfb      	ldrb	r3, [r7, #15]
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	211a      	movs	r1, #26
 80070ec:	fb01 f303 	mul.w	r3, r1, r3
 80070f0:	4413      	add	r3, r2
 80070f2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80070f6:	781a      	ldrb	r2, [r3, #0]
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80070fc:	7bfb      	ldrb	r3, [r7, #15]
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	211a      	movs	r1, #26
 8007102:	fb01 f303 	mul.w	r3, r1, r3
 8007106:	4413      	add	r3, r2
 8007108:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800710c:	881a      	ldrh	r2, [r3, #0]
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	835a      	strh	r2, [r3, #26]
 8007112:	e015      	b.n	8007140 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007114:	7bfb      	ldrb	r3, [r7, #15]
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	211a      	movs	r1, #26
 800711a:	fb01 f303 	mul.w	r3, r1, r3
 800711e:	4413      	add	r3, r2
 8007120:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007124:	781a      	ldrb	r2, [r3, #0]
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800712a:	7bfb      	ldrb	r3, [r7, #15]
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	211a      	movs	r1, #26
 8007130:	fb01 f303 	mul.w	r3, r1, r3
 8007134:	4413      	add	r3, r2
 8007136:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800713a:	881a      	ldrh	r2, [r3, #0]
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007140:	7bfb      	ldrb	r3, [r7, #15]
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	211a      	movs	r1, #26
 8007146:	fb01 f303 	mul.w	r3, r1, r3
 800714a:	4413      	add	r3, r2
 800714c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	b25b      	sxtb	r3, r3
 8007154:	2b00      	cmp	r3, #0
 8007156:	da16      	bge.n	8007186 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007158:	7bfb      	ldrb	r3, [r7, #15]
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	211a      	movs	r1, #26
 800715e:	fb01 f303 	mul.w	r3, r1, r3
 8007162:	4413      	add	r3, r2
 8007164:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007168:	781a      	ldrb	r2, [r3, #0]
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800716e:	7bfb      	ldrb	r3, [r7, #15]
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	211a      	movs	r1, #26
 8007174:	fb01 f303 	mul.w	r3, r1, r3
 8007178:	4413      	add	r3, r2
 800717a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800717e:	881a      	ldrh	r2, [r3, #0]
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	835a      	strh	r2, [r3, #26]
 8007184:	e015      	b.n	80071b2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007186:	7bfb      	ldrb	r3, [r7, #15]
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	211a      	movs	r1, #26
 800718c:	fb01 f303 	mul.w	r3, r1, r3
 8007190:	4413      	add	r3, r2
 8007192:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007196:	781a      	ldrb	r2, [r3, #0]
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800719c:	7bfb      	ldrb	r3, [r7, #15]
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	211a      	movs	r1, #26
 80071a2:	fb01 f303 	mul.w	r3, r1, r3
 80071a6:	4413      	add	r3, r2
 80071a8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80071ac:	881a      	ldrh	r2, [r3, #0]
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	7b9b      	ldrb	r3, [r3, #14]
 80071b6:	4619      	mov	r1, r3
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f002 f8dc 	bl	8009376 <USBH_AllocPipe>
 80071be:	4603      	mov	r3, r0
 80071c0:	461a      	mov	r2, r3
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	7bdb      	ldrb	r3, [r3, #15]
 80071ca:	4619      	mov	r1, r3
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f002 f8d2 	bl	8009376 <USBH_AllocPipe>
 80071d2:	4603      	mov	r3, r0
 80071d4:	461a      	mov	r2, r3
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	7b59      	ldrb	r1, [r3, #13]
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	7b98      	ldrb	r0, [r3, #14]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80071ee:	68ba      	ldr	r2, [r7, #8]
 80071f0:	8b12      	ldrh	r2, [r2, #24]
 80071f2:	9202      	str	r2, [sp, #8]
 80071f4:	2202      	movs	r2, #2
 80071f6:	9201      	str	r2, [sp, #4]
 80071f8:	9300      	str	r3, [sp, #0]
 80071fa:	4623      	mov	r3, r4
 80071fc:	4602      	mov	r2, r0
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f002 f88a 	bl	8009318 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	7b19      	ldrb	r1, [r3, #12]
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	7bd8      	ldrb	r0, [r3, #15]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007218:	68ba      	ldr	r2, [r7, #8]
 800721a:	8b52      	ldrh	r2, [r2, #26]
 800721c:	9202      	str	r2, [sp, #8]
 800721e:	2202      	movs	r2, #2
 8007220:	9201      	str	r2, [sp, #4]
 8007222:	9300      	str	r3, [sp, #0]
 8007224:	4623      	mov	r3, r4
 8007226:	4602      	mov	r2, r0
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f002 f875 	bl	8009318 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	2200      	movs	r2, #0
 8007232:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	7b5b      	ldrb	r3, [r3, #13]
 800723a:	2200      	movs	r2, #0
 800723c:	4619      	mov	r1, r3
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f005 faea 	bl	800c818 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	7b1b      	ldrb	r3, [r3, #12]
 8007248:	2200      	movs	r2, #0
 800724a:	4619      	mov	r1, r3
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f005 fae3 	bl	800c818 <USBH_LL_SetToggle>

  return USBH_OK;
 8007252:	2300      	movs	r3, #0
}
 8007254:	4618      	mov	r0, r3
 8007256:	3714      	adds	r7, #20
 8007258:	46bd      	mov	sp, r7
 800725a:	bd90      	pop	{r4, r7, pc}

0800725c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800726a:	69db      	ldr	r3, [r3, #28]
 800726c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d00e      	beq.n	8007294 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	4619      	mov	r1, r3
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f002 f86a 	bl	8009356 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	4619      	mov	r1, r3
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f002 f895 	bl	80093b8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2200      	movs	r2, #0
 8007292:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	7b1b      	ldrb	r3, [r3, #12]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d00e      	beq.n	80072ba <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	7b1b      	ldrb	r3, [r3, #12]
 80072a0:	4619      	mov	r1, r3
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f002 f857 	bl	8009356 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	7b1b      	ldrb	r3, [r3, #12]
 80072ac:	4619      	mov	r1, r3
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f002 f882 	bl	80093b8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2200      	movs	r2, #0
 80072b8:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	7b5b      	ldrb	r3, [r3, #13]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d00e      	beq.n	80072e0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	7b5b      	ldrb	r3, [r3, #13]
 80072c6:	4619      	mov	r1, r3
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f002 f844 	bl	8009356 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	7b5b      	ldrb	r3, [r3, #13]
 80072d2:	4619      	mov	r1, r3
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f002 f86f 	bl	80093b8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2200      	movs	r2, #0
 80072de:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072e6:	69db      	ldr	r3, [r3, #28]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d00b      	beq.n	8007304 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072f2:	69db      	ldr	r3, [r3, #28]
 80072f4:	4618      	mov	r0, r3
 80072f6:	f005 fb45 	bl	800c984 <free>
    phost->pActiveClass->pData = 0U;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007300:	2200      	movs	r2, #0
 8007302:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}

0800730e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800730e:	b580      	push	{r7, lr}
 8007310:	b084      	sub	sp, #16
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800731c:	69db      	ldr	r3, [r3, #28]
 800731e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	3340      	adds	r3, #64	; 0x40
 8007324:	4619      	mov	r1, r3
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 f8b1 	bl	800748e <GetLineCoding>
 800732c:	4603      	mov	r3, r0
 800732e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007330:	7afb      	ldrb	r3, [r7, #11]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d105      	bne.n	8007342 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800733c:	2102      	movs	r1, #2
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007342:	7afb      	ldrb	r3, [r7, #11]
}
 8007344:	4618      	mov	r0, r3
 8007346:	3710      	adds	r7, #16
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b084      	sub	sp, #16
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007354:	2301      	movs	r3, #1
 8007356:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007358:	2300      	movs	r3, #0
 800735a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007362:	69db      	ldr	r3, [r3, #28]
 8007364:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800736c:	2b04      	cmp	r3, #4
 800736e:	d877      	bhi.n	8007460 <USBH_CDC_Process+0x114>
 8007370:	a201      	add	r2, pc, #4	; (adr r2, 8007378 <USBH_CDC_Process+0x2c>)
 8007372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007376:	bf00      	nop
 8007378:	0800738d 	.word	0x0800738d
 800737c:	08007393 	.word	0x08007393
 8007380:	080073c3 	.word	0x080073c3
 8007384:	08007437 	.word	0x08007437
 8007388:	08007445 	.word	0x08007445
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800738c:	2300      	movs	r3, #0
 800738e:	73fb      	strb	r3, [r7, #15]
      break;
 8007390:	e06d      	b.n	800746e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007396:	4619      	mov	r1, r3
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 f897 	bl	80074cc <SetLineCoding>
 800739e:	4603      	mov	r3, r0
 80073a0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80073a2:	7bbb      	ldrb	r3, [r7, #14]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d104      	bne.n	80073b2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	2202      	movs	r2, #2
 80073ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80073b0:	e058      	b.n	8007464 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80073b2:	7bbb      	ldrb	r3, [r7, #14]
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d055      	beq.n	8007464 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	2204      	movs	r2, #4
 80073bc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80073c0:	e050      	b.n	8007464 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	3340      	adds	r3, #64	; 0x40
 80073c6:	4619      	mov	r1, r3
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 f860 	bl	800748e <GetLineCoding>
 80073ce:	4603      	mov	r3, r0
 80073d0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80073d2:	7bbb      	ldrb	r3, [r7, #14]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d126      	bne.n	8007426 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	2200      	movs	r2, #0
 80073dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073ea:	791b      	ldrb	r3, [r3, #4]
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d13b      	bne.n	8007468 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073fa:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d133      	bne.n	8007468 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800740a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800740c:	429a      	cmp	r2, r3
 800740e:	d12b      	bne.n	8007468 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007418:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800741a:	429a      	cmp	r2, r3
 800741c:	d124      	bne.n	8007468 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 f982 	bl	8007728 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007424:	e020      	b.n	8007468 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007426:	7bbb      	ldrb	r3, [r7, #14]
 8007428:	2b01      	cmp	r3, #1
 800742a:	d01d      	beq.n	8007468 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	2204      	movs	r2, #4
 8007430:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007434:	e018      	b.n	8007468 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 f867 	bl	800750a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 f8f6 	bl	800762e <CDC_ProcessReception>
      break;
 8007442:	e014      	b.n	800746e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007444:	2100      	movs	r1, #0
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f001 f957 	bl	80086fa <USBH_ClrFeature>
 800744c:	4603      	mov	r3, r0
 800744e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007450:	7bbb      	ldrb	r3, [r7, #14]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d10a      	bne.n	800746c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	2200      	movs	r2, #0
 800745a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800745e:	e005      	b.n	800746c <USBH_CDC_Process+0x120>

    default:
      break;
 8007460:	bf00      	nop
 8007462:	e004      	b.n	800746e <USBH_CDC_Process+0x122>
      break;
 8007464:	bf00      	nop
 8007466:	e002      	b.n	800746e <USBH_CDC_Process+0x122>
      break;
 8007468:	bf00      	nop
 800746a:	e000      	b.n	800746e <USBH_CDC_Process+0x122>
      break;
 800746c:	bf00      	nop

  }

  return status;
 800746e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007470:	4618      	mov	r0, r3
 8007472:	3710      	adds	r7, #16
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007478:	b480      	push	{r7}
 800747a:	b083      	sub	sp, #12
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007480:	2300      	movs	r3, #0
}
 8007482:	4618      	mov	r0, r3
 8007484:	370c      	adds	r7, #12
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr

0800748e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800748e:	b580      	push	{r7, lr}
 8007490:	b082      	sub	sp, #8
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
 8007496:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	22a1      	movs	r2, #161	; 0xa1
 800749c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2221      	movs	r2, #33	; 0x21
 80074a2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2207      	movs	r2, #7
 80074b4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	2207      	movs	r2, #7
 80074ba:	4619      	mov	r1, r3
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f001 fbe9 	bl	8008c94 <USBH_CtlReq>
 80074c2:	4603      	mov	r3, r0
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3708      	adds	r7, #8
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b082      	sub	sp, #8
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2221      	movs	r2, #33	; 0x21
 80074da:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2220      	movs	r2, #32
 80074e0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2200      	movs	r2, #0
 80074e6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2207      	movs	r2, #7
 80074f2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	2207      	movs	r2, #7
 80074f8:	4619      	mov	r1, r3
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f001 fbca 	bl	8008c94 <USBH_CtlReq>
 8007500:	4603      	mov	r3, r0
}
 8007502:	4618      	mov	r0, r3
 8007504:	3708      	adds	r7, #8
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}

0800750a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800750a:	b580      	push	{r7, lr}
 800750c:	b086      	sub	sp, #24
 800750e:	af02      	add	r7, sp, #8
 8007510:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007518:	69db      	ldr	r3, [r3, #28]
 800751a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800751c:	2300      	movs	r3, #0
 800751e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007526:	2b01      	cmp	r3, #1
 8007528:	d002      	beq.n	8007530 <CDC_ProcessTransmission+0x26>
 800752a:	2b02      	cmp	r3, #2
 800752c:	d023      	beq.n	8007576 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800752e:	e07a      	b.n	8007626 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007534:	68fa      	ldr	r2, [r7, #12]
 8007536:	8b12      	ldrh	r2, [r2, #24]
 8007538:	4293      	cmp	r3, r2
 800753a:	d90b      	bls.n	8007554 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	69d9      	ldr	r1, [r3, #28]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	8b1a      	ldrh	r2, [r3, #24]
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	7b5b      	ldrb	r3, [r3, #13]
 8007548:	2001      	movs	r0, #1
 800754a:	9000      	str	r0, [sp, #0]
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f001 fea0 	bl	8009292 <USBH_BulkSendData>
 8007552:	e00b      	b.n	800756c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800755c:	b29a      	uxth	r2, r3
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	7b5b      	ldrb	r3, [r3, #13]
 8007562:	2001      	movs	r0, #1
 8007564:	9000      	str	r0, [sp, #0]
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f001 fe93 	bl	8009292 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2202      	movs	r2, #2
 8007570:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007574:	e057      	b.n	8007626 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	7b5b      	ldrb	r3, [r3, #13]
 800757a:	4619      	mov	r1, r3
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f005 f921 	bl	800c7c4 <USBH_LL_GetURBState>
 8007582:	4603      	mov	r3, r0
 8007584:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007586:	7afb      	ldrb	r3, [r7, #11]
 8007588:	2b01      	cmp	r3, #1
 800758a:	d136      	bne.n	80075fa <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007590:	68fa      	ldr	r2, [r7, #12]
 8007592:	8b12      	ldrh	r2, [r2, #24]
 8007594:	4293      	cmp	r3, r2
 8007596:	d90e      	bls.n	80075b6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800759c:	68fa      	ldr	r2, [r7, #12]
 800759e:	8b12      	ldrh	r2, [r2, #24]
 80075a0:	1a9a      	subs	r2, r3, r2
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	69db      	ldr	r3, [r3, #28]
 80075aa:	68fa      	ldr	r2, [r7, #12]
 80075ac:	8b12      	ldrh	r2, [r2, #24]
 80075ae:	441a      	add	r2, r3
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	61da      	str	r2, [r3, #28]
 80075b4:	e002      	b.n	80075bc <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2200      	movs	r2, #0
 80075ba:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d004      	beq.n	80075ce <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2201      	movs	r2, #1
 80075c8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 80075cc:	e006      	b.n	80075dc <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2200      	movs	r2, #0
 80075d2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 f892 	bl	8007700 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2204      	movs	r2, #4
 80075e0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80075f0:	2300      	movs	r3, #0
 80075f2:	2200      	movs	r2, #0
 80075f4:	f002 f8c0 	bl	8009778 <osMessageQueuePut>
      break;
 80075f8:	e014      	b.n	8007624 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 80075fa:	7afb      	ldrb	r3, [r7, #11]
 80075fc:	2b02      	cmp	r3, #2
 80075fe:	d111      	bne.n	8007624 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2201      	movs	r2, #1
 8007604:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2204      	movs	r2, #4
 800760c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800761c:	2300      	movs	r3, #0
 800761e:	2200      	movs	r2, #0
 8007620:	f002 f8aa 	bl	8009778 <osMessageQueuePut>
      break;
 8007624:	bf00      	nop
  }
}
 8007626:	bf00      	nop
 8007628:	3710      	adds	r7, #16
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}

0800762e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800762e:	b580      	push	{r7, lr}
 8007630:	b086      	sub	sp, #24
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800763c:	69db      	ldr	r3, [r3, #28]
 800763e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007640:	2300      	movs	r3, #0
 8007642:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800764a:	2b03      	cmp	r3, #3
 800764c:	d002      	beq.n	8007654 <CDC_ProcessReception+0x26>
 800764e:	2b04      	cmp	r3, #4
 8007650:	d00e      	beq.n	8007670 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007652:	e051      	b.n	80076f8 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	6a19      	ldr	r1, [r3, #32]
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	8b5a      	ldrh	r2, [r3, #26]
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	7b1b      	ldrb	r3, [r3, #12]
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f001 fe3b 	bl	80092dc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	2204      	movs	r2, #4
 800766a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800766e:	e043      	b.n	80076f8 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	7b1b      	ldrb	r3, [r3, #12]
 8007674:	4619      	mov	r1, r3
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f005 f8a4 	bl	800c7c4 <USBH_LL_GetURBState>
 800767c:	4603      	mov	r3, r0
 800767e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007680:	7cfb      	ldrb	r3, [r7, #19]
 8007682:	2b01      	cmp	r3, #1
 8007684:	d137      	bne.n	80076f6 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	7b1b      	ldrb	r3, [r3, #12]
 800768a:	4619      	mov	r1, r3
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f005 f807 	bl	800c6a0 <USBH_LL_GetLastXferSize>
 8007692:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007698:	68fa      	ldr	r2, [r7, #12]
 800769a:	429a      	cmp	r2, r3
 800769c:	d016      	beq.n	80076cc <CDC_ProcessReception+0x9e>
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	8b5b      	ldrh	r3, [r3, #26]
 80076a2:	461a      	mov	r2, r3
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d910      	bls.n	80076cc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	1ad2      	subs	r2, r2, r3
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	6a1a      	ldr	r2, [r3, #32]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	441a      	add	r2, r3
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	2203      	movs	r2, #3
 80076c6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 80076ca:	e006      	b.n	80076da <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	2200      	movs	r2, #0
 80076d0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 f81d 	bl	8007714 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2204      	movs	r2, #4
 80076de:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80076ee:	2300      	movs	r3, #0
 80076f0:	2200      	movs	r2, #0
 80076f2:	f002 f841 	bl	8009778 <osMessageQueuePut>
      break;
 80076f6:	bf00      	nop
  }
}
 80076f8:	bf00      	nop
 80076fa:	3718      	adds	r7, #24
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007708:	bf00      	nop
 800770a:	370c      	adds	r7, #12
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007714:	b480      	push	{r7}
 8007716:	b083      	sub	sp, #12
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800771c:	bf00      	nop
 800771e:	370c      	adds	r7, #12
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007730:	bf00      	nop
 8007732:	370c      	adds	r7, #12
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	60f8      	str	r0, [r7, #12]
 8007744:	60b9      	str	r1, [r7, #8]
 8007746:	4613      	mov	r3, r2
 8007748:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d101      	bne.n	8007754 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007750:	2302      	movs	r3, #2
 8007752:	e044      	b.n	80077de <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	79fa      	ldrb	r2, [r7, #7]
 8007758:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2200      	movs	r2, #0
 8007760:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2200      	movs	r2, #0
 8007768:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800776c:	68f8      	ldr	r0, [r7, #12]
 800776e:	f000 f841 	bl	80077f4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2200      	movs	r2, #0
 8007776:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2200      	movs	r2, #0
 8007786:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2200      	movs	r2, #0
 800778e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d003      	beq.n	80077a0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	68ba      	ldr	r2, [r7, #8]
 800779c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 80077a0:	2200      	movs	r2, #0
 80077a2:	2104      	movs	r1, #4
 80077a4:	2010      	movs	r0, #16
 80077a6:	f001 ff74 	bl	8009692 <osMessageQueueNew>
 80077aa:	4602      	mov	r2, r0
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 80077b2:	4b0d      	ldr	r3, [pc, #52]	; (80077e8 <USBH_Init+0xac>)
 80077b4:	4a0d      	ldr	r2, [pc, #52]	; (80077ec <USBH_Init+0xb0>)
 80077b6:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 80077b8:	4b0b      	ldr	r3, [pc, #44]	; (80077e8 <USBH_Init+0xac>)
 80077ba:	2280      	movs	r2, #128	; 0x80
 80077bc:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 80077be:	4b0a      	ldr	r3, [pc, #40]	; (80077e8 <USBH_Init+0xac>)
 80077c0:	2218      	movs	r2, #24
 80077c2:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 80077c4:	4a08      	ldr	r2, [pc, #32]	; (80077e8 <USBH_Init+0xac>)
 80077c6:	68f9      	ldr	r1, [r7, #12]
 80077c8:	4809      	ldr	r0, [pc, #36]	; (80077f0 <USBH_Init+0xb4>)
 80077ca:	f001 feb5 	bl	8009538 <osThreadNew>
 80077ce:	4602      	mov	r2, r0
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80077d6:	68f8      	ldr	r0, [r7, #12]
 80077d8:	f004 feae 	bl	800c538 <USBH_LL_Init>

  return USBH_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3710      	adds	r7, #16
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	200001a8 	.word	0x200001a8
 80077ec:	0800d2c4 	.word	0x0800d2c4
 80077f0:	08008471 	.word	0x08008471

080077f4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b085      	sub	sp, #20
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80077fc:	2300      	movs	r3, #0
 80077fe:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007800:	2300      	movs	r3, #0
 8007802:	60fb      	str	r3, [r7, #12]
 8007804:	e009      	b.n	800781a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	33e0      	adds	r3, #224	; 0xe0
 800780c:	009b      	lsls	r3, r3, #2
 800780e:	4413      	add	r3, r2
 8007810:	2200      	movs	r2, #0
 8007812:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	3301      	adds	r3, #1
 8007818:	60fb      	str	r3, [r7, #12]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2b0f      	cmp	r3, #15
 800781e:	d9f2      	bls.n	8007806 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007820:	2300      	movs	r3, #0
 8007822:	60fb      	str	r3, [r7, #12]
 8007824:	e009      	b.n	800783a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	4413      	add	r3, r2
 800782c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007830:	2200      	movs	r2, #0
 8007832:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	3301      	adds	r3, #1
 8007838:	60fb      	str	r3, [r7, #12]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007840:	d3f1      	bcc.n	8007826 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2201      	movs	r2, #1
 8007852:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2201      	movs	r2, #1
 8007860:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2240      	movs	r2, #64	; 0x40
 8007866:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2200      	movs	r2, #0
 8007872:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2201      	movs	r2, #1
 800787a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2200      	movs	r2, #0
 8007882:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800788e:	2300      	movs	r3, #0
}
 8007890:	4618      	mov	r0, r3
 8007892:	3714      	adds	r7, #20
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800789c:	b480      	push	{r7}
 800789e:	b085      	sub	sp, #20
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80078a6:	2300      	movs	r3, #0
 80078a8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d016      	beq.n	80078de <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d10e      	bne.n	80078d8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80078c0:	1c59      	adds	r1, r3, #1
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80078c8:	687a      	ldr	r2, [r7, #4]
 80078ca:	33de      	adds	r3, #222	; 0xde
 80078cc:	6839      	ldr	r1, [r7, #0]
 80078ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80078d2:	2300      	movs	r3, #0
 80078d4:	73fb      	strb	r3, [r7, #15]
 80078d6:	e004      	b.n	80078e2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80078d8:	2302      	movs	r3, #2
 80078da:	73fb      	strb	r3, [r7, #15]
 80078dc:	e001      	b.n	80078e2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80078de:	2302      	movs	r3, #2
 80078e0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80078e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3714      	adds	r7, #20
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr

080078f0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b085      	sub	sp, #20
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	460b      	mov	r3, r1
 80078fa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80078fc:	2300      	movs	r3, #0
 80078fe:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007906:	78fa      	ldrb	r2, [r7, #3]
 8007908:	429a      	cmp	r2, r3
 800790a:	d204      	bcs.n	8007916 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	78fa      	ldrb	r2, [r7, #3]
 8007910:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007914:	e001      	b.n	800791a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007916:	2302      	movs	r3, #2
 8007918:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800791a:	7bfb      	ldrb	r3, [r7, #15]
}
 800791c:	4618      	mov	r0, r3
 800791e:	3714      	adds	r7, #20
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr

08007928 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007928:	b480      	push	{r7}
 800792a:	b087      	sub	sp, #28
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	4608      	mov	r0, r1
 8007932:	4611      	mov	r1, r2
 8007934:	461a      	mov	r2, r3
 8007936:	4603      	mov	r3, r0
 8007938:	70fb      	strb	r3, [r7, #3]
 800793a:	460b      	mov	r3, r1
 800793c:	70bb      	strb	r3, [r7, #2]
 800793e:	4613      	mov	r3, r2
 8007940:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007942:	2300      	movs	r3, #0
 8007944:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007946:	2300      	movs	r3, #0
 8007948:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007950:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007952:	e025      	b.n	80079a0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007954:	7dfb      	ldrb	r3, [r7, #23]
 8007956:	221a      	movs	r2, #26
 8007958:	fb02 f303 	mul.w	r3, r2, r3
 800795c:	3308      	adds	r3, #8
 800795e:	68fa      	ldr	r2, [r7, #12]
 8007960:	4413      	add	r3, r2
 8007962:	3302      	adds	r3, #2
 8007964:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	795b      	ldrb	r3, [r3, #5]
 800796a:	78fa      	ldrb	r2, [r7, #3]
 800796c:	429a      	cmp	r2, r3
 800796e:	d002      	beq.n	8007976 <USBH_FindInterface+0x4e>
 8007970:	78fb      	ldrb	r3, [r7, #3]
 8007972:	2bff      	cmp	r3, #255	; 0xff
 8007974:	d111      	bne.n	800799a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800797a:	78ba      	ldrb	r2, [r7, #2]
 800797c:	429a      	cmp	r2, r3
 800797e:	d002      	beq.n	8007986 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007980:	78bb      	ldrb	r3, [r7, #2]
 8007982:	2bff      	cmp	r3, #255	; 0xff
 8007984:	d109      	bne.n	800799a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800798a:	787a      	ldrb	r2, [r7, #1]
 800798c:	429a      	cmp	r2, r3
 800798e:	d002      	beq.n	8007996 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007990:	787b      	ldrb	r3, [r7, #1]
 8007992:	2bff      	cmp	r3, #255	; 0xff
 8007994:	d101      	bne.n	800799a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007996:	7dfb      	ldrb	r3, [r7, #23]
 8007998:	e006      	b.n	80079a8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800799a:	7dfb      	ldrb	r3, [r7, #23]
 800799c:	3301      	adds	r3, #1
 800799e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80079a0:	7dfb      	ldrb	r3, [r7, #23]
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d9d6      	bls.n	8007954 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80079a6:	23ff      	movs	r3, #255	; 0xff
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	371c      	adds	r7, #28
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr

080079b4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b082      	sub	sp, #8
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f004 fdf7 	bl	800c5b0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80079c2:	2101      	movs	r1, #1
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f004 ff10 	bl	800c7ea <USBH_LL_DriverVBUS>

  return USBH_OK;
 80079ca:	2300      	movs	r3, #0
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3708      	adds	r7, #8
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b088      	sub	sp, #32
 80079d8:	af04      	add	r7, sp, #16
 80079da:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80079dc:	2302      	movs	r3, #2
 80079de:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80079e0:	2300      	movs	r3, #0
 80079e2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80079ea:	b2db      	uxtb	r3, r3
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d102      	bne.n	80079f6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2203      	movs	r2, #3
 80079f4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	2b0b      	cmp	r3, #11
 80079fe:	f200 8247 	bhi.w	8007e90 <USBH_Process+0x4bc>
 8007a02:	a201      	add	r2, pc, #4	; (adr r2, 8007a08 <USBH_Process+0x34>)
 8007a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a08:	08007a39 	.word	0x08007a39
 8007a0c:	08007a87 	.word	0x08007a87
 8007a10:	08007b0b 	.word	0x08007b0b
 8007a14:	08007e0f 	.word	0x08007e0f
 8007a18:	08007e91 	.word	0x08007e91
 8007a1c:	08007bcb 	.word	0x08007bcb
 8007a20:	08007d99 	.word	0x08007d99
 8007a24:	08007c1d 	.word	0x08007c1d
 8007a28:	08007c59 	.word	0x08007c59
 8007a2c:	08007c93 	.word	0x08007c93
 8007a30:	08007cf1 	.word	0x08007cf1
 8007a34:	08007df7 	.word	0x08007df7
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	f000 8227 	beq.w	8007e94 <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007a4c:	20c8      	movs	r0, #200	; 0xc8
 8007a4e:	f004 ff13 	bl	800c878 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f004 fe09 	bl	800c66a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f001 fe7a 	bl	8009778 <osMessageQueuePut>
#endif
#endif
      }
      break;
 8007a84:	e206      	b.n	8007e94 <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d107      	bne.n	8007aa0 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2202      	movs	r2, #2
 8007a9c:	701a      	strb	r2, [r3, #0]
 8007a9e:	e025      	b.n	8007aec <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007aa6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007aaa:	d914      	bls.n	8007ad6 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	b2da      	uxtb	r2, r3
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007ac2:	2b03      	cmp	r3, #3
 8007ac4:	d903      	bls.n	8007ace <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	220d      	movs	r2, #13
 8007aca:	701a      	strb	r2, [r3, #0]
 8007acc:	e00e      	b.n	8007aec <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	701a      	strb	r2, [r3, #0]
 8007ad4:	e00a      	b.n	8007aec <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007adc:	f103 020a 	add.w	r2, r3, #10
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007ae6:	200a      	movs	r0, #10
 8007ae8:	f004 fec6 	bl	800c878 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007b00:	2300      	movs	r3, #0
 8007b02:	2200      	movs	r2, #0
 8007b04:	f001 fe38 	bl	8009778 <osMessageQueuePut>
#endif
#endif
      break;
 8007b08:	e1cb      	b.n	8007ea2 <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d005      	beq.n	8007b20 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b1a:	2104      	movs	r1, #4
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007b20:	2064      	movs	r0, #100	; 0x64
 8007b22:	f004 fea9 	bl	800c878 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f004 fd78 	bl	800c61c <USBH_LL_GetSpeed>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	461a      	mov	r2, r3
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2205      	movs	r2, #5
 8007b3a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007b3c:	2100      	movs	r1, #0
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f001 fc19 	bl	8009376 <USBH_AllocPipe>
 8007b44:	4603      	mov	r3, r0
 8007b46:	461a      	mov	r2, r3
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007b4c:	2180      	movs	r1, #128	; 0x80
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f001 fc11 	bl	8009376 <USBH_AllocPipe>
 8007b54:	4603      	mov	r3, r0
 8007b56:	461a      	mov	r2, r3
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	7919      	ldrb	r1, [r3, #4]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007b70:	b292      	uxth	r2, r2
 8007b72:	9202      	str	r2, [sp, #8]
 8007b74:	2200      	movs	r2, #0
 8007b76:	9201      	str	r2, [sp, #4]
 8007b78:	9300      	str	r3, [sp, #0]
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	2280      	movs	r2, #128	; 0x80
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f001 fbca 	bl	8009318 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	7959      	ldrb	r1, [r3, #5]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007b98:	b292      	uxth	r2, r2
 8007b9a:	9202      	str	r2, [sp, #8]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	9201      	str	r2, [sp, #4]
 8007ba0:	9300      	str	r3, [sp, #0]
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f001 fbb6 	bl	8009318 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f001 fdd8 	bl	8009778 <osMessageQueuePut>
#endif
#endif
      break;
 8007bc8:	e16b      	b.n	8007ea2 <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 f96e 	bl	8007eac <USBH_HandleEnum>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007bd4:	7bbb      	ldrb	r3, [r7, #14]
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	f040 815d 	bne.w	8007e98 <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d103      	bne.n	8007bf8 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2208      	movs	r2, #8
 8007bf4:	701a      	strb	r2, [r3, #0]
 8007bf6:	e002      	b.n	8007bfe <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2207      	movs	r2, #7
 8007bfc:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2205      	movs	r2, #5
 8007c02:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007c12:	2300      	movs	r3, #0
 8007c14:	2200      	movs	r2, #0
 8007c16:	f001 fdaf 	bl	8009778 <osMessageQueuePut>
#endif
#endif
      }
      break;
 8007c1a:	e13d      	b.n	8007e98 <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	f000 813a 	beq.w	8007e9c <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007c2e:	2101      	movs	r1, #1
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2208      	movs	r2, #8
 8007c38:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2205      	movs	r2, #5
 8007c3e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007c4e:	2300      	movs	r3, #0
 8007c50:	2200      	movs	r2, #0
 8007c52:	f001 fd91 	bl	8009778 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 8007c56:	e121      	b.n	8007e9c <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	4619      	mov	r1, r3
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 fd02 	bl	800866c <USBH_SetCfg>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d102      	bne.n	8007c74 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2209      	movs	r2, #9
 8007c72:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007c88:	2300      	movs	r3, #0
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f001 fd74 	bl	8009778 <osMessageQueuePut>
#endif
#endif
      break;
 8007c90:	e107      	b.n	8007ea2 <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007c98:	f003 0320 	and.w	r3, r3, #32
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d015      	beq.n	8007ccc <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007ca0:	2101      	movs	r1, #1
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 fd05 	bl	80086b2 <USBH_SetFeature>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007cac:	7bbb      	ldrb	r3, [r7, #14]
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d103      	bne.n	8007cbc <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	220a      	movs	r2, #10
 8007cb8:	701a      	strb	r2, [r3, #0]
 8007cba:	e00a      	b.n	8007cd2 <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 8007cbc:	7bbb      	ldrb	r3, [r7, #14]
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	2b03      	cmp	r3, #3
 8007cc2:	d106      	bne.n	8007cd2 <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	220a      	movs	r2, #10
 8007cc8:	701a      	strb	r2, [r3, #0]
 8007cca:	e002      	b.n	8007cd2 <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	220a      	movs	r2, #10
 8007cd0:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f001 fd45 	bl	8009778 <osMessageQueuePut>
#endif
#endif
      break;
 8007cee:	e0d8      	b.n	8007ea2 <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d03f      	beq.n	8007d7a <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007d02:	2300      	movs	r3, #0
 8007d04:	73fb      	strb	r3, [r7, #15]
 8007d06:	e016      	b.n	8007d36 <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007d08:	7bfa      	ldrb	r2, [r7, #15]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	32de      	adds	r2, #222	; 0xde
 8007d0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d12:	791a      	ldrb	r2, [r3, #4]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d108      	bne.n	8007d30 <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007d1e:	7bfa      	ldrb	r2, [r7, #15]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	32de      	adds	r2, #222	; 0xde
 8007d24:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007d2e:	e005      	b.n	8007d3c <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007d30:	7bfb      	ldrb	r3, [r7, #15]
 8007d32:	3301      	adds	r3, #1
 8007d34:	73fb      	strb	r3, [r7, #15]
 8007d36:	7bfb      	ldrb	r3, [r7, #15]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d0e5      	beq.n	8007d08 <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d016      	beq.n	8007d74 <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	4798      	blx	r3
 8007d52:	4603      	mov	r3, r0
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d109      	bne.n	8007d6c <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2206      	movs	r2, #6
 8007d5c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007d64:	2103      	movs	r1, #3
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	4798      	blx	r3
 8007d6a:	e006      	b.n	8007d7a <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	220d      	movs	r2, #13
 8007d70:	701a      	strb	r2, [r3, #0]
 8007d72:	e002      	b.n	8007d7a <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	220d      	movs	r2, #13
 8007d78:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2205      	movs	r2, #5
 8007d7e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007d8e:	2300      	movs	r3, #0
 8007d90:	2200      	movs	r2, #0
 8007d92:	f001 fcf1 	bl	8009778 <osMessageQueuePut>
#endif
#endif
      break;
 8007d96:	e084      	b.n	8007ea2 <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d017      	beq.n	8007dd2 <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007da8:	691b      	ldr	r3, [r3, #16]
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	4798      	blx	r3
 8007dae:	4603      	mov	r3, r0
 8007db0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007db2:	7bbb      	ldrb	r3, [r7, #14]
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d103      	bne.n	8007dc2 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	220b      	movs	r2, #11
 8007dbe:	701a      	strb	r2, [r3, #0]
 8007dc0:	e00a      	b.n	8007dd8 <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 8007dc2:	7bbb      	ldrb	r3, [r7, #14]
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	2b02      	cmp	r3, #2
 8007dc8:	d106      	bne.n	8007dd8 <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	220d      	movs	r2, #13
 8007dce:	701a      	strb	r2, [r3, #0]
 8007dd0:	e002      	b.n	8007dd8 <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	220d      	movs	r2, #13
 8007dd6:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2205      	movs	r2, #5
 8007ddc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007dec:	2300      	movs	r3, #0
 8007dee:	2200      	movs	r2, #0
 8007df0:	f001 fcc2 	bl	8009778 <osMessageQueuePut>
#endif
#endif
      break;
 8007df4:	e055      	b.n	8007ea2 <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d04f      	beq.n	8007ea0 <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e06:	695b      	ldr	r3, [r3, #20]
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	4798      	blx	r3
      }
      break;
 8007e0c:	e048      	b.n	8007ea0 <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2200      	movs	r2, #0
 8007e12:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f7ff fcec 	bl	80077f4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d009      	beq.n	8007e3a <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e2c:	68db      	ldr	r3, [r3, #12]
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2200      	movs	r2, #0
 8007e36:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d005      	beq.n	8007e50 <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007e4a:	2105      	movs	r1, #5
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007e56:	b2db      	uxtb	r3, r3
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d107      	bne.n	8007e6c <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f7ff fda5 	bl	80079b4 <USBH_Start>
 8007e6a:	e002      	b.n	8007e72 <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f004 fb9f 	bl	800c5b0 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2201      	movs	r2, #1
 8007e76:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007e86:	2300      	movs	r3, #0
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f001 fc75 	bl	8009778 <osMessageQueuePut>
#endif
#endif
      break;
 8007e8e:	e008      	b.n	8007ea2 <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 8007e90:	bf00      	nop
 8007e92:	e006      	b.n	8007ea2 <USBH_Process+0x4ce>
      break;
 8007e94:	bf00      	nop
 8007e96:	e004      	b.n	8007ea2 <USBH_Process+0x4ce>
      break;
 8007e98:	bf00      	nop
 8007e9a:	e002      	b.n	8007ea2 <USBH_Process+0x4ce>
    break;
 8007e9c:	bf00      	nop
 8007e9e:	e000      	b.n	8007ea2 <USBH_Process+0x4ce>
      break;
 8007ea0:	bf00      	nop
  }
  return USBH_OK;
 8007ea2:	2300      	movs	r3, #0
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3710      	adds	r7, #16
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b088      	sub	sp, #32
 8007eb0:	af04      	add	r7, sp, #16
 8007eb2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	785b      	ldrb	r3, [r3, #1]
 8007ec0:	2b07      	cmp	r3, #7
 8007ec2:	f200 8208 	bhi.w	80082d6 <USBH_HandleEnum+0x42a>
 8007ec6:	a201      	add	r2, pc, #4	; (adr r2, 8007ecc <USBH_HandleEnum+0x20>)
 8007ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ecc:	08007eed 	.word	0x08007eed
 8007ed0:	08007fab 	.word	0x08007fab
 8007ed4:	08008015 	.word	0x08008015
 8007ed8:	080080a3 	.word	0x080080a3
 8007edc:	0800810d 	.word	0x0800810d
 8007ee0:	0800817d 	.word	0x0800817d
 8007ee4:	08008219 	.word	0x08008219
 8007ee8:	08008297 	.word	0x08008297
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007eec:	2108      	movs	r1, #8
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 faec 	bl	80084cc <USBH_Get_DevDesc>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007ef8:	7bbb      	ldrb	r3, [r7, #14]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d130      	bne.n	8007f60 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	7919      	ldrb	r1, [r3, #4]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007f1e:	687a      	ldr	r2, [r7, #4]
 8007f20:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007f22:	b292      	uxth	r2, r2
 8007f24:	9202      	str	r2, [sp, #8]
 8007f26:	2200      	movs	r2, #0
 8007f28:	9201      	str	r2, [sp, #4]
 8007f2a:	9300      	str	r3, [sp, #0]
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2280      	movs	r2, #128	; 0x80
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f001 f9f1 	bl	8009318 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	7959      	ldrb	r1, [r3, #5]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007f4a:	b292      	uxth	r2, r2
 8007f4c:	9202      	str	r2, [sp, #8]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	9201      	str	r2, [sp, #4]
 8007f52:	9300      	str	r3, [sp, #0]
 8007f54:	4603      	mov	r3, r0
 8007f56:	2200      	movs	r2, #0
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f001 f9dd 	bl	8009318 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007f5e:	e1bc      	b.n	80082da <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f60:	7bbb      	ldrb	r3, [r7, #14]
 8007f62:	2b03      	cmp	r3, #3
 8007f64:	f040 81b9 	bne.w	80082da <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007f6e:	3301      	adds	r3, #1
 8007f70:	b2da      	uxtb	r2, r3
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007f7e:	2b03      	cmp	r3, #3
 8007f80:	d903      	bls.n	8007f8a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	220d      	movs	r2, #13
 8007f86:	701a      	strb	r2, [r3, #0]
      break;
 8007f88:	e1a7      	b.n	80082da <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	795b      	ldrb	r3, [r3, #5]
 8007f8e:	4619      	mov	r1, r3
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f001 fa11 	bl	80093b8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	791b      	ldrb	r3, [r3, #4]
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f001 fa0b 	bl	80093b8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	701a      	strb	r2, [r3, #0]
      break;
 8007fa8:	e197      	b.n	80082da <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007faa:	2112      	movs	r1, #18
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 fa8d 	bl	80084cc <USBH_Get_DevDesc>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007fb6:	7bbb      	ldrb	r3, [r7, #14]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d103      	bne.n	8007fc4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2202      	movs	r2, #2
 8007fc0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007fc2:	e18c      	b.n	80082de <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007fc4:	7bbb      	ldrb	r3, [r7, #14]
 8007fc6:	2b03      	cmp	r3, #3
 8007fc8:	f040 8189 	bne.w	80082de <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	b2da      	uxtb	r2, r3
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007fe2:	2b03      	cmp	r3, #3
 8007fe4:	d903      	bls.n	8007fee <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	220d      	movs	r2, #13
 8007fea:	701a      	strb	r2, [r3, #0]
      break;
 8007fec:	e177      	b.n	80082de <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	795b      	ldrb	r3, [r3, #5]
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f001 f9df 	bl	80093b8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	791b      	ldrb	r3, [r3, #4]
 8007ffe:	4619      	mov	r1, r3
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f001 f9d9 	bl	80093b8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2200      	movs	r2, #0
 8008010:	701a      	strb	r2, [r3, #0]
      break;
 8008012:	e164      	b.n	80082de <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008014:	2101      	movs	r1, #1
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 fb04 	bl	8008624 <USBH_SetAddress>
 800801c:	4603      	mov	r3, r0
 800801e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008020:	7bbb      	ldrb	r3, [r7, #14]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d132      	bne.n	800808c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8008026:	2002      	movs	r0, #2
 8008028:	f004 fc26 	bl	800c878 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2201      	movs	r2, #1
 8008030:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2203      	movs	r2, #3
 8008038:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	7919      	ldrb	r1, [r3, #4]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800804a:	687a      	ldr	r2, [r7, #4]
 800804c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800804e:	b292      	uxth	r2, r2
 8008050:	9202      	str	r2, [sp, #8]
 8008052:	2200      	movs	r2, #0
 8008054:	9201      	str	r2, [sp, #4]
 8008056:	9300      	str	r3, [sp, #0]
 8008058:	4603      	mov	r3, r0
 800805a:	2280      	movs	r2, #128	; 0x80
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f001 f95b 	bl	8009318 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	7959      	ldrb	r1, [r3, #5]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008076:	b292      	uxth	r2, r2
 8008078:	9202      	str	r2, [sp, #8]
 800807a:	2200      	movs	r2, #0
 800807c:	9201      	str	r2, [sp, #4]
 800807e:	9300      	str	r3, [sp, #0]
 8008080:	4603      	mov	r3, r0
 8008082:	2200      	movs	r2, #0
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f001 f947 	bl	8009318 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800808a:	e12a      	b.n	80082e2 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800808c:	7bbb      	ldrb	r3, [r7, #14]
 800808e:	2b03      	cmp	r3, #3
 8008090:	f040 8127 	bne.w	80082e2 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	220d      	movs	r2, #13
 8008098:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2200      	movs	r2, #0
 800809e:	705a      	strb	r2, [r3, #1]
      break;
 80080a0:	e11f      	b.n	80082e2 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80080a2:	2109      	movs	r1, #9
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 fa39 	bl	800851c <USBH_Get_CfgDesc>
 80080aa:	4603      	mov	r3, r0
 80080ac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80080ae:	7bbb      	ldrb	r3, [r7, #14]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d103      	bne.n	80080bc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2204      	movs	r2, #4
 80080b8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80080ba:	e114      	b.n	80082e6 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80080bc:	7bbb      	ldrb	r3, [r7, #14]
 80080be:	2b03      	cmp	r3, #3
 80080c0:	f040 8111 	bne.w	80082e6 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80080ca:	3301      	adds	r3, #1
 80080cc:	b2da      	uxtb	r2, r3
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80080da:	2b03      	cmp	r3, #3
 80080dc:	d903      	bls.n	80080e6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	220d      	movs	r2, #13
 80080e2:	701a      	strb	r2, [r3, #0]
      break;
 80080e4:	e0ff      	b.n	80082e6 <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	795b      	ldrb	r3, [r3, #5]
 80080ea:	4619      	mov	r1, r3
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f001 f963 	bl	80093b8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	791b      	ldrb	r3, [r3, #4]
 80080f6:	4619      	mov	r1, r3
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f001 f95d 	bl	80093b8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2200      	movs	r2, #0
 8008102:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	701a      	strb	r2, [r3, #0]
      break;
 800810a:	e0ec      	b.n	80082e6 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8008112:	4619      	mov	r1, r3
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 fa01 	bl	800851c <USBH_Get_CfgDesc>
 800811a:	4603      	mov	r3, r0
 800811c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800811e:	7bbb      	ldrb	r3, [r7, #14]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d103      	bne.n	800812c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2205      	movs	r2, #5
 8008128:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800812a:	e0de      	b.n	80082ea <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800812c:	7bbb      	ldrb	r3, [r7, #14]
 800812e:	2b03      	cmp	r3, #3
 8008130:	f040 80db 	bne.w	80082ea <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800813a:	3301      	adds	r3, #1
 800813c:	b2da      	uxtb	r2, r3
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800814a:	2b03      	cmp	r3, #3
 800814c:	d903      	bls.n	8008156 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	220d      	movs	r2, #13
 8008152:	701a      	strb	r2, [r3, #0]
      break;
 8008154:	e0c9      	b.n	80082ea <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	795b      	ldrb	r3, [r3, #5]
 800815a:	4619      	mov	r1, r3
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f001 f92b 	bl	80093b8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	791b      	ldrb	r3, [r3, #4]
 8008166:	4619      	mov	r1, r3
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f001 f925 	bl	80093b8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2200      	movs	r2, #0
 8008172:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2200      	movs	r2, #0
 8008178:	701a      	strb	r2, [r3, #0]
      break;
 800817a:	e0b6      	b.n	80082ea <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008182:	2b00      	cmp	r3, #0
 8008184:	d036      	beq.n	80081f4 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008192:	23ff      	movs	r3, #255	; 0xff
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 f9e5 	bl	8008564 <USBH_Get_StringDesc>
 800819a:	4603      	mov	r3, r0
 800819c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800819e:	7bbb      	ldrb	r3, [r7, #14]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d111      	bne.n	80081c8 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2206      	movs	r2, #6
 80081a8:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2205      	movs	r2, #5
 80081ae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80081be:	2300      	movs	r3, #0
 80081c0:	2200      	movs	r2, #0
 80081c2:	f001 fad9 	bl	8009778 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80081c6:	e092      	b.n	80082ee <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80081c8:	7bbb      	ldrb	r3, [r7, #14]
 80081ca:	2b03      	cmp	r3, #3
 80081cc:	f040 808f 	bne.w	80082ee <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2206      	movs	r2, #6
 80081d4:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2205      	movs	r2, #5
 80081da:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80081ea:	2300      	movs	r3, #0
 80081ec:	2200      	movs	r2, #0
 80081ee:	f001 fac3 	bl	8009778 <osMessageQueuePut>
      break;
 80081f2:	e07c      	b.n	80082ee <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2206      	movs	r2, #6
 80081f8:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2205      	movs	r2, #5
 80081fe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800820e:	2300      	movs	r3, #0
 8008210:	2200      	movs	r2, #0
 8008212:	f001 fab1 	bl	8009778 <osMessageQueuePut>
      break;
 8008216:	e06a      	b.n	80082ee <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800821e:	2b00      	cmp	r3, #0
 8008220:	d027      	beq.n	8008272 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800822e:	23ff      	movs	r3, #255	; 0xff
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 f997 	bl	8008564 <USBH_Get_StringDesc>
 8008236:	4603      	mov	r3, r0
 8008238:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800823a:	7bbb      	ldrb	r3, [r7, #14]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d103      	bne.n	8008248 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2207      	movs	r2, #7
 8008244:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008246:	e054      	b.n	80082f2 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008248:	7bbb      	ldrb	r3, [r7, #14]
 800824a:	2b03      	cmp	r3, #3
 800824c:	d151      	bne.n	80082f2 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2207      	movs	r2, #7
 8008252:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2205      	movs	r2, #5
 8008258:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008268:	2300      	movs	r3, #0
 800826a:	2200      	movs	r2, #0
 800826c:	f001 fa84 	bl	8009778 <osMessageQueuePut>
      break;
 8008270:	e03f      	b.n	80082f2 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2207      	movs	r2, #7
 8008276:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2205      	movs	r2, #5
 800827c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800828c:	2300      	movs	r3, #0
 800828e:	2200      	movs	r2, #0
 8008290:	f001 fa72 	bl	8009778 <osMessageQueuePut>
      break;
 8008294:	e02d      	b.n	80082f2 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800829c:	2b00      	cmp	r3, #0
 800829e:	d017      	beq.n	80082d0 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80082ac:	23ff      	movs	r3, #255	; 0xff
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 f958 	bl	8008564 <USBH_Get_StringDesc>
 80082b4:	4603      	mov	r3, r0
 80082b6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80082b8:	7bbb      	ldrb	r3, [r7, #14]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d102      	bne.n	80082c4 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80082be:	2300      	movs	r3, #0
 80082c0:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80082c2:	e018      	b.n	80082f6 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80082c4:	7bbb      	ldrb	r3, [r7, #14]
 80082c6:	2b03      	cmp	r3, #3
 80082c8:	d115      	bne.n	80082f6 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 80082ca:	2300      	movs	r3, #0
 80082cc:	73fb      	strb	r3, [r7, #15]
      break;
 80082ce:	e012      	b.n	80082f6 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 80082d0:	2300      	movs	r3, #0
 80082d2:	73fb      	strb	r3, [r7, #15]
      break;
 80082d4:	e00f      	b.n	80082f6 <USBH_HandleEnum+0x44a>

    default:
      break;
 80082d6:	bf00      	nop
 80082d8:	e00e      	b.n	80082f8 <USBH_HandleEnum+0x44c>
      break;
 80082da:	bf00      	nop
 80082dc:	e00c      	b.n	80082f8 <USBH_HandleEnum+0x44c>
      break;
 80082de:	bf00      	nop
 80082e0:	e00a      	b.n	80082f8 <USBH_HandleEnum+0x44c>
      break;
 80082e2:	bf00      	nop
 80082e4:	e008      	b.n	80082f8 <USBH_HandleEnum+0x44c>
      break;
 80082e6:	bf00      	nop
 80082e8:	e006      	b.n	80082f8 <USBH_HandleEnum+0x44c>
      break;
 80082ea:	bf00      	nop
 80082ec:	e004      	b.n	80082f8 <USBH_HandleEnum+0x44c>
      break;
 80082ee:	bf00      	nop
 80082f0:	e002      	b.n	80082f8 <USBH_HandleEnum+0x44c>
      break;
 80082f2:	bf00      	nop
 80082f4:	e000      	b.n	80082f8 <USBH_HandleEnum+0x44c>
      break;
 80082f6:	bf00      	nop
  }
  return Status;
 80082f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3710      	adds	r7, #16
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
 8008302:	bf00      	nop

08008304 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008304:	b480      	push	{r7}
 8008306:	b083      	sub	sp, #12
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	683a      	ldr	r2, [r7, #0]
 8008312:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008316:	bf00      	nop
 8008318:	370c      	adds	r7, #12
 800831a:	46bd      	mov	sp, r7
 800831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008320:	4770      	bx	lr

08008322 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008322:	b580      	push	{r7, lr}
 8008324:	b082      	sub	sp, #8
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008330:	1c5a      	adds	r2, r3, #1
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 f804 	bl	8008346 <USBH_HandleSof>
}
 800833e:	bf00      	nop
 8008340:	3708      	adds	r7, #8
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008346:	b580      	push	{r7, lr}
 8008348:	b082      	sub	sp, #8
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	b2db      	uxtb	r3, r3
 8008354:	2b0b      	cmp	r3, #11
 8008356:	d10a      	bne.n	800836e <USBH_HandleSof+0x28>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800835e:	2b00      	cmp	r3, #0
 8008360:	d005      	beq.n	800836e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008368:	699b      	ldr	r3, [r3, #24]
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	4798      	blx	r3
  }
}
 800836e:	bf00      	nop
 8008370:	3708      	adds	r7, #8
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}

08008376 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008376:	b580      	push	{r7, lr}
 8008378:	b082      	sub	sp, #8
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2201      	movs	r2, #1
 8008382:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2201      	movs	r2, #1
 800838a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800839a:	2300      	movs	r3, #0
 800839c:	2200      	movs	r2, #0
 800839e:	f001 f9eb 	bl	8009778 <osMessageQueuePut>
#endif
#endif

  return;
 80083a2:	bf00      	nop
}
 80083a4:	3708      	adds	r7, #8
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}

080083aa <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80083aa:	b480      	push	{r7}
 80083ac:	b083      	sub	sp, #12
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2200      	movs	r2, #0
 80083b6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80083ba:	bf00      	nop
}
 80083bc:	370c      	adds	r7, #12
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr

080083c6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80083c6:	b580      	push	{r7, lr}
 80083c8:	b082      	sub	sp, #8
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2201      	movs	r2, #1
 80083d2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2200      	movs	r2, #0
 80083da:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2201      	movs	r2, #1
 80083ea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80083fa:	2300      	movs	r3, #0
 80083fc:	2200      	movs	r2, #0
 80083fe:	f001 f9bb 	bl	8009778 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8008402:	2300      	movs	r3, #0
}
 8008404:	4618      	mov	r0, r3
 8008406:	3708      	adds	r7, #8
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b082      	sub	sp, #8
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2201      	movs	r2, #1
 8008418:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2200      	movs	r2, #0
 8008420:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2200      	movs	r2, #0
 8008428:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f004 f8da 	bl	800c5e6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	791b      	ldrb	r3, [r3, #4]
 8008436:	4619      	mov	r1, r3
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 ffbd 	bl	80093b8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	795b      	ldrb	r3, [r3, #5]
 8008442:	4619      	mov	r1, r3
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 ffb7 	bl	80093b8 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2201      	movs	r2, #1
 800844e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800845e:	2300      	movs	r3, #0
 8008460:	2200      	movs	r2, #0
 8008462:	f001 f989 	bl	8009778 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8008466:	2300      	movs	r3, #0
}
 8008468:	4618      	mov	r0, r3
 800846a:	3708      	adds	r7, #8
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8008484:	f04f 33ff 	mov.w	r3, #4294967295
 8008488:	2200      	movs	r2, #0
 800848a:	f001 f9d5 	bl	8009838 <osMessageQueueGet>
 800848e:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d1f0      	bne.n	8008478 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f7ff fa9c 	bl	80079d4 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800849c:	e7ec      	b.n	8008478 <USBH_Process_OS+0x8>

0800849e <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800849e:	b580      	push	{r7, lr}
 80084a0:	b082      	sub	sp, #8
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2201      	movs	r2, #1
 80084aa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80084ba:	2300      	movs	r3, #0
 80084bc:	2200      	movs	r2, #0
 80084be:	f001 f95b 	bl	8009778 <osMessageQueuePut>
#endif

  return USBH_OK;
 80084c2:	2300      	movs	r3, #0
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3708      	adds	r7, #8
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b086      	sub	sp, #24
 80084d0:	af02      	add	r7, sp, #8
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	460b      	mov	r3, r1
 80084d6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80084de:	78fb      	ldrb	r3, [r7, #3]
 80084e0:	b29b      	uxth	r3, r3
 80084e2:	9300      	str	r3, [sp, #0]
 80084e4:	4613      	mov	r3, r2
 80084e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80084ea:	2100      	movs	r1, #0
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 f864 	bl	80085ba <USBH_GetDescriptor>
 80084f2:	4603      	mov	r3, r0
 80084f4:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80084f6:	7bfb      	ldrb	r3, [r7, #15]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d10a      	bne.n	8008512 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008508:	78fa      	ldrb	r2, [r7, #3]
 800850a:	b292      	uxth	r2, r2
 800850c:	4619      	mov	r1, r3
 800850e:	f000 f918 	bl	8008742 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008512:	7bfb      	ldrb	r3, [r7, #15]
}
 8008514:	4618      	mov	r0, r3
 8008516:	3710      	adds	r7, #16
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800851c:	b580      	push	{r7, lr}
 800851e:	b086      	sub	sp, #24
 8008520:	af02      	add	r7, sp, #8
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	460b      	mov	r3, r1
 8008526:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	331c      	adds	r3, #28
 800852c:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800852e:	887b      	ldrh	r3, [r7, #2]
 8008530:	9300      	str	r3, [sp, #0]
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008538:	2100      	movs	r1, #0
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 f83d 	bl	80085ba <USBH_GetDescriptor>
 8008540:	4603      	mov	r3, r0
 8008542:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008544:	7bfb      	ldrb	r3, [r7, #15]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d107      	bne.n	800855a <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800854a:	887b      	ldrh	r3, [r7, #2]
 800854c:	461a      	mov	r2, r3
 800854e:	68b9      	ldr	r1, [r7, #8]
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 f987 	bl	8008864 <USBH_ParseCfgDesc>
 8008556:	4603      	mov	r3, r0
 8008558:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800855a:	7bfb      	ldrb	r3, [r7, #15]
}
 800855c:	4618      	mov	r0, r3
 800855e:	3710      	adds	r7, #16
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b088      	sub	sp, #32
 8008568:	af02      	add	r7, sp, #8
 800856a:	60f8      	str	r0, [r7, #12]
 800856c:	607a      	str	r2, [r7, #4]
 800856e:	461a      	mov	r2, r3
 8008570:	460b      	mov	r3, r1
 8008572:	72fb      	strb	r3, [r7, #11]
 8008574:	4613      	mov	r3, r2
 8008576:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8008578:	7afb      	ldrb	r3, [r7, #11]
 800857a:	b29b      	uxth	r3, r3
 800857c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008580:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008588:	893b      	ldrh	r3, [r7, #8]
 800858a:	9300      	str	r3, [sp, #0]
 800858c:	460b      	mov	r3, r1
 800858e:	2100      	movs	r1, #0
 8008590:	68f8      	ldr	r0, [r7, #12]
 8008592:	f000 f812 	bl	80085ba <USBH_GetDescriptor>
 8008596:	4603      	mov	r3, r0
 8008598:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800859a:	7dfb      	ldrb	r3, [r7, #23]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d107      	bne.n	80085b0 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80085a6:	893a      	ldrh	r2, [r7, #8]
 80085a8:	6879      	ldr	r1, [r7, #4]
 80085aa:	4618      	mov	r0, r3
 80085ac:	f000 fb24 	bl	8008bf8 <USBH_ParseStringDesc>
  }

  return status;
 80085b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3718      	adds	r7, #24
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}

080085ba <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80085ba:	b580      	push	{r7, lr}
 80085bc:	b084      	sub	sp, #16
 80085be:	af00      	add	r7, sp, #0
 80085c0:	60f8      	str	r0, [r7, #12]
 80085c2:	607b      	str	r3, [r7, #4]
 80085c4:	460b      	mov	r3, r1
 80085c6:	72fb      	strb	r3, [r7, #11]
 80085c8:	4613      	mov	r3, r2
 80085ca:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	789b      	ldrb	r3, [r3, #2]
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d11c      	bne.n	800860e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80085d4:	7afb      	ldrb	r3, [r7, #11]
 80085d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80085da:	b2da      	uxtb	r2, r3
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2206      	movs	r2, #6
 80085e4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	893a      	ldrh	r2, [r7, #8]
 80085ea:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80085ec:	893b      	ldrh	r3, [r7, #8]
 80085ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80085f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085f6:	d104      	bne.n	8008602 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f240 4209 	movw	r2, #1033	; 0x409
 80085fe:	829a      	strh	r2, [r3, #20]
 8008600:	e002      	b.n	8008608 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2200      	movs	r2, #0
 8008606:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	8b3a      	ldrh	r2, [r7, #24]
 800860c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800860e:	8b3b      	ldrh	r3, [r7, #24]
 8008610:	461a      	mov	r2, r3
 8008612:	6879      	ldr	r1, [r7, #4]
 8008614:	68f8      	ldr	r0, [r7, #12]
 8008616:	f000 fb3d 	bl	8008c94 <USBH_CtlReq>
 800861a:	4603      	mov	r3, r0
}
 800861c:	4618      	mov	r0, r3
 800861e:	3710      	adds	r7, #16
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b082      	sub	sp, #8
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	460b      	mov	r3, r1
 800862e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	789b      	ldrb	r3, [r3, #2]
 8008634:	2b01      	cmp	r3, #1
 8008636:	d10f      	bne.n	8008658 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2200      	movs	r2, #0
 800863c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2205      	movs	r2, #5
 8008642:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008644:	78fb      	ldrb	r3, [r7, #3]
 8008646:	b29a      	uxth	r2, r3
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2200      	movs	r2, #0
 8008650:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2200      	movs	r2, #0
 8008656:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008658:	2200      	movs	r2, #0
 800865a:	2100      	movs	r1, #0
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 fb19 	bl	8008c94 <USBH_CtlReq>
 8008662:	4603      	mov	r3, r0
}
 8008664:	4618      	mov	r0, r3
 8008666:	3708      	adds	r7, #8
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b082      	sub	sp, #8
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	460b      	mov	r3, r1
 8008676:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	789b      	ldrb	r3, [r3, #2]
 800867c:	2b01      	cmp	r3, #1
 800867e:	d10e      	bne.n	800869e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2200      	movs	r2, #0
 8008684:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2209      	movs	r2, #9
 800868a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	887a      	ldrh	r2, [r7, #2]
 8008690:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2200      	movs	r2, #0
 8008696:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2200      	movs	r2, #0
 800869c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800869e:	2200      	movs	r2, #0
 80086a0:	2100      	movs	r1, #0
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 faf6 	bl	8008c94 <USBH_CtlReq>
 80086a8:	4603      	mov	r3, r0
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3708      	adds	r7, #8
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}

080086b2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80086b2:	b580      	push	{r7, lr}
 80086b4:	b082      	sub	sp, #8
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	6078      	str	r0, [r7, #4]
 80086ba:	460b      	mov	r3, r1
 80086bc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	789b      	ldrb	r3, [r3, #2]
 80086c2:	2b01      	cmp	r3, #1
 80086c4:	d10f      	bne.n	80086e6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2203      	movs	r2, #3
 80086d0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80086d2:	78fb      	ldrb	r3, [r7, #3]
 80086d4:	b29a      	uxth	r2, r3
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2200      	movs	r2, #0
 80086de:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2200      	movs	r2, #0
 80086e4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80086e6:	2200      	movs	r2, #0
 80086e8:	2100      	movs	r1, #0
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 fad2 	bl	8008c94 <USBH_CtlReq>
 80086f0:	4603      	mov	r3, r0
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3708      	adds	r7, #8
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}

080086fa <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80086fa:	b580      	push	{r7, lr}
 80086fc:	b082      	sub	sp, #8
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
 8008702:	460b      	mov	r3, r1
 8008704:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	789b      	ldrb	r3, [r3, #2]
 800870a:	2b01      	cmp	r3, #1
 800870c:	d10f      	bne.n	800872e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2202      	movs	r2, #2
 8008712:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2201      	movs	r2, #1
 8008718:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2200      	movs	r2, #0
 800871e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008720:	78fb      	ldrb	r3, [r7, #3]
 8008722:	b29a      	uxth	r2, r3
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2200      	movs	r2, #0
 800872c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800872e:	2200      	movs	r2, #0
 8008730:	2100      	movs	r1, #0
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f000 faae 	bl	8008c94 <USBH_CtlReq>
 8008738:	4603      	mov	r3, r0
}
 800873a:	4618      	mov	r0, r3
 800873c:	3708      	adds	r7, #8
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}

08008742 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008742:	b480      	push	{r7}
 8008744:	b085      	sub	sp, #20
 8008746:	af00      	add	r7, sp, #0
 8008748:	60f8      	str	r0, [r7, #12]
 800874a:	60b9      	str	r1, [r7, #8]
 800874c:	4613      	mov	r3, r2
 800874e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	781a      	ldrb	r2, [r3, #0]
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	785a      	ldrb	r2, [r3, #1]
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	3302      	adds	r3, #2
 8008764:	781b      	ldrb	r3, [r3, #0]
 8008766:	b29a      	uxth	r2, r3
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	3303      	adds	r3, #3
 800876c:	781b      	ldrb	r3, [r3, #0]
 800876e:	b29b      	uxth	r3, r3
 8008770:	021b      	lsls	r3, r3, #8
 8008772:	b29b      	uxth	r3, r3
 8008774:	4313      	orrs	r3, r2
 8008776:	b29a      	uxth	r2, r3
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	791a      	ldrb	r2, [r3, #4]
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	795a      	ldrb	r2, [r3, #5]
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	799a      	ldrb	r2, [r3, #6]
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	79da      	ldrb	r2, [r3, #7]
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	79db      	ldrb	r3, [r3, #7]
 80087a0:	2b20      	cmp	r3, #32
 80087a2:	dc11      	bgt.n	80087c8 <USBH_ParseDevDesc+0x86>
 80087a4:	2b08      	cmp	r3, #8
 80087a6:	db16      	blt.n	80087d6 <USBH_ParseDevDesc+0x94>
 80087a8:	3b08      	subs	r3, #8
 80087aa:	2201      	movs	r2, #1
 80087ac:	fa02 f303 	lsl.w	r3, r2, r3
 80087b0:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80087b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	bf14      	ite	ne
 80087bc:	2301      	movne	r3, #1
 80087be:	2300      	moveq	r3, #0
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d102      	bne.n	80087cc <USBH_ParseDevDesc+0x8a>
 80087c6:	e006      	b.n	80087d6 <USBH_ParseDevDesc+0x94>
 80087c8:	2b40      	cmp	r3, #64	; 0x40
 80087ca:	d104      	bne.n	80087d6 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	79da      	ldrb	r2, [r3, #7]
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	71da      	strb	r2, [r3, #7]
      break;
 80087d4:	e003      	b.n	80087de <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2240      	movs	r2, #64	; 0x40
 80087da:	71da      	strb	r2, [r3, #7]
      break;
 80087dc:	bf00      	nop
  }

  if (length > 8U)
 80087de:	88fb      	ldrh	r3, [r7, #6]
 80087e0:	2b08      	cmp	r3, #8
 80087e2:	d939      	bls.n	8008858 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	3308      	adds	r3, #8
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	b29a      	uxth	r2, r3
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	3309      	adds	r3, #9
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	021b      	lsls	r3, r3, #8
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	4313      	orrs	r3, r2
 80087fa:	b29a      	uxth	r2, r3
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	330a      	adds	r3, #10
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	b29a      	uxth	r2, r3
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	330b      	adds	r3, #11
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	b29b      	uxth	r3, r3
 8008810:	021b      	lsls	r3, r3, #8
 8008812:	b29b      	uxth	r3, r3
 8008814:	4313      	orrs	r3, r2
 8008816:	b29a      	uxth	r2, r3
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	330c      	adds	r3, #12
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	b29a      	uxth	r2, r3
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	330d      	adds	r3, #13
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	b29b      	uxth	r3, r3
 800882c:	021b      	lsls	r3, r3, #8
 800882e:	b29b      	uxth	r3, r3
 8008830:	4313      	orrs	r3, r2
 8008832:	b29a      	uxth	r2, r3
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	7b9a      	ldrb	r2, [r3, #14]
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	7bda      	ldrb	r2, [r3, #15]
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	7c1a      	ldrb	r2, [r3, #16]
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	7c5a      	ldrb	r2, [r3, #17]
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	745a      	strb	r2, [r3, #17]
  }
}
 8008858:	bf00      	nop
 800885a:	3714      	adds	r7, #20
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr

08008864 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b08c      	sub	sp, #48	; 0x30
 8008868:	af00      	add	r7, sp, #0
 800886a:	60f8      	str	r0, [r7, #12]
 800886c:	60b9      	str	r1, [r7, #8]
 800886e:	4613      	mov	r3, r2
 8008870:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008878:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800887a:	2300      	movs	r3, #0
 800887c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008884:	2300      	movs	r3, #0
 8008886:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800888a:	2300      	movs	r3, #0
 800888c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	781a      	ldrb	r2, [r3, #0]
 8008898:	6a3b      	ldr	r3, [r7, #32]
 800889a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	785a      	ldrb	r2, [r3, #1]
 80088a0:	6a3b      	ldr	r3, [r7, #32]
 80088a2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	3302      	adds	r3, #2
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	b29a      	uxth	r2, r3
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	3303      	adds	r3, #3
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	021b      	lsls	r3, r3, #8
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	4313      	orrs	r3, r2
 80088ba:	b29b      	uxth	r3, r3
 80088bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088c0:	bf28      	it	cs
 80088c2:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80088c6:	b29a      	uxth	r2, r3
 80088c8:	6a3b      	ldr	r3, [r7, #32]
 80088ca:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	791a      	ldrb	r2, [r3, #4]
 80088d0:	6a3b      	ldr	r3, [r7, #32]
 80088d2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	795a      	ldrb	r2, [r3, #5]
 80088d8:	6a3b      	ldr	r3, [r7, #32]
 80088da:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	799a      	ldrb	r2, [r3, #6]
 80088e0:	6a3b      	ldr	r3, [r7, #32]
 80088e2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	79da      	ldrb	r2, [r3, #7]
 80088e8:	6a3b      	ldr	r3, [r7, #32]
 80088ea:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	7a1a      	ldrb	r2, [r3, #8]
 80088f0:	6a3b      	ldr	r3, [r7, #32]
 80088f2:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 80088f4:	6a3b      	ldr	r3, [r7, #32]
 80088f6:	781b      	ldrb	r3, [r3, #0]
 80088f8:	2b09      	cmp	r3, #9
 80088fa:	d002      	beq.n	8008902 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80088fc:	6a3b      	ldr	r3, [r7, #32]
 80088fe:	2209      	movs	r2, #9
 8008900:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008902:	88fb      	ldrh	r3, [r7, #6]
 8008904:	2b09      	cmp	r3, #9
 8008906:	f240 809d 	bls.w	8008a44 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800890a:	2309      	movs	r3, #9
 800890c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800890e:	2300      	movs	r3, #0
 8008910:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008912:	e081      	b.n	8008a18 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008914:	f107 0316 	add.w	r3, r7, #22
 8008918:	4619      	mov	r1, r3
 800891a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800891c:	f000 f99f 	bl	8008c5e <USBH_GetNextDesc>
 8008920:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008924:	785b      	ldrb	r3, [r3, #1]
 8008926:	2b04      	cmp	r3, #4
 8008928:	d176      	bne.n	8008a18 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800892a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800892c:	781b      	ldrb	r3, [r3, #0]
 800892e:	2b09      	cmp	r3, #9
 8008930:	d002      	beq.n	8008938 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008934:	2209      	movs	r2, #9
 8008936:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008938:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800893c:	221a      	movs	r2, #26
 800893e:	fb02 f303 	mul.w	r3, r2, r3
 8008942:	3308      	adds	r3, #8
 8008944:	6a3a      	ldr	r2, [r7, #32]
 8008946:	4413      	add	r3, r2
 8008948:	3302      	adds	r3, #2
 800894a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800894c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800894e:	69f8      	ldr	r0, [r7, #28]
 8008950:	f000 f87e 	bl	8008a50 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008954:	2300      	movs	r3, #0
 8008956:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800895a:	2300      	movs	r3, #0
 800895c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800895e:	e043      	b.n	80089e8 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008960:	f107 0316 	add.w	r3, r7, #22
 8008964:	4619      	mov	r1, r3
 8008966:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008968:	f000 f979 	bl	8008c5e <USBH_GetNextDesc>
 800896c:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800896e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008970:	785b      	ldrb	r3, [r3, #1]
 8008972:	2b05      	cmp	r3, #5
 8008974:	d138      	bne.n	80089e8 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8008976:	69fb      	ldr	r3, [r7, #28]
 8008978:	795b      	ldrb	r3, [r3, #5]
 800897a:	2b01      	cmp	r3, #1
 800897c:	d10f      	bne.n	800899e <USBH_ParseCfgDesc+0x13a>
 800897e:	69fb      	ldr	r3, [r7, #28]
 8008980:	799b      	ldrb	r3, [r3, #6]
 8008982:	2b02      	cmp	r3, #2
 8008984:	d10b      	bne.n	800899e <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008986:	69fb      	ldr	r3, [r7, #28]
 8008988:	79db      	ldrb	r3, [r3, #7]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d10f      	bne.n	80089ae <USBH_ParseCfgDesc+0x14a>
 800898e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	2b09      	cmp	r3, #9
 8008994:	d00b      	beq.n	80089ae <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8008996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008998:	2209      	movs	r2, #9
 800899a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800899c:	e007      	b.n	80089ae <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800899e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	2b07      	cmp	r3, #7
 80089a4:	d004      	beq.n	80089b0 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80089a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a8:	2207      	movs	r2, #7
 80089aa:	701a      	strb	r2, [r3, #0]
 80089ac:	e000      	b.n	80089b0 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80089ae:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80089b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80089b4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80089b8:	3201      	adds	r2, #1
 80089ba:	00d2      	lsls	r2, r2, #3
 80089bc:	211a      	movs	r1, #26
 80089be:	fb01 f303 	mul.w	r3, r1, r3
 80089c2:	4413      	add	r3, r2
 80089c4:	3308      	adds	r3, #8
 80089c6:	6a3a      	ldr	r2, [r7, #32]
 80089c8:	4413      	add	r3, r2
 80089ca:	3304      	adds	r3, #4
 80089cc:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80089ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089d0:	69b9      	ldr	r1, [r7, #24]
 80089d2:	68f8      	ldr	r0, [r7, #12]
 80089d4:	f000 f86b 	bl	8008aae <USBH_ParseEPDesc>
 80089d8:	4603      	mov	r3, r0
 80089da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80089de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80089e2:	3301      	adds	r3, #1
 80089e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80089e8:	69fb      	ldr	r3, [r7, #28]
 80089ea:	791b      	ldrb	r3, [r3, #4]
 80089ec:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d204      	bcs.n	80089fe <USBH_ParseCfgDesc+0x19a>
 80089f4:	6a3b      	ldr	r3, [r7, #32]
 80089f6:	885a      	ldrh	r2, [r3, #2]
 80089f8:	8afb      	ldrh	r3, [r7, #22]
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d8b0      	bhi.n	8008960 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80089fe:	69fb      	ldr	r3, [r7, #28]
 8008a00:	791b      	ldrb	r3, [r3, #4]
 8008a02:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d201      	bcs.n	8008a0e <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8008a0a:	2303      	movs	r3, #3
 8008a0c:	e01c      	b.n	8008a48 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8008a0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a12:	3301      	adds	r3, #1
 8008a14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008a18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d805      	bhi.n	8008a2c <USBH_ParseCfgDesc+0x1c8>
 8008a20:	6a3b      	ldr	r3, [r7, #32]
 8008a22:	885a      	ldrh	r2, [r3, #2]
 8008a24:	8afb      	ldrh	r3, [r7, #22]
 8008a26:	429a      	cmp	r2, r3
 8008a28:	f63f af74 	bhi.w	8008914 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008a2c:	6a3b      	ldr	r3, [r7, #32]
 8008a2e:	791b      	ldrb	r3, [r3, #4]
 8008a30:	2b02      	cmp	r3, #2
 8008a32:	bf28      	it	cs
 8008a34:	2302      	movcs	r3, #2
 8008a36:	b2db      	uxtb	r3, r3
 8008a38:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	d201      	bcs.n	8008a44 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8008a40:	2303      	movs	r3, #3
 8008a42:	e001      	b.n	8008a48 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8008a44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3730      	adds	r7, #48	; 0x30
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b083      	sub	sp, #12
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	781a      	ldrb	r2, [r3, #0]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	785a      	ldrb	r2, [r3, #1]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	789a      	ldrb	r2, [r3, #2]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	78da      	ldrb	r2, [r3, #3]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	791a      	ldrb	r2, [r3, #4]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	795a      	ldrb	r2, [r3, #5]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	799a      	ldrb	r2, [r3, #6]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	79da      	ldrb	r2, [r3, #7]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	7a1a      	ldrb	r2, [r3, #8]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	721a      	strb	r2, [r3, #8]
}
 8008aa2:	bf00      	nop
 8008aa4:	370c      	adds	r7, #12
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr

08008aae <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8008aae:	b480      	push	{r7}
 8008ab0:	b087      	sub	sp, #28
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	60f8      	str	r0, [r7, #12]
 8008ab6:	60b9      	str	r1, [r7, #8]
 8008ab8:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008aba:	2300      	movs	r3, #0
 8008abc:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	781a      	ldrb	r2, [r3, #0]
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	785a      	ldrb	r2, [r3, #1]
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	789a      	ldrb	r2, [r3, #2]
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	78da      	ldrb	r2, [r3, #3]
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	3304      	adds	r3, #4
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	b29a      	uxth	r2, r3
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	3305      	adds	r3, #5
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	021b      	lsls	r3, r3, #8
 8008af0:	b29b      	uxth	r3, r3
 8008af2:	4313      	orrs	r3, r2
 8008af4:	b29a      	uxth	r2, r3
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	799a      	ldrb	r2, [r3, #6]
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	889b      	ldrh	r3, [r3, #4]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d102      	bne.n	8008b10 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8008b0a:	2303      	movs	r3, #3
 8008b0c:	75fb      	strb	r3, [r7, #23]
 8008b0e:	e033      	b.n	8008b78 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	889b      	ldrh	r3, [r3, #4]
 8008b14:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008b18:	f023 0307 	bic.w	r3, r3, #7
 8008b1c:	b29a      	uxth	r2, r3
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	889b      	ldrh	r3, [r3, #4]
 8008b26:	b21a      	sxth	r2, r3
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	3304      	adds	r3, #4
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	b299      	uxth	r1, r3
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	3305      	adds	r3, #5
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	021b      	lsls	r3, r3, #8
 8008b3a:	b29b      	uxth	r3, r3
 8008b3c:	430b      	orrs	r3, r1
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d110      	bne.n	8008b6a <USBH_ParseEPDesc+0xbc>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	3304      	adds	r3, #4
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	b299      	uxth	r1, r3
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	3305      	adds	r3, #5
 8008b54:	781b      	ldrb	r3, [r3, #0]
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	021b      	lsls	r3, r3, #8
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	430b      	orrs	r3, r1
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	b21b      	sxth	r3, r3
 8008b62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008b66:	b21b      	sxth	r3, r3
 8008b68:	e001      	b.n	8008b6e <USBH_ParseEPDesc+0xc0>
 8008b6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	b21b      	sxth	r3, r3
 8008b72:	b29a      	uxth	r2, r3
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d116      	bne.n	8008bb0 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	78db      	ldrb	r3, [r3, #3]
 8008b86:	f003 0303 	and.w	r3, r3, #3
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d005      	beq.n	8008b9a <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	78db      	ldrb	r3, [r3, #3]
 8008b92:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008b96:	2b03      	cmp	r3, #3
 8008b98:	d127      	bne.n	8008bea <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	799b      	ldrb	r3, [r3, #6]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d003      	beq.n	8008baa <USBH_ParseEPDesc+0xfc>
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	799b      	ldrb	r3, [r3, #6]
 8008ba6:	2b10      	cmp	r3, #16
 8008ba8:	d91f      	bls.n	8008bea <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008baa:	2303      	movs	r3, #3
 8008bac:	75fb      	strb	r3, [r7, #23]
 8008bae:	e01c      	b.n	8008bea <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	78db      	ldrb	r3, [r3, #3]
 8008bb4:	f003 0303 	and.w	r3, r3, #3
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d10a      	bne.n	8008bd2 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	799b      	ldrb	r3, [r3, #6]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d003      	beq.n	8008bcc <USBH_ParseEPDesc+0x11e>
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	799b      	ldrb	r3, [r3, #6]
 8008bc8:	2b10      	cmp	r3, #16
 8008bca:	d90e      	bls.n	8008bea <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008bcc:	2303      	movs	r3, #3
 8008bce:	75fb      	strb	r3, [r7, #23]
 8008bd0:	e00b      	b.n	8008bea <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	78db      	ldrb	r3, [r3, #3]
 8008bd6:	f003 0303 	and.w	r3, r3, #3
 8008bda:	2b03      	cmp	r3, #3
 8008bdc:	d105      	bne.n	8008bea <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	799b      	ldrb	r3, [r3, #6]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d101      	bne.n	8008bea <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008be6:	2303      	movs	r3, #3
 8008be8:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8008bea:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	371c      	adds	r7, #28
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr

08008bf8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b087      	sub	sp, #28
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	60f8      	str	r0, [r7, #12]
 8008c00:	60b9      	str	r1, [r7, #8]
 8008c02:	4613      	mov	r3, r2
 8008c04:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	3301      	adds	r3, #1
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	2b03      	cmp	r3, #3
 8008c0e:	d120      	bne.n	8008c52 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	1e9a      	subs	r2, r3, #2
 8008c16:	88fb      	ldrh	r3, [r7, #6]
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	bf28      	it	cs
 8008c1c:	4613      	movcs	r3, r2
 8008c1e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	3302      	adds	r3, #2
 8008c24:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008c26:	2300      	movs	r3, #0
 8008c28:	82fb      	strh	r3, [r7, #22]
 8008c2a:	e00b      	b.n	8008c44 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008c2c:	8afb      	ldrh	r3, [r7, #22]
 8008c2e:	68fa      	ldr	r2, [r7, #12]
 8008c30:	4413      	add	r3, r2
 8008c32:	781a      	ldrb	r2, [r3, #0]
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008c3e:	8afb      	ldrh	r3, [r7, #22]
 8008c40:	3302      	adds	r3, #2
 8008c42:	82fb      	strh	r3, [r7, #22]
 8008c44:	8afa      	ldrh	r2, [r7, #22]
 8008c46:	8abb      	ldrh	r3, [r7, #20]
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d3ef      	bcc.n	8008c2c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	701a      	strb	r2, [r3, #0]
  }
}
 8008c52:	bf00      	nop
 8008c54:	371c      	adds	r7, #28
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr

08008c5e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008c5e:	b480      	push	{r7}
 8008c60:	b085      	sub	sp, #20
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
 8008c66:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	881a      	ldrh	r2, [r3, #0]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	4413      	add	r3, r2
 8008c74:	b29a      	uxth	r2, r3
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	781b      	ldrb	r3, [r3, #0]
 8008c7e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	4413      	add	r3, r2
 8008c84:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008c86:	68fb      	ldr	r3, [r7, #12]
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3714      	adds	r7, #20
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr

08008c94 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b086      	sub	sp, #24
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	60f8      	str	r0, [r7, #12]
 8008c9c:	60b9      	str	r1, [r7, #8]
 8008c9e:	4613      	mov	r3, r2
 8008ca0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	789b      	ldrb	r3, [r3, #2]
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d002      	beq.n	8008cb4 <USBH_CtlReq+0x20>
 8008cae:	2b02      	cmp	r3, #2
 8008cb0:	d01d      	beq.n	8008cee <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8008cb2:	e043      	b.n	8008d3c <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	68ba      	ldr	r2, [r7, #8]
 8008cb8:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	88fa      	ldrh	r2, [r7, #6]
 8008cbe:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2202      	movs	r2, #2
 8008cca:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2203      	movs	r2, #3
 8008cd4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f000 fd46 	bl	8009778 <osMessageQueuePut>
      break;
 8008cec:	e026      	b.n	8008d3c <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8008cee:	68f8      	ldr	r0, [r7, #12]
 8008cf0:	f000 f82a 	bl	8008d48 <USBH_HandleControl>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008cf8:	7dfb      	ldrb	r3, [r7, #23]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d002      	beq.n	8008d04 <USBH_CtlReq+0x70>
 8008cfe:	7dfb      	ldrb	r3, [r7, #23]
 8008d00:	2b03      	cmp	r3, #3
 8008d02:	d106      	bne.n	8008d12 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2201      	movs	r2, #1
 8008d08:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	761a      	strb	r2, [r3, #24]
 8008d10:	e005      	b.n	8008d1e <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8008d12:	7dfb      	ldrb	r3, [r7, #23]
 8008d14:	2b02      	cmp	r3, #2
 8008d16:	d102      	bne.n	8008d1e <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2203      	movs	r2, #3
 8008d22:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008d32:	2300      	movs	r3, #0
 8008d34:	2200      	movs	r2, #0
 8008d36:	f000 fd1f 	bl	8009778 <osMessageQueuePut>
      break;
 8008d3a:	bf00      	nop
  }
  return status;
 8008d3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3718      	adds	r7, #24
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
	...

08008d48 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b086      	sub	sp, #24
 8008d4c:	af02      	add	r7, sp, #8
 8008d4e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008d50:	2301      	movs	r3, #1
 8008d52:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008d54:	2300      	movs	r3, #0
 8008d56:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	7e1b      	ldrb	r3, [r3, #24]
 8008d5c:	3b01      	subs	r3, #1
 8008d5e:	2b0a      	cmp	r3, #10
 8008d60:	f200 8229 	bhi.w	80091b6 <USBH_HandleControl+0x46e>
 8008d64:	a201      	add	r2, pc, #4	; (adr r2, 8008d6c <USBH_HandleControl+0x24>)
 8008d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d6a:	bf00      	nop
 8008d6c:	08008d99 	.word	0x08008d99
 8008d70:	08008db3 	.word	0x08008db3
 8008d74:	08008e55 	.word	0x08008e55
 8008d78:	08008e7b 	.word	0x08008e7b
 8008d7c:	08008f07 	.word	0x08008f07
 8008d80:	08008f31 	.word	0x08008f31
 8008d84:	08008ff3 	.word	0x08008ff3
 8008d88:	08009015 	.word	0x08009015
 8008d8c:	080090a7 	.word	0x080090a7
 8008d90:	080090cd 	.word	0x080090cd
 8008d94:	0800915f 	.word	0x0800915f
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f103 0110 	add.w	r1, r3, #16
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	795b      	ldrb	r3, [r3, #5]
 8008da2:	461a      	mov	r2, r3
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f000 fa17 	bl	80091d8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2202      	movs	r2, #2
 8008dae:	761a      	strb	r2, [r3, #24]
      break;
 8008db0:	e20c      	b.n	80091cc <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	795b      	ldrb	r3, [r3, #5]
 8008db6:	4619      	mov	r1, r3
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f003 fd03 	bl	800c7c4 <USBH_LL_GetURBState>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008dc2:	7bbb      	ldrb	r3, [r7, #14]
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d12c      	bne.n	8008e22 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	7c1b      	ldrb	r3, [r3, #16]
 8008dcc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008dd0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	8adb      	ldrh	r3, [r3, #22]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d00a      	beq.n	8008df0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008dda:	7b7b      	ldrb	r3, [r7, #13]
 8008ddc:	2b80      	cmp	r3, #128	; 0x80
 8008dde:	d103      	bne.n	8008de8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2203      	movs	r2, #3
 8008de4:	761a      	strb	r2, [r3, #24]
 8008de6:	e00d      	b.n	8008e04 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2205      	movs	r2, #5
 8008dec:	761a      	strb	r2, [r3, #24]
 8008dee:	e009      	b.n	8008e04 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8008df0:	7b7b      	ldrb	r3, [r7, #13]
 8008df2:	2b80      	cmp	r3, #128	; 0x80
 8008df4:	d103      	bne.n	8008dfe <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2209      	movs	r2, #9
 8008dfa:	761a      	strb	r2, [r3, #24]
 8008dfc:	e002      	b.n	8008e04 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2207      	movs	r2, #7
 8008e02:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2203      	movs	r2, #3
 8008e08:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008e18:	2300      	movs	r3, #0
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f000 fcac 	bl	8009778 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008e20:	e1cb      	b.n	80091ba <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008e22:	7bbb      	ldrb	r3, [r7, #14]
 8008e24:	2b04      	cmp	r3, #4
 8008e26:	d003      	beq.n	8008e30 <USBH_HandleControl+0xe8>
 8008e28:	7bbb      	ldrb	r3, [r7, #14]
 8008e2a:	2b02      	cmp	r3, #2
 8008e2c:	f040 81c5 	bne.w	80091ba <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	220b      	movs	r2, #11
 8008e34:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2203      	movs	r2, #3
 8008e3a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	f000 fc93 	bl	8009778 <osMessageQueuePut>
      break;
 8008e52:	e1b2      	b.n	80091ba <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008e5a:	b29a      	uxth	r2, r3
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6899      	ldr	r1, [r3, #8]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	899a      	ldrh	r2, [r3, #12]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	791b      	ldrb	r3, [r3, #4]
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f000 f9f2 	bl	8009256 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2204      	movs	r2, #4
 8008e76:	761a      	strb	r2, [r3, #24]
      break;
 8008e78:	e1a8      	b.n	80091cc <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	791b      	ldrb	r3, [r3, #4]
 8008e7e:	4619      	mov	r1, r3
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f003 fc9f 	bl	800c7c4 <USBH_LL_GetURBState>
 8008e86:	4603      	mov	r3, r0
 8008e88:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008e8a:	7bbb      	ldrb	r3, [r7, #14]
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d110      	bne.n	8008eb2 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2209      	movs	r2, #9
 8008e94:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2203      	movs	r2, #3
 8008e9a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008eaa:	2300      	movs	r3, #0
 8008eac:	2200      	movs	r2, #0
 8008eae:	f000 fc63 	bl	8009778 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008eb2:	7bbb      	ldrb	r3, [r7, #14]
 8008eb4:	2b05      	cmp	r3, #5
 8008eb6:	d110      	bne.n	8008eda <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008eb8:	2303      	movs	r3, #3
 8008eba:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2203      	movs	r2, #3
 8008ec0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	f000 fc50 	bl	8009778 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008ed8:	e171      	b.n	80091be <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 8008eda:	7bbb      	ldrb	r3, [r7, #14]
 8008edc:	2b04      	cmp	r3, #4
 8008ede:	f040 816e 	bne.w	80091be <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	220b      	movs	r2, #11
 8008ee6:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2203      	movs	r2, #3
 8008eec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008efc:	2300      	movs	r3, #0
 8008efe:	2200      	movs	r2, #0
 8008f00:	f000 fc3a 	bl	8009778 <osMessageQueuePut>
      break;
 8008f04:	e15b      	b.n	80091be <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6899      	ldr	r1, [r3, #8]
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	899a      	ldrh	r2, [r3, #12]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	795b      	ldrb	r3, [r3, #5]
 8008f12:	2001      	movs	r0, #1
 8008f14:	9000      	str	r0, [sp, #0]
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 f978 	bl	800920c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008f22:	b29a      	uxth	r2, r3
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2206      	movs	r2, #6
 8008f2c:	761a      	strb	r2, [r3, #24]
      break;
 8008f2e:	e14d      	b.n	80091cc <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	795b      	ldrb	r3, [r3, #5]
 8008f34:	4619      	mov	r1, r3
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f003 fc44 	bl	800c7c4 <USBH_LL_GetURBState>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008f40:	7bbb      	ldrb	r3, [r7, #14]
 8008f42:	2b01      	cmp	r3, #1
 8008f44:	d111      	bne.n	8008f6a <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2207      	movs	r2, #7
 8008f4a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2203      	movs	r2, #3
 8008f50:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008f60:	2300      	movs	r3, #0
 8008f62:	2200      	movs	r2, #0
 8008f64:	f000 fc08 	bl	8009778 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008f68:	e12b      	b.n	80091c2 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 8008f6a:	7bbb      	ldrb	r3, [r7, #14]
 8008f6c:	2b05      	cmp	r3, #5
 8008f6e:	d113      	bne.n	8008f98 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	220c      	movs	r2, #12
 8008f74:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008f76:	2303      	movs	r3, #3
 8008f78:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2203      	movs	r2, #3
 8008f7e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008f8e:	2300      	movs	r3, #0
 8008f90:	2200      	movs	r2, #0
 8008f92:	f000 fbf1 	bl	8009778 <osMessageQueuePut>
      break;
 8008f96:	e114      	b.n	80091c2 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008f98:	7bbb      	ldrb	r3, [r7, #14]
 8008f9a:	2b02      	cmp	r3, #2
 8008f9c:	d111      	bne.n	8008fc2 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2205      	movs	r2, #5
 8008fa2:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2203      	movs	r2, #3
 8008fa8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008fb8:	2300      	movs	r3, #0
 8008fba:	2200      	movs	r2, #0
 8008fbc:	f000 fbdc 	bl	8009778 <osMessageQueuePut>
      break;
 8008fc0:	e0ff      	b.n	80091c2 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8008fc2:	7bbb      	ldrb	r3, [r7, #14]
 8008fc4:	2b04      	cmp	r3, #4
 8008fc6:	f040 80fc 	bne.w	80091c2 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	220b      	movs	r2, #11
 8008fce:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008fd0:	2302      	movs	r3, #2
 8008fd2:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2203      	movs	r2, #3
 8008fd8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008fe8:	2300      	movs	r3, #0
 8008fea:	2200      	movs	r2, #0
 8008fec:	f000 fbc4 	bl	8009778 <osMessageQueuePut>
      break;
 8008ff0:	e0e7      	b.n	80091c2 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	791b      	ldrb	r3, [r3, #4]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	2100      	movs	r1, #0
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 f92b 	bl	8009256 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009006:	b29a      	uxth	r2, r3
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2208      	movs	r2, #8
 8009010:	761a      	strb	r2, [r3, #24]

      break;
 8009012:	e0db      	b.n	80091cc <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	791b      	ldrb	r3, [r3, #4]
 8009018:	4619      	mov	r1, r3
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f003 fbd2 	bl	800c7c4 <USBH_LL_GetURBState>
 8009020:	4603      	mov	r3, r0
 8009022:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009024:	7bbb      	ldrb	r3, [r7, #14]
 8009026:	2b01      	cmp	r3, #1
 8009028:	d113      	bne.n	8009052 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	220d      	movs	r2, #13
 800902e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009030:	2300      	movs	r3, #0
 8009032:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2203      	movs	r2, #3
 8009038:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009048:	2300      	movs	r3, #0
 800904a:	2200      	movs	r2, #0
 800904c:	f000 fb94 	bl	8009778 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009050:	e0b9      	b.n	80091c6 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 8009052:	7bbb      	ldrb	r3, [r7, #14]
 8009054:	2b04      	cmp	r3, #4
 8009056:	d111      	bne.n	800907c <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	220b      	movs	r2, #11
 800905c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2203      	movs	r2, #3
 8009062:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009072:	2300      	movs	r3, #0
 8009074:	2200      	movs	r2, #0
 8009076:	f000 fb7f 	bl	8009778 <osMessageQueuePut>
      break;
 800907a:	e0a4      	b.n	80091c6 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800907c:	7bbb      	ldrb	r3, [r7, #14]
 800907e:	2b05      	cmp	r3, #5
 8009080:	f040 80a1 	bne.w	80091c6 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 8009084:	2303      	movs	r3, #3
 8009086:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2203      	movs	r2, #3
 800908c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800909c:	2300      	movs	r3, #0
 800909e:	2200      	movs	r2, #0
 80090a0:	f000 fb6a 	bl	8009778 <osMessageQueuePut>
      break;
 80090a4:	e08f      	b.n	80091c6 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	795b      	ldrb	r3, [r3, #5]
 80090aa:	2201      	movs	r2, #1
 80090ac:	9200      	str	r2, [sp, #0]
 80090ae:	2200      	movs	r2, #0
 80090b0:	2100      	movs	r1, #0
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f000 f8aa 	bl	800920c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80090be:	b29a      	uxth	r2, r3
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	220a      	movs	r2, #10
 80090c8:	761a      	strb	r2, [r3, #24]
      break;
 80090ca:	e07f      	b.n	80091cc <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	795b      	ldrb	r3, [r3, #5]
 80090d0:	4619      	mov	r1, r3
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f003 fb76 	bl	800c7c4 <USBH_LL_GetURBState>
 80090d8:	4603      	mov	r3, r0
 80090da:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80090dc:	7bbb      	ldrb	r3, [r7, #14]
 80090de:	2b01      	cmp	r3, #1
 80090e0:	d113      	bne.n	800910a <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 80090e2:	2300      	movs	r3, #0
 80090e4:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	220d      	movs	r2, #13
 80090ea:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2203      	movs	r2, #3
 80090f0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009100:	2300      	movs	r3, #0
 8009102:	2200      	movs	r2, #0
 8009104:	f000 fb38 	bl	8009778 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009108:	e05f      	b.n	80091ca <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800910a:	7bbb      	ldrb	r3, [r7, #14]
 800910c:	2b02      	cmp	r3, #2
 800910e:	d111      	bne.n	8009134 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2209      	movs	r2, #9
 8009114:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2203      	movs	r2, #3
 800911a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800912a:	2300      	movs	r3, #0
 800912c:	2200      	movs	r2, #0
 800912e:	f000 fb23 	bl	8009778 <osMessageQueuePut>
      break;
 8009132:	e04a      	b.n	80091ca <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 8009134:	7bbb      	ldrb	r3, [r7, #14]
 8009136:	2b04      	cmp	r3, #4
 8009138:	d147      	bne.n	80091ca <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	220b      	movs	r2, #11
 800913e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2203      	movs	r2, #3
 8009144:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009154:	2300      	movs	r3, #0
 8009156:	2200      	movs	r2, #0
 8009158:	f000 fb0e 	bl	8009778 <osMessageQueuePut>
      break;
 800915c:	e035      	b.n	80091ca <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	7e5b      	ldrb	r3, [r3, #25]
 8009162:	3301      	adds	r3, #1
 8009164:	b2da      	uxtb	r2, r3
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	765a      	strb	r2, [r3, #25]
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	7e5b      	ldrb	r3, [r3, #25]
 800916e:	2b02      	cmp	r3, #2
 8009170:	d806      	bhi.n	8009180 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2201      	movs	r2, #1
 8009176:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2201      	movs	r2, #1
 800917c:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800917e:	e025      	b.n	80091cc <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009186:	2106      	movs	r1, #6
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2200      	movs	r2, #0
 8009190:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	795b      	ldrb	r3, [r3, #5]
 8009196:	4619      	mov	r1, r3
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f000 f90d 	bl	80093b8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	791b      	ldrb	r3, [r3, #4]
 80091a2:	4619      	mov	r1, r3
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f000 f907 	bl	80093b8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2200      	movs	r2, #0
 80091ae:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80091b0:	2302      	movs	r3, #2
 80091b2:	73fb      	strb	r3, [r7, #15]
      break;
 80091b4:	e00a      	b.n	80091cc <USBH_HandleControl+0x484>

    default:
      break;
 80091b6:	bf00      	nop
 80091b8:	e008      	b.n	80091cc <USBH_HandleControl+0x484>
      break;
 80091ba:	bf00      	nop
 80091bc:	e006      	b.n	80091cc <USBH_HandleControl+0x484>
      break;
 80091be:	bf00      	nop
 80091c0:	e004      	b.n	80091cc <USBH_HandleControl+0x484>
      break;
 80091c2:	bf00      	nop
 80091c4:	e002      	b.n	80091cc <USBH_HandleControl+0x484>
      break;
 80091c6:	bf00      	nop
 80091c8:	e000      	b.n	80091cc <USBH_HandleControl+0x484>
      break;
 80091ca:	bf00      	nop
  }

  return status;
 80091cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3710      	adds	r7, #16
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop

080091d8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b088      	sub	sp, #32
 80091dc:	af04      	add	r7, sp, #16
 80091de:	60f8      	str	r0, [r7, #12]
 80091e0:	60b9      	str	r1, [r7, #8]
 80091e2:	4613      	mov	r3, r2
 80091e4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80091e6:	79f9      	ldrb	r1, [r7, #7]
 80091e8:	2300      	movs	r3, #0
 80091ea:	9303      	str	r3, [sp, #12]
 80091ec:	2308      	movs	r3, #8
 80091ee:	9302      	str	r3, [sp, #8]
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	9301      	str	r3, [sp, #4]
 80091f4:	2300      	movs	r3, #0
 80091f6:	9300      	str	r3, [sp, #0]
 80091f8:	2300      	movs	r3, #0
 80091fa:	2200      	movs	r2, #0
 80091fc:	68f8      	ldr	r0, [r7, #12]
 80091fe:	f003 fab0 	bl	800c762 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009202:	2300      	movs	r3, #0
}
 8009204:	4618      	mov	r0, r3
 8009206:	3710      	adds	r7, #16
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b088      	sub	sp, #32
 8009210:	af04      	add	r7, sp, #16
 8009212:	60f8      	str	r0, [r7, #12]
 8009214:	60b9      	str	r1, [r7, #8]
 8009216:	4611      	mov	r1, r2
 8009218:	461a      	mov	r2, r3
 800921a:	460b      	mov	r3, r1
 800921c:	80fb      	strh	r3, [r7, #6]
 800921e:	4613      	mov	r3, r2
 8009220:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009228:	2b00      	cmp	r3, #0
 800922a:	d001      	beq.n	8009230 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800922c:	2300      	movs	r3, #0
 800922e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009230:	7979      	ldrb	r1, [r7, #5]
 8009232:	7e3b      	ldrb	r3, [r7, #24]
 8009234:	9303      	str	r3, [sp, #12]
 8009236:	88fb      	ldrh	r3, [r7, #6]
 8009238:	9302      	str	r3, [sp, #8]
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	9301      	str	r3, [sp, #4]
 800923e:	2301      	movs	r3, #1
 8009240:	9300      	str	r3, [sp, #0]
 8009242:	2300      	movs	r3, #0
 8009244:	2200      	movs	r2, #0
 8009246:	68f8      	ldr	r0, [r7, #12]
 8009248:	f003 fa8b 	bl	800c762 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800924c:	2300      	movs	r3, #0
}
 800924e:	4618      	mov	r0, r3
 8009250:	3710      	adds	r7, #16
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}

08009256 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009256:	b580      	push	{r7, lr}
 8009258:	b088      	sub	sp, #32
 800925a:	af04      	add	r7, sp, #16
 800925c:	60f8      	str	r0, [r7, #12]
 800925e:	60b9      	str	r1, [r7, #8]
 8009260:	4611      	mov	r1, r2
 8009262:	461a      	mov	r2, r3
 8009264:	460b      	mov	r3, r1
 8009266:	80fb      	strh	r3, [r7, #6]
 8009268:	4613      	mov	r3, r2
 800926a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800926c:	7979      	ldrb	r1, [r7, #5]
 800926e:	2300      	movs	r3, #0
 8009270:	9303      	str	r3, [sp, #12]
 8009272:	88fb      	ldrh	r3, [r7, #6]
 8009274:	9302      	str	r3, [sp, #8]
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	9301      	str	r3, [sp, #4]
 800927a:	2301      	movs	r3, #1
 800927c:	9300      	str	r3, [sp, #0]
 800927e:	2300      	movs	r3, #0
 8009280:	2201      	movs	r2, #1
 8009282:	68f8      	ldr	r0, [r7, #12]
 8009284:	f003 fa6d 	bl	800c762 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009288:	2300      	movs	r3, #0

}
 800928a:	4618      	mov	r0, r3
 800928c:	3710      	adds	r7, #16
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}

08009292 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009292:	b580      	push	{r7, lr}
 8009294:	b088      	sub	sp, #32
 8009296:	af04      	add	r7, sp, #16
 8009298:	60f8      	str	r0, [r7, #12]
 800929a:	60b9      	str	r1, [r7, #8]
 800929c:	4611      	mov	r1, r2
 800929e:	461a      	mov	r2, r3
 80092a0:	460b      	mov	r3, r1
 80092a2:	80fb      	strh	r3, [r7, #6]
 80092a4:	4613      	mov	r3, r2
 80092a6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d001      	beq.n	80092b6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80092b2:	2300      	movs	r3, #0
 80092b4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80092b6:	7979      	ldrb	r1, [r7, #5]
 80092b8:	7e3b      	ldrb	r3, [r7, #24]
 80092ba:	9303      	str	r3, [sp, #12]
 80092bc:	88fb      	ldrh	r3, [r7, #6]
 80092be:	9302      	str	r3, [sp, #8]
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	9301      	str	r3, [sp, #4]
 80092c4:	2301      	movs	r3, #1
 80092c6:	9300      	str	r3, [sp, #0]
 80092c8:	2302      	movs	r3, #2
 80092ca:	2200      	movs	r2, #0
 80092cc:	68f8      	ldr	r0, [r7, #12]
 80092ce:	f003 fa48 	bl	800c762 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80092d2:	2300      	movs	r3, #0
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3710      	adds	r7, #16
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}

080092dc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b088      	sub	sp, #32
 80092e0:	af04      	add	r7, sp, #16
 80092e2:	60f8      	str	r0, [r7, #12]
 80092e4:	60b9      	str	r1, [r7, #8]
 80092e6:	4611      	mov	r1, r2
 80092e8:	461a      	mov	r2, r3
 80092ea:	460b      	mov	r3, r1
 80092ec:	80fb      	strh	r3, [r7, #6]
 80092ee:	4613      	mov	r3, r2
 80092f0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80092f2:	7979      	ldrb	r1, [r7, #5]
 80092f4:	2300      	movs	r3, #0
 80092f6:	9303      	str	r3, [sp, #12]
 80092f8:	88fb      	ldrh	r3, [r7, #6]
 80092fa:	9302      	str	r3, [sp, #8]
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	9301      	str	r3, [sp, #4]
 8009300:	2301      	movs	r3, #1
 8009302:	9300      	str	r3, [sp, #0]
 8009304:	2302      	movs	r3, #2
 8009306:	2201      	movs	r2, #1
 8009308:	68f8      	ldr	r0, [r7, #12]
 800930a:	f003 fa2a 	bl	800c762 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800930e:	2300      	movs	r3, #0
}
 8009310:	4618      	mov	r0, r3
 8009312:	3710      	adds	r7, #16
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}

08009318 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b086      	sub	sp, #24
 800931c:	af04      	add	r7, sp, #16
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	4608      	mov	r0, r1
 8009322:	4611      	mov	r1, r2
 8009324:	461a      	mov	r2, r3
 8009326:	4603      	mov	r3, r0
 8009328:	70fb      	strb	r3, [r7, #3]
 800932a:	460b      	mov	r3, r1
 800932c:	70bb      	strb	r3, [r7, #2]
 800932e:	4613      	mov	r3, r2
 8009330:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009332:	7878      	ldrb	r0, [r7, #1]
 8009334:	78ba      	ldrb	r2, [r7, #2]
 8009336:	78f9      	ldrb	r1, [r7, #3]
 8009338:	8b3b      	ldrh	r3, [r7, #24]
 800933a:	9302      	str	r3, [sp, #8]
 800933c:	7d3b      	ldrb	r3, [r7, #20]
 800933e:	9301      	str	r3, [sp, #4]
 8009340:	7c3b      	ldrb	r3, [r7, #16]
 8009342:	9300      	str	r3, [sp, #0]
 8009344:	4603      	mov	r3, r0
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f003 f9bd 	bl	800c6c6 <USBH_LL_OpenPipe>

  return USBH_OK;
 800934c:	2300      	movs	r3, #0
}
 800934e:	4618      	mov	r0, r3
 8009350:	3708      	adds	r7, #8
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}

08009356 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009356:	b580      	push	{r7, lr}
 8009358:	b082      	sub	sp, #8
 800935a:	af00      	add	r7, sp, #0
 800935c:	6078      	str	r0, [r7, #4]
 800935e:	460b      	mov	r3, r1
 8009360:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009362:	78fb      	ldrb	r3, [r7, #3]
 8009364:	4619      	mov	r1, r3
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f003 f9dc 	bl	800c724 <USBH_LL_ClosePipe>

  return USBH_OK;
 800936c:	2300      	movs	r3, #0
}
 800936e:	4618      	mov	r0, r3
 8009370:	3708      	adds	r7, #8
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}

08009376 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009376:	b580      	push	{r7, lr}
 8009378:	b084      	sub	sp, #16
 800937a:	af00      	add	r7, sp, #0
 800937c:	6078      	str	r0, [r7, #4]
 800937e:	460b      	mov	r3, r1
 8009380:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 f836 	bl	80093f4 <USBH_GetFreePipe>
 8009388:	4603      	mov	r3, r0
 800938a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800938c:	89fb      	ldrh	r3, [r7, #14]
 800938e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009392:	4293      	cmp	r3, r2
 8009394:	d00a      	beq.n	80093ac <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009396:	78fa      	ldrb	r2, [r7, #3]
 8009398:	89fb      	ldrh	r3, [r7, #14]
 800939a:	f003 030f 	and.w	r3, r3, #15
 800939e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80093a2:	6879      	ldr	r1, [r7, #4]
 80093a4:	33e0      	adds	r3, #224	; 0xe0
 80093a6:	009b      	lsls	r3, r3, #2
 80093a8:	440b      	add	r3, r1
 80093aa:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80093ac:	89fb      	ldrh	r3, [r7, #14]
 80093ae:	b2db      	uxtb	r3, r3
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3710      	adds	r7, #16
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b083      	sub	sp, #12
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	460b      	mov	r3, r1
 80093c2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80093c4:	78fb      	ldrb	r3, [r7, #3]
 80093c6:	2b0f      	cmp	r3, #15
 80093c8:	d80d      	bhi.n	80093e6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80093ca:	78fb      	ldrb	r3, [r7, #3]
 80093cc:	687a      	ldr	r2, [r7, #4]
 80093ce:	33e0      	adds	r3, #224	; 0xe0
 80093d0:	009b      	lsls	r3, r3, #2
 80093d2:	4413      	add	r3, r2
 80093d4:	685a      	ldr	r2, [r3, #4]
 80093d6:	78fb      	ldrb	r3, [r7, #3]
 80093d8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80093dc:	6879      	ldr	r1, [r7, #4]
 80093de:	33e0      	adds	r3, #224	; 0xe0
 80093e0:	009b      	lsls	r3, r3, #2
 80093e2:	440b      	add	r3, r1
 80093e4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80093e6:	2300      	movs	r3, #0
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	370c      	adds	r7, #12
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr

080093f4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b085      	sub	sp, #20
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80093fc:	2300      	movs	r3, #0
 80093fe:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009400:	2300      	movs	r3, #0
 8009402:	73fb      	strb	r3, [r7, #15]
 8009404:	e00f      	b.n	8009426 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009406:	7bfb      	ldrb	r3, [r7, #15]
 8009408:	687a      	ldr	r2, [r7, #4]
 800940a:	33e0      	adds	r3, #224	; 0xe0
 800940c:	009b      	lsls	r3, r3, #2
 800940e:	4413      	add	r3, r2
 8009410:	685b      	ldr	r3, [r3, #4]
 8009412:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009416:	2b00      	cmp	r3, #0
 8009418:	d102      	bne.n	8009420 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800941a:	7bfb      	ldrb	r3, [r7, #15]
 800941c:	b29b      	uxth	r3, r3
 800941e:	e007      	b.n	8009430 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009420:	7bfb      	ldrb	r3, [r7, #15]
 8009422:	3301      	adds	r3, #1
 8009424:	73fb      	strb	r3, [r7, #15]
 8009426:	7bfb      	ldrb	r3, [r7, #15]
 8009428:	2b0f      	cmp	r3, #15
 800942a:	d9ec      	bls.n	8009406 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800942c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009430:	4618      	mov	r0, r3
 8009432:	3714      	adds	r7, #20
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr

0800943c <__NVIC_SetPriority>:
{
 800943c:	b480      	push	{r7}
 800943e:	b083      	sub	sp, #12
 8009440:	af00      	add	r7, sp, #0
 8009442:	4603      	mov	r3, r0
 8009444:	6039      	str	r1, [r7, #0]
 8009446:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800944c:	2b00      	cmp	r3, #0
 800944e:	db0a      	blt.n	8009466 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	b2da      	uxtb	r2, r3
 8009454:	490c      	ldr	r1, [pc, #48]	; (8009488 <__NVIC_SetPriority+0x4c>)
 8009456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800945a:	0112      	lsls	r2, r2, #4
 800945c:	b2d2      	uxtb	r2, r2
 800945e:	440b      	add	r3, r1
 8009460:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009464:	e00a      	b.n	800947c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	b2da      	uxtb	r2, r3
 800946a:	4908      	ldr	r1, [pc, #32]	; (800948c <__NVIC_SetPriority+0x50>)
 800946c:	79fb      	ldrb	r3, [r7, #7]
 800946e:	f003 030f 	and.w	r3, r3, #15
 8009472:	3b04      	subs	r3, #4
 8009474:	0112      	lsls	r2, r2, #4
 8009476:	b2d2      	uxtb	r2, r2
 8009478:	440b      	add	r3, r1
 800947a:	761a      	strb	r2, [r3, #24]
}
 800947c:	bf00      	nop
 800947e:	370c      	adds	r7, #12
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr
 8009488:	e000e100 	.word	0xe000e100
 800948c:	e000ed00 	.word	0xe000ed00

08009490 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009490:	b580      	push	{r7, lr}
 8009492:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009494:	2100      	movs	r1, #0
 8009496:	f06f 0004 	mvn.w	r0, #4
 800949a:	f7ff ffcf 	bl	800943c <__NVIC_SetPriority>
#endif
}
 800949e:	bf00      	nop
 80094a0:	bd80      	pop	{r7, pc}
	...

080094a4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80094a4:	b480      	push	{r7}
 80094a6:	b083      	sub	sp, #12
 80094a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80094aa:	f3ef 8305 	mrs	r3, IPSR
 80094ae:	603b      	str	r3, [r7, #0]
  return(result);
 80094b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d003      	beq.n	80094be <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80094b6:	f06f 0305 	mvn.w	r3, #5
 80094ba:	607b      	str	r3, [r7, #4]
 80094bc:	e00c      	b.n	80094d8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80094be:	4b0a      	ldr	r3, [pc, #40]	; (80094e8 <osKernelInitialize+0x44>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d105      	bne.n	80094d2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80094c6:	4b08      	ldr	r3, [pc, #32]	; (80094e8 <osKernelInitialize+0x44>)
 80094c8:	2201      	movs	r2, #1
 80094ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80094cc:	2300      	movs	r3, #0
 80094ce:	607b      	str	r3, [r7, #4]
 80094d0:	e002      	b.n	80094d8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80094d2:	f04f 33ff 	mov.w	r3, #4294967295
 80094d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80094d8:	687b      	ldr	r3, [r7, #4]
}
 80094da:	4618      	mov	r0, r3
 80094dc:	370c      	adds	r7, #12
 80094de:	46bd      	mov	sp, r7
 80094e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e4:	4770      	bx	lr
 80094e6:	bf00      	nop
 80094e8:	200001cc 	.word	0x200001cc

080094ec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b082      	sub	sp, #8
 80094f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80094f2:	f3ef 8305 	mrs	r3, IPSR
 80094f6:	603b      	str	r3, [r7, #0]
  return(result);
 80094f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d003      	beq.n	8009506 <osKernelStart+0x1a>
    stat = osErrorISR;
 80094fe:	f06f 0305 	mvn.w	r3, #5
 8009502:	607b      	str	r3, [r7, #4]
 8009504:	e010      	b.n	8009528 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009506:	4b0b      	ldr	r3, [pc, #44]	; (8009534 <osKernelStart+0x48>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	2b01      	cmp	r3, #1
 800950c:	d109      	bne.n	8009522 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800950e:	f7ff ffbf 	bl	8009490 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009512:	4b08      	ldr	r3, [pc, #32]	; (8009534 <osKernelStart+0x48>)
 8009514:	2202      	movs	r2, #2
 8009516:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009518:	f001 fa50 	bl	800a9bc <vTaskStartScheduler>
      stat = osOK;
 800951c:	2300      	movs	r3, #0
 800951e:	607b      	str	r3, [r7, #4]
 8009520:	e002      	b.n	8009528 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009522:	f04f 33ff 	mov.w	r3, #4294967295
 8009526:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009528:	687b      	ldr	r3, [r7, #4]
}
 800952a:	4618      	mov	r0, r3
 800952c:	3708      	adds	r7, #8
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}
 8009532:	bf00      	nop
 8009534:	200001cc 	.word	0x200001cc

08009538 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009538:	b580      	push	{r7, lr}
 800953a:	b08e      	sub	sp, #56	; 0x38
 800953c:	af04      	add	r7, sp, #16
 800953e:	60f8      	str	r0, [r7, #12]
 8009540:	60b9      	str	r1, [r7, #8]
 8009542:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009544:	2300      	movs	r3, #0
 8009546:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009548:	f3ef 8305 	mrs	r3, IPSR
 800954c:	617b      	str	r3, [r7, #20]
  return(result);
 800954e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009550:	2b00      	cmp	r3, #0
 8009552:	d17e      	bne.n	8009652 <osThreadNew+0x11a>
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d07b      	beq.n	8009652 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800955a:	2380      	movs	r3, #128	; 0x80
 800955c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800955e:	2318      	movs	r3, #24
 8009560:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009562:	2300      	movs	r3, #0
 8009564:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009566:	f04f 33ff 	mov.w	r3, #4294967295
 800956a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d045      	beq.n	80095fe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d002      	beq.n	8009580 <osThreadNew+0x48>
        name = attr->name;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	699b      	ldr	r3, [r3, #24]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d002      	beq.n	800958e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	699b      	ldr	r3, [r3, #24]
 800958c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800958e:	69fb      	ldr	r3, [r7, #28]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d008      	beq.n	80095a6 <osThreadNew+0x6e>
 8009594:	69fb      	ldr	r3, [r7, #28]
 8009596:	2b38      	cmp	r3, #56	; 0x38
 8009598:	d805      	bhi.n	80095a6 <osThreadNew+0x6e>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	f003 0301 	and.w	r3, r3, #1
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d001      	beq.n	80095aa <osThreadNew+0x72>
        return (NULL);
 80095a6:	2300      	movs	r3, #0
 80095a8:	e054      	b.n	8009654 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	695b      	ldr	r3, [r3, #20]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d003      	beq.n	80095ba <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	695b      	ldr	r3, [r3, #20]
 80095b6:	089b      	lsrs	r3, r3, #2
 80095b8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	689b      	ldr	r3, [r3, #8]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d00e      	beq.n	80095e0 <osThreadNew+0xa8>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	68db      	ldr	r3, [r3, #12]
 80095c6:	2b5b      	cmp	r3, #91	; 0x5b
 80095c8:	d90a      	bls.n	80095e0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d006      	beq.n	80095e0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	695b      	ldr	r3, [r3, #20]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d002      	beq.n	80095e0 <osThreadNew+0xa8>
        mem = 1;
 80095da:	2301      	movs	r3, #1
 80095dc:	61bb      	str	r3, [r7, #24]
 80095de:	e010      	b.n	8009602 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	689b      	ldr	r3, [r3, #8]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d10c      	bne.n	8009602 <osThreadNew+0xca>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	68db      	ldr	r3, [r3, #12]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d108      	bne.n	8009602 <osThreadNew+0xca>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	691b      	ldr	r3, [r3, #16]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d104      	bne.n	8009602 <osThreadNew+0xca>
          mem = 0;
 80095f8:	2300      	movs	r3, #0
 80095fa:	61bb      	str	r3, [r7, #24]
 80095fc:	e001      	b.n	8009602 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80095fe:	2300      	movs	r3, #0
 8009600:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009602:	69bb      	ldr	r3, [r7, #24]
 8009604:	2b01      	cmp	r3, #1
 8009606:	d110      	bne.n	800962a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800960c:	687a      	ldr	r2, [r7, #4]
 800960e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009610:	9202      	str	r2, [sp, #8]
 8009612:	9301      	str	r3, [sp, #4]
 8009614:	69fb      	ldr	r3, [r7, #28]
 8009616:	9300      	str	r3, [sp, #0]
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	6a3a      	ldr	r2, [r7, #32]
 800961c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800961e:	68f8      	ldr	r0, [r7, #12]
 8009620:	f000 fff6 	bl	800a610 <xTaskCreateStatic>
 8009624:	4603      	mov	r3, r0
 8009626:	613b      	str	r3, [r7, #16]
 8009628:	e013      	b.n	8009652 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800962a:	69bb      	ldr	r3, [r7, #24]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d110      	bne.n	8009652 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009630:	6a3b      	ldr	r3, [r7, #32]
 8009632:	b29a      	uxth	r2, r3
 8009634:	f107 0310 	add.w	r3, r7, #16
 8009638:	9301      	str	r3, [sp, #4]
 800963a:	69fb      	ldr	r3, [r7, #28]
 800963c:	9300      	str	r3, [sp, #0]
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009642:	68f8      	ldr	r0, [r7, #12]
 8009644:	f001 f841 	bl	800a6ca <xTaskCreate>
 8009648:	4603      	mov	r3, r0
 800964a:	2b01      	cmp	r3, #1
 800964c:	d001      	beq.n	8009652 <osThreadNew+0x11a>
            hTask = NULL;
 800964e:	2300      	movs	r3, #0
 8009650:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009652:	693b      	ldr	r3, [r7, #16]
}
 8009654:	4618      	mov	r0, r3
 8009656:	3728      	adds	r7, #40	; 0x28
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009664:	f3ef 8305 	mrs	r3, IPSR
 8009668:	60bb      	str	r3, [r7, #8]
  return(result);
 800966a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800966c:	2b00      	cmp	r3, #0
 800966e:	d003      	beq.n	8009678 <osDelay+0x1c>
    stat = osErrorISR;
 8009670:	f06f 0305 	mvn.w	r3, #5
 8009674:	60fb      	str	r3, [r7, #12]
 8009676:	e007      	b.n	8009688 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009678:	2300      	movs	r3, #0
 800967a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d002      	beq.n	8009688 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f001 f966 	bl	800a954 <vTaskDelay>
    }
  }

  return (stat);
 8009688:	68fb      	ldr	r3, [r7, #12]
}
 800968a:	4618      	mov	r0, r3
 800968c:	3710      	adds	r7, #16
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}

08009692 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009692:	b580      	push	{r7, lr}
 8009694:	b08a      	sub	sp, #40	; 0x28
 8009696:	af02      	add	r7, sp, #8
 8009698:	60f8      	str	r0, [r7, #12]
 800969a:	60b9      	str	r1, [r7, #8]
 800969c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800969e:	2300      	movs	r3, #0
 80096a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096a2:	f3ef 8305 	mrs	r3, IPSR
 80096a6:	613b      	str	r3, [r7, #16]
  return(result);
 80096a8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d15f      	bne.n	800976e <osMessageQueueNew+0xdc>
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d05c      	beq.n	800976e <osMessageQueueNew+0xdc>
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d059      	beq.n	800976e <osMessageQueueNew+0xdc>
    mem = -1;
 80096ba:	f04f 33ff 	mov.w	r3, #4294967295
 80096be:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d029      	beq.n	800971a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	689b      	ldr	r3, [r3, #8]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d012      	beq.n	80096f4 <osMessageQueueNew+0x62>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	68db      	ldr	r3, [r3, #12]
 80096d2:	2b4f      	cmp	r3, #79	; 0x4f
 80096d4:	d90e      	bls.n	80096f4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d00a      	beq.n	80096f4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	695a      	ldr	r2, [r3, #20]
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	68b9      	ldr	r1, [r7, #8]
 80096e6:	fb01 f303 	mul.w	r3, r1, r3
 80096ea:	429a      	cmp	r2, r3
 80096ec:	d302      	bcc.n	80096f4 <osMessageQueueNew+0x62>
        mem = 1;
 80096ee:	2301      	movs	r3, #1
 80096f0:	61bb      	str	r3, [r7, #24]
 80096f2:	e014      	b.n	800971e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	689b      	ldr	r3, [r3, #8]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d110      	bne.n	800971e <osMessageQueueNew+0x8c>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	68db      	ldr	r3, [r3, #12]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d10c      	bne.n	800971e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009708:	2b00      	cmp	r3, #0
 800970a:	d108      	bne.n	800971e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	695b      	ldr	r3, [r3, #20]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d104      	bne.n	800971e <osMessageQueueNew+0x8c>
          mem = 0;
 8009714:	2300      	movs	r3, #0
 8009716:	61bb      	str	r3, [r7, #24]
 8009718:	e001      	b.n	800971e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800971a:	2300      	movs	r3, #0
 800971c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800971e:	69bb      	ldr	r3, [r7, #24]
 8009720:	2b01      	cmp	r3, #1
 8009722:	d10b      	bne.n	800973c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	691a      	ldr	r2, [r3, #16]
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	689b      	ldr	r3, [r3, #8]
 800972c:	2100      	movs	r1, #0
 800972e:	9100      	str	r1, [sp, #0]
 8009730:	68b9      	ldr	r1, [r7, #8]
 8009732:	68f8      	ldr	r0, [r7, #12]
 8009734:	f000 fa2e 	bl	8009b94 <xQueueGenericCreateStatic>
 8009738:	61f8      	str	r0, [r7, #28]
 800973a:	e008      	b.n	800974e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800973c:	69bb      	ldr	r3, [r7, #24]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d105      	bne.n	800974e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009742:	2200      	movs	r2, #0
 8009744:	68b9      	ldr	r1, [r7, #8]
 8009746:	68f8      	ldr	r0, [r7, #12]
 8009748:	f000 fa9c 	bl	8009c84 <xQueueGenericCreate>
 800974c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800974e:	69fb      	ldr	r3, [r7, #28]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d00c      	beq.n	800976e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d003      	beq.n	8009762 <osMessageQueueNew+0xd0>
        name = attr->name;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	617b      	str	r3, [r7, #20]
 8009760:	e001      	b.n	8009766 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009762:	2300      	movs	r3, #0
 8009764:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009766:	6979      	ldr	r1, [r7, #20]
 8009768:	69f8      	ldr	r0, [r7, #28]
 800976a:	f000 fef3 	bl	800a554 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800976e:	69fb      	ldr	r3, [r7, #28]
}
 8009770:	4618      	mov	r0, r3
 8009772:	3720      	adds	r7, #32
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}

08009778 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009778:	b580      	push	{r7, lr}
 800977a:	b088      	sub	sp, #32
 800977c:	af00      	add	r7, sp, #0
 800977e:	60f8      	str	r0, [r7, #12]
 8009780:	60b9      	str	r1, [r7, #8]
 8009782:	603b      	str	r3, [r7, #0]
 8009784:	4613      	mov	r3, r2
 8009786:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800978c:	2300      	movs	r3, #0
 800978e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009790:	f3ef 8305 	mrs	r3, IPSR
 8009794:	617b      	str	r3, [r7, #20]
  return(result);
 8009796:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009798:	2b00      	cmp	r3, #0
 800979a:	d028      	beq.n	80097ee <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800979c:	69bb      	ldr	r3, [r7, #24]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d005      	beq.n	80097ae <osMessageQueuePut+0x36>
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d002      	beq.n	80097ae <osMessageQueuePut+0x36>
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d003      	beq.n	80097b6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80097ae:	f06f 0303 	mvn.w	r3, #3
 80097b2:	61fb      	str	r3, [r7, #28]
 80097b4:	e038      	b.n	8009828 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80097b6:	2300      	movs	r3, #0
 80097b8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80097ba:	f107 0210 	add.w	r2, r7, #16
 80097be:	2300      	movs	r3, #0
 80097c0:	68b9      	ldr	r1, [r7, #8]
 80097c2:	69b8      	ldr	r0, [r7, #24]
 80097c4:	f000 fbba 	bl	8009f3c <xQueueGenericSendFromISR>
 80097c8:	4603      	mov	r3, r0
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	d003      	beq.n	80097d6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80097ce:	f06f 0302 	mvn.w	r3, #2
 80097d2:	61fb      	str	r3, [r7, #28]
 80097d4:	e028      	b.n	8009828 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d025      	beq.n	8009828 <osMessageQueuePut+0xb0>
 80097dc:	4b15      	ldr	r3, [pc, #84]	; (8009834 <osMessageQueuePut+0xbc>)
 80097de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097e2:	601a      	str	r2, [r3, #0]
 80097e4:	f3bf 8f4f 	dsb	sy
 80097e8:	f3bf 8f6f 	isb	sy
 80097ec:	e01c      	b.n	8009828 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80097ee:	69bb      	ldr	r3, [r7, #24]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d002      	beq.n	80097fa <osMessageQueuePut+0x82>
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d103      	bne.n	8009802 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80097fa:	f06f 0303 	mvn.w	r3, #3
 80097fe:	61fb      	str	r3, [r7, #28]
 8009800:	e012      	b.n	8009828 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009802:	2300      	movs	r3, #0
 8009804:	683a      	ldr	r2, [r7, #0]
 8009806:	68b9      	ldr	r1, [r7, #8]
 8009808:	69b8      	ldr	r0, [r7, #24]
 800980a:	f000 fa99 	bl	8009d40 <xQueueGenericSend>
 800980e:	4603      	mov	r3, r0
 8009810:	2b01      	cmp	r3, #1
 8009812:	d009      	beq.n	8009828 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d003      	beq.n	8009822 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800981a:	f06f 0301 	mvn.w	r3, #1
 800981e:	61fb      	str	r3, [r7, #28]
 8009820:	e002      	b.n	8009828 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8009822:	f06f 0302 	mvn.w	r3, #2
 8009826:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009828:	69fb      	ldr	r3, [r7, #28]
}
 800982a:	4618      	mov	r0, r3
 800982c:	3720      	adds	r7, #32
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}
 8009832:	bf00      	nop
 8009834:	e000ed04 	.word	0xe000ed04

08009838 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009838:	b580      	push	{r7, lr}
 800983a:	b088      	sub	sp, #32
 800983c:	af00      	add	r7, sp, #0
 800983e:	60f8      	str	r0, [r7, #12]
 8009840:	60b9      	str	r1, [r7, #8]
 8009842:	607a      	str	r2, [r7, #4]
 8009844:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800984a:	2300      	movs	r3, #0
 800984c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800984e:	f3ef 8305 	mrs	r3, IPSR
 8009852:	617b      	str	r3, [r7, #20]
  return(result);
 8009854:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009856:	2b00      	cmp	r3, #0
 8009858:	d028      	beq.n	80098ac <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800985a:	69bb      	ldr	r3, [r7, #24]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d005      	beq.n	800986c <osMessageQueueGet+0x34>
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d002      	beq.n	800986c <osMessageQueueGet+0x34>
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d003      	beq.n	8009874 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800986c:	f06f 0303 	mvn.w	r3, #3
 8009870:	61fb      	str	r3, [r7, #28]
 8009872:	e037      	b.n	80098e4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8009874:	2300      	movs	r3, #0
 8009876:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009878:	f107 0310 	add.w	r3, r7, #16
 800987c:	461a      	mov	r2, r3
 800987e:	68b9      	ldr	r1, [r7, #8]
 8009880:	69b8      	ldr	r0, [r7, #24]
 8009882:	f000 fcd7 	bl	800a234 <xQueueReceiveFromISR>
 8009886:	4603      	mov	r3, r0
 8009888:	2b01      	cmp	r3, #1
 800988a:	d003      	beq.n	8009894 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800988c:	f06f 0302 	mvn.w	r3, #2
 8009890:	61fb      	str	r3, [r7, #28]
 8009892:	e027      	b.n	80098e4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d024      	beq.n	80098e4 <osMessageQueueGet+0xac>
 800989a:	4b15      	ldr	r3, [pc, #84]	; (80098f0 <osMessageQueueGet+0xb8>)
 800989c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098a0:	601a      	str	r2, [r3, #0]
 80098a2:	f3bf 8f4f 	dsb	sy
 80098a6:	f3bf 8f6f 	isb	sy
 80098aa:	e01b      	b.n	80098e4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80098ac:	69bb      	ldr	r3, [r7, #24]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d002      	beq.n	80098b8 <osMessageQueueGet+0x80>
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d103      	bne.n	80098c0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80098b8:	f06f 0303 	mvn.w	r3, #3
 80098bc:	61fb      	str	r3, [r7, #28]
 80098be:	e011      	b.n	80098e4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80098c0:	683a      	ldr	r2, [r7, #0]
 80098c2:	68b9      	ldr	r1, [r7, #8]
 80098c4:	69b8      	ldr	r0, [r7, #24]
 80098c6:	f000 fbd5 	bl	800a074 <xQueueReceive>
 80098ca:	4603      	mov	r3, r0
 80098cc:	2b01      	cmp	r3, #1
 80098ce:	d009      	beq.n	80098e4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d003      	beq.n	80098de <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80098d6:	f06f 0301 	mvn.w	r3, #1
 80098da:	61fb      	str	r3, [r7, #28]
 80098dc:	e002      	b.n	80098e4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80098de:	f06f 0302 	mvn.w	r3, #2
 80098e2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80098e4:	69fb      	ldr	r3, [r7, #28]
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3720      	adds	r7, #32
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}
 80098ee:	bf00      	nop
 80098f0:	e000ed04 	.word	0xe000ed04

080098f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80098f4:	b480      	push	{r7}
 80098f6:	b085      	sub	sp, #20
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	60f8      	str	r0, [r7, #12]
 80098fc:	60b9      	str	r1, [r7, #8]
 80098fe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	4a07      	ldr	r2, [pc, #28]	; (8009920 <vApplicationGetIdleTaskMemory+0x2c>)
 8009904:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	4a06      	ldr	r2, [pc, #24]	; (8009924 <vApplicationGetIdleTaskMemory+0x30>)
 800990a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2280      	movs	r2, #128	; 0x80
 8009910:	601a      	str	r2, [r3, #0]
}
 8009912:	bf00      	nop
 8009914:	3714      	adds	r7, #20
 8009916:	46bd      	mov	sp, r7
 8009918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991c:	4770      	bx	lr
 800991e:	bf00      	nop
 8009920:	200001d0 	.word	0x200001d0
 8009924:	2000022c 	.word	0x2000022c

08009928 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009928:	b480      	push	{r7}
 800992a:	b085      	sub	sp, #20
 800992c:	af00      	add	r7, sp, #0
 800992e:	60f8      	str	r0, [r7, #12]
 8009930:	60b9      	str	r1, [r7, #8]
 8009932:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	4a07      	ldr	r2, [pc, #28]	; (8009954 <vApplicationGetTimerTaskMemory+0x2c>)
 8009938:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	4a06      	ldr	r2, [pc, #24]	; (8009958 <vApplicationGetTimerTaskMemory+0x30>)
 800993e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009946:	601a      	str	r2, [r3, #0]
}
 8009948:	bf00      	nop
 800994a:	3714      	adds	r7, #20
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr
 8009954:	2000042c 	.word	0x2000042c
 8009958:	20000488 	.word	0x20000488

0800995c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800995c:	b480      	push	{r7}
 800995e:	b083      	sub	sp, #12
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f103 0208 	add.w	r2, r3, #8
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f04f 32ff 	mov.w	r2, #4294967295
 8009974:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f103 0208 	add.w	r2, r3, #8
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f103 0208 	add.w	r2, r3, #8
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2200      	movs	r2, #0
 800998e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009990:	bf00      	nop
 8009992:	370c      	adds	r7, #12
 8009994:	46bd      	mov	sp, r7
 8009996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999a:	4770      	bx	lr

0800999c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800999c:	b480      	push	{r7}
 800999e:	b083      	sub	sp, #12
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2200      	movs	r2, #0
 80099a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80099aa:	bf00      	nop
 80099ac:	370c      	adds	r7, #12
 80099ae:	46bd      	mov	sp, r7
 80099b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b4:	4770      	bx	lr

080099b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80099b6:	b480      	push	{r7}
 80099b8:	b085      	sub	sp, #20
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	6078      	str	r0, [r7, #4]
 80099be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	685b      	ldr	r3, [r3, #4]
 80099c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	68fa      	ldr	r2, [r7, #12]
 80099ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	689a      	ldr	r2, [r3, #8]
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	689b      	ldr	r3, [r3, #8]
 80099d8:	683a      	ldr	r2, [r7, #0]
 80099da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	683a      	ldr	r2, [r7, #0]
 80099e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	687a      	ldr	r2, [r7, #4]
 80099e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	1c5a      	adds	r2, r3, #1
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	601a      	str	r2, [r3, #0]
}
 80099f2:	bf00      	nop
 80099f4:	3714      	adds	r7, #20
 80099f6:	46bd      	mov	sp, r7
 80099f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fc:	4770      	bx	lr

080099fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80099fe:	b480      	push	{r7}
 8009a00:	b085      	sub	sp, #20
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	6078      	str	r0, [r7, #4]
 8009a06:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a14:	d103      	bne.n	8009a1e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	691b      	ldr	r3, [r3, #16]
 8009a1a:	60fb      	str	r3, [r7, #12]
 8009a1c:	e00c      	b.n	8009a38 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	3308      	adds	r3, #8
 8009a22:	60fb      	str	r3, [r7, #12]
 8009a24:	e002      	b.n	8009a2c <vListInsert+0x2e>
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	685b      	ldr	r3, [r3, #4]
 8009a2a:	60fb      	str	r3, [r7, #12]
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	68ba      	ldr	r2, [r7, #8]
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d2f6      	bcs.n	8009a26 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	685a      	ldr	r2, [r3, #4]
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	683a      	ldr	r2, [r7, #0]
 8009a46:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	68fa      	ldr	r2, [r7, #12]
 8009a4c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	683a      	ldr	r2, [r7, #0]
 8009a52:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	687a      	ldr	r2, [r7, #4]
 8009a58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	1c5a      	adds	r2, r3, #1
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	601a      	str	r2, [r3, #0]
}
 8009a64:	bf00      	nop
 8009a66:	3714      	adds	r7, #20
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6e:	4770      	bx	lr

08009a70 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009a70:	b480      	push	{r7}
 8009a72:	b085      	sub	sp, #20
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	691b      	ldr	r3, [r3, #16]
 8009a7c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	685b      	ldr	r3, [r3, #4]
 8009a82:	687a      	ldr	r2, [r7, #4]
 8009a84:	6892      	ldr	r2, [r2, #8]
 8009a86:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	689b      	ldr	r3, [r3, #8]
 8009a8c:	687a      	ldr	r2, [r7, #4]
 8009a8e:	6852      	ldr	r2, [r2, #4]
 8009a90:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	685b      	ldr	r3, [r3, #4]
 8009a96:	687a      	ldr	r2, [r7, #4]
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	d103      	bne.n	8009aa4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	689a      	ldr	r2, [r3, #8]
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	1e5a      	subs	r2, r3, #1
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3714      	adds	r7, #20
 8009abc:	46bd      	mov	sp, r7
 8009abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac2:	4770      	bx	lr

08009ac4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b084      	sub	sp, #16
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
 8009acc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d10a      	bne.n	8009aee <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009adc:	f383 8811 	msr	BASEPRI, r3
 8009ae0:	f3bf 8f6f 	isb	sy
 8009ae4:	f3bf 8f4f 	dsb	sy
 8009ae8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009aea:	bf00      	nop
 8009aec:	e7fe      	b.n	8009aec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009aee:	f002 f909 	bl	800bd04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681a      	ldr	r2, [r3, #0]
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009afa:	68f9      	ldr	r1, [r7, #12]
 8009afc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009afe:	fb01 f303 	mul.w	r3, r1, r3
 8009b02:	441a      	add	r2, r3
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681a      	ldr	r2, [r3, #0]
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681a      	ldr	r2, [r3, #0]
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b1e:	3b01      	subs	r3, #1
 8009b20:	68f9      	ldr	r1, [r7, #12]
 8009b22:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009b24:	fb01 f303 	mul.w	r3, r1, r3
 8009b28:	441a      	add	r2, r3
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	22ff      	movs	r2, #255	; 0xff
 8009b32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	22ff      	movs	r2, #255	; 0xff
 8009b3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d114      	bne.n	8009b6e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	691b      	ldr	r3, [r3, #16]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d01a      	beq.n	8009b82 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	3310      	adds	r3, #16
 8009b50:	4618      	mov	r0, r3
 8009b52:	f001 f9bd 	bl	800aed0 <xTaskRemoveFromEventList>
 8009b56:	4603      	mov	r3, r0
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d012      	beq.n	8009b82 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009b5c:	4b0c      	ldr	r3, [pc, #48]	; (8009b90 <xQueueGenericReset+0xcc>)
 8009b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b62:	601a      	str	r2, [r3, #0]
 8009b64:	f3bf 8f4f 	dsb	sy
 8009b68:	f3bf 8f6f 	isb	sy
 8009b6c:	e009      	b.n	8009b82 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	3310      	adds	r3, #16
 8009b72:	4618      	mov	r0, r3
 8009b74:	f7ff fef2 	bl	800995c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	3324      	adds	r3, #36	; 0x24
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f7ff feed 	bl	800995c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009b82:	f002 f8ef 	bl	800bd64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009b86:	2301      	movs	r3, #1
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	3710      	adds	r7, #16
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}
 8009b90:	e000ed04 	.word	0xe000ed04

08009b94 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b08e      	sub	sp, #56	; 0x38
 8009b98:	af02      	add	r7, sp, #8
 8009b9a:	60f8      	str	r0, [r7, #12]
 8009b9c:	60b9      	str	r1, [r7, #8]
 8009b9e:	607a      	str	r2, [r7, #4]
 8009ba0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d10a      	bne.n	8009bbe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bac:	f383 8811 	msr	BASEPRI, r3
 8009bb0:	f3bf 8f6f 	isb	sy
 8009bb4:	f3bf 8f4f 	dsb	sy
 8009bb8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009bba:	bf00      	nop
 8009bbc:	e7fe      	b.n	8009bbc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d10a      	bne.n	8009bda <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc8:	f383 8811 	msr	BASEPRI, r3
 8009bcc:	f3bf 8f6f 	isb	sy
 8009bd0:	f3bf 8f4f 	dsb	sy
 8009bd4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009bd6:	bf00      	nop
 8009bd8:	e7fe      	b.n	8009bd8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d002      	beq.n	8009be6 <xQueueGenericCreateStatic+0x52>
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d001      	beq.n	8009bea <xQueueGenericCreateStatic+0x56>
 8009be6:	2301      	movs	r3, #1
 8009be8:	e000      	b.n	8009bec <xQueueGenericCreateStatic+0x58>
 8009bea:	2300      	movs	r3, #0
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d10a      	bne.n	8009c06 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf4:	f383 8811 	msr	BASEPRI, r3
 8009bf8:	f3bf 8f6f 	isb	sy
 8009bfc:	f3bf 8f4f 	dsb	sy
 8009c00:	623b      	str	r3, [r7, #32]
}
 8009c02:	bf00      	nop
 8009c04:	e7fe      	b.n	8009c04 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d102      	bne.n	8009c12 <xQueueGenericCreateStatic+0x7e>
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d101      	bne.n	8009c16 <xQueueGenericCreateStatic+0x82>
 8009c12:	2301      	movs	r3, #1
 8009c14:	e000      	b.n	8009c18 <xQueueGenericCreateStatic+0x84>
 8009c16:	2300      	movs	r3, #0
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d10a      	bne.n	8009c32 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c20:	f383 8811 	msr	BASEPRI, r3
 8009c24:	f3bf 8f6f 	isb	sy
 8009c28:	f3bf 8f4f 	dsb	sy
 8009c2c:	61fb      	str	r3, [r7, #28]
}
 8009c2e:	bf00      	nop
 8009c30:	e7fe      	b.n	8009c30 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009c32:	2350      	movs	r3, #80	; 0x50
 8009c34:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	2b50      	cmp	r3, #80	; 0x50
 8009c3a:	d00a      	beq.n	8009c52 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c40:	f383 8811 	msr	BASEPRI, r3
 8009c44:	f3bf 8f6f 	isb	sy
 8009c48:	f3bf 8f4f 	dsb	sy
 8009c4c:	61bb      	str	r3, [r7, #24]
}
 8009c4e:	bf00      	nop
 8009c50:	e7fe      	b.n	8009c50 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009c52:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d00d      	beq.n	8009c7a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c60:	2201      	movs	r2, #1
 8009c62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009c66:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c6c:	9300      	str	r3, [sp, #0]
 8009c6e:	4613      	mov	r3, r2
 8009c70:	687a      	ldr	r2, [r7, #4]
 8009c72:	68b9      	ldr	r1, [r7, #8]
 8009c74:	68f8      	ldr	r0, [r7, #12]
 8009c76:	f000 f83f 	bl	8009cf8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3730      	adds	r7, #48	; 0x30
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}

08009c84 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b08a      	sub	sp, #40	; 0x28
 8009c88:	af02      	add	r7, sp, #8
 8009c8a:	60f8      	str	r0, [r7, #12]
 8009c8c:	60b9      	str	r1, [r7, #8]
 8009c8e:	4613      	mov	r3, r2
 8009c90:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d10a      	bne.n	8009cae <xQueueGenericCreate+0x2a>
	__asm volatile
 8009c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c9c:	f383 8811 	msr	BASEPRI, r3
 8009ca0:	f3bf 8f6f 	isb	sy
 8009ca4:	f3bf 8f4f 	dsb	sy
 8009ca8:	613b      	str	r3, [r7, #16]
}
 8009caa:	bf00      	nop
 8009cac:	e7fe      	b.n	8009cac <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	68ba      	ldr	r2, [r7, #8]
 8009cb2:	fb02 f303 	mul.w	r3, r2, r3
 8009cb6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009cb8:	69fb      	ldr	r3, [r7, #28]
 8009cba:	3350      	adds	r3, #80	; 0x50
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f002 f943 	bl	800bf48 <pvPortMalloc>
 8009cc2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009cc4:	69bb      	ldr	r3, [r7, #24]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d011      	beq.n	8009cee <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009cca:	69bb      	ldr	r3, [r7, #24]
 8009ccc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	3350      	adds	r3, #80	; 0x50
 8009cd2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009cd4:	69bb      	ldr	r3, [r7, #24]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009cdc:	79fa      	ldrb	r2, [r7, #7]
 8009cde:	69bb      	ldr	r3, [r7, #24]
 8009ce0:	9300      	str	r3, [sp, #0]
 8009ce2:	4613      	mov	r3, r2
 8009ce4:	697a      	ldr	r2, [r7, #20]
 8009ce6:	68b9      	ldr	r1, [r7, #8]
 8009ce8:	68f8      	ldr	r0, [r7, #12]
 8009cea:	f000 f805 	bl	8009cf8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009cee:	69bb      	ldr	r3, [r7, #24]
	}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3720      	adds	r7, #32
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b084      	sub	sp, #16
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	60f8      	str	r0, [r7, #12]
 8009d00:	60b9      	str	r1, [r7, #8]
 8009d02:	607a      	str	r2, [r7, #4]
 8009d04:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d103      	bne.n	8009d14 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009d0c:	69bb      	ldr	r3, [r7, #24]
 8009d0e:	69ba      	ldr	r2, [r7, #24]
 8009d10:	601a      	str	r2, [r3, #0]
 8009d12:	e002      	b.n	8009d1a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009d14:	69bb      	ldr	r3, [r7, #24]
 8009d16:	687a      	ldr	r2, [r7, #4]
 8009d18:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009d1a:	69bb      	ldr	r3, [r7, #24]
 8009d1c:	68fa      	ldr	r2, [r7, #12]
 8009d1e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009d20:	69bb      	ldr	r3, [r7, #24]
 8009d22:	68ba      	ldr	r2, [r7, #8]
 8009d24:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009d26:	2101      	movs	r1, #1
 8009d28:	69b8      	ldr	r0, [r7, #24]
 8009d2a:	f7ff fecb 	bl	8009ac4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009d2e:	69bb      	ldr	r3, [r7, #24]
 8009d30:	78fa      	ldrb	r2, [r7, #3]
 8009d32:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009d36:	bf00      	nop
 8009d38:	3710      	adds	r7, #16
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
	...

08009d40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b08e      	sub	sp, #56	; 0x38
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	60f8      	str	r0, [r7, #12]
 8009d48:	60b9      	str	r1, [r7, #8]
 8009d4a:	607a      	str	r2, [r7, #4]
 8009d4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d10a      	bne.n	8009d72 <xQueueGenericSend+0x32>
	__asm volatile
 8009d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d60:	f383 8811 	msr	BASEPRI, r3
 8009d64:	f3bf 8f6f 	isb	sy
 8009d68:	f3bf 8f4f 	dsb	sy
 8009d6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009d6e:	bf00      	nop
 8009d70:	e7fe      	b.n	8009d70 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d103      	bne.n	8009d80 <xQueueGenericSend+0x40>
 8009d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d101      	bne.n	8009d84 <xQueueGenericSend+0x44>
 8009d80:	2301      	movs	r3, #1
 8009d82:	e000      	b.n	8009d86 <xQueueGenericSend+0x46>
 8009d84:	2300      	movs	r3, #0
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d10a      	bne.n	8009da0 <xQueueGenericSend+0x60>
	__asm volatile
 8009d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d8e:	f383 8811 	msr	BASEPRI, r3
 8009d92:	f3bf 8f6f 	isb	sy
 8009d96:	f3bf 8f4f 	dsb	sy
 8009d9a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009d9c:	bf00      	nop
 8009d9e:	e7fe      	b.n	8009d9e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	2b02      	cmp	r3, #2
 8009da4:	d103      	bne.n	8009dae <xQueueGenericSend+0x6e>
 8009da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009daa:	2b01      	cmp	r3, #1
 8009dac:	d101      	bne.n	8009db2 <xQueueGenericSend+0x72>
 8009dae:	2301      	movs	r3, #1
 8009db0:	e000      	b.n	8009db4 <xQueueGenericSend+0x74>
 8009db2:	2300      	movs	r3, #0
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d10a      	bne.n	8009dce <xQueueGenericSend+0x8e>
	__asm volatile
 8009db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dbc:	f383 8811 	msr	BASEPRI, r3
 8009dc0:	f3bf 8f6f 	isb	sy
 8009dc4:	f3bf 8f4f 	dsb	sy
 8009dc8:	623b      	str	r3, [r7, #32]
}
 8009dca:	bf00      	nop
 8009dcc:	e7fe      	b.n	8009dcc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009dce:	f001 fa3d 	bl	800b24c <xTaskGetSchedulerState>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d102      	bne.n	8009dde <xQueueGenericSend+0x9e>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d101      	bne.n	8009de2 <xQueueGenericSend+0xa2>
 8009dde:	2301      	movs	r3, #1
 8009de0:	e000      	b.n	8009de4 <xQueueGenericSend+0xa4>
 8009de2:	2300      	movs	r3, #0
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d10a      	bne.n	8009dfe <xQueueGenericSend+0xbe>
	__asm volatile
 8009de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dec:	f383 8811 	msr	BASEPRI, r3
 8009df0:	f3bf 8f6f 	isb	sy
 8009df4:	f3bf 8f4f 	dsb	sy
 8009df8:	61fb      	str	r3, [r7, #28]
}
 8009dfa:	bf00      	nop
 8009dfc:	e7fe      	b.n	8009dfc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009dfe:	f001 ff81 	bl	800bd04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d302      	bcc.n	8009e14 <xQueueGenericSend+0xd4>
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	2b02      	cmp	r3, #2
 8009e12:	d129      	bne.n	8009e68 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009e14:	683a      	ldr	r2, [r7, #0]
 8009e16:	68b9      	ldr	r1, [r7, #8]
 8009e18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e1a:	f000 fa8b 	bl	800a334 <prvCopyDataToQueue>
 8009e1e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d010      	beq.n	8009e4a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e2a:	3324      	adds	r3, #36	; 0x24
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f001 f84f 	bl	800aed0 <xTaskRemoveFromEventList>
 8009e32:	4603      	mov	r3, r0
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d013      	beq.n	8009e60 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009e38:	4b3f      	ldr	r3, [pc, #252]	; (8009f38 <xQueueGenericSend+0x1f8>)
 8009e3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e3e:	601a      	str	r2, [r3, #0]
 8009e40:	f3bf 8f4f 	dsb	sy
 8009e44:	f3bf 8f6f 	isb	sy
 8009e48:	e00a      	b.n	8009e60 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d007      	beq.n	8009e60 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009e50:	4b39      	ldr	r3, [pc, #228]	; (8009f38 <xQueueGenericSend+0x1f8>)
 8009e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e56:	601a      	str	r2, [r3, #0]
 8009e58:	f3bf 8f4f 	dsb	sy
 8009e5c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009e60:	f001 ff80 	bl	800bd64 <vPortExitCritical>
				return pdPASS;
 8009e64:	2301      	movs	r3, #1
 8009e66:	e063      	b.n	8009f30 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d103      	bne.n	8009e76 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009e6e:	f001 ff79 	bl	800bd64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009e72:	2300      	movs	r3, #0
 8009e74:	e05c      	b.n	8009f30 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d106      	bne.n	8009e8a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009e7c:	f107 0314 	add.w	r3, r7, #20
 8009e80:	4618      	mov	r0, r3
 8009e82:	f001 f889 	bl	800af98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009e86:	2301      	movs	r3, #1
 8009e88:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009e8a:	f001 ff6b 	bl	800bd64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009e8e:	f000 fdfb 	bl	800aa88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009e92:	f001 ff37 	bl	800bd04 <vPortEnterCritical>
 8009e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e9c:	b25b      	sxtb	r3, r3
 8009e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ea2:	d103      	bne.n	8009eac <xQueueGenericSend+0x16c>
 8009ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009eb2:	b25b      	sxtb	r3, r3
 8009eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eb8:	d103      	bne.n	8009ec2 <xQueueGenericSend+0x182>
 8009eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ec2:	f001 ff4f 	bl	800bd64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009ec6:	1d3a      	adds	r2, r7, #4
 8009ec8:	f107 0314 	add.w	r3, r7, #20
 8009ecc:	4611      	mov	r1, r2
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f001 f878 	bl	800afc4 <xTaskCheckForTimeOut>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d124      	bne.n	8009f24 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009eda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009edc:	f000 fb22 	bl	800a524 <prvIsQueueFull>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d018      	beq.n	8009f18 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee8:	3310      	adds	r3, #16
 8009eea:	687a      	ldr	r2, [r7, #4]
 8009eec:	4611      	mov	r1, r2
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f000 ff9e 	bl	800ae30 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009ef4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ef6:	f000 faad 	bl	800a454 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009efa:	f000 fdd3 	bl	800aaa4 <xTaskResumeAll>
 8009efe:	4603      	mov	r3, r0
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	f47f af7c 	bne.w	8009dfe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009f06:	4b0c      	ldr	r3, [pc, #48]	; (8009f38 <xQueueGenericSend+0x1f8>)
 8009f08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f0c:	601a      	str	r2, [r3, #0]
 8009f0e:	f3bf 8f4f 	dsb	sy
 8009f12:	f3bf 8f6f 	isb	sy
 8009f16:	e772      	b.n	8009dfe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009f18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f1a:	f000 fa9b 	bl	800a454 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009f1e:	f000 fdc1 	bl	800aaa4 <xTaskResumeAll>
 8009f22:	e76c      	b.n	8009dfe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009f24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f26:	f000 fa95 	bl	800a454 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009f2a:	f000 fdbb 	bl	800aaa4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009f2e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3738      	adds	r7, #56	; 0x38
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}
 8009f38:	e000ed04 	.word	0xe000ed04

08009f3c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b090      	sub	sp, #64	; 0x40
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	60f8      	str	r0, [r7, #12]
 8009f44:	60b9      	str	r1, [r7, #8]
 8009f46:	607a      	str	r2, [r7, #4]
 8009f48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d10a      	bne.n	8009f6a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f58:	f383 8811 	msr	BASEPRI, r3
 8009f5c:	f3bf 8f6f 	isb	sy
 8009f60:	f3bf 8f4f 	dsb	sy
 8009f64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009f66:	bf00      	nop
 8009f68:	e7fe      	b.n	8009f68 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d103      	bne.n	8009f78 <xQueueGenericSendFromISR+0x3c>
 8009f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d101      	bne.n	8009f7c <xQueueGenericSendFromISR+0x40>
 8009f78:	2301      	movs	r3, #1
 8009f7a:	e000      	b.n	8009f7e <xQueueGenericSendFromISR+0x42>
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d10a      	bne.n	8009f98 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f86:	f383 8811 	msr	BASEPRI, r3
 8009f8a:	f3bf 8f6f 	isb	sy
 8009f8e:	f3bf 8f4f 	dsb	sy
 8009f92:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009f94:	bf00      	nop
 8009f96:	e7fe      	b.n	8009f96 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	2b02      	cmp	r3, #2
 8009f9c:	d103      	bne.n	8009fa6 <xQueueGenericSendFromISR+0x6a>
 8009f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fa2:	2b01      	cmp	r3, #1
 8009fa4:	d101      	bne.n	8009faa <xQueueGenericSendFromISR+0x6e>
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	e000      	b.n	8009fac <xQueueGenericSendFromISR+0x70>
 8009faa:	2300      	movs	r3, #0
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d10a      	bne.n	8009fc6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb4:	f383 8811 	msr	BASEPRI, r3
 8009fb8:	f3bf 8f6f 	isb	sy
 8009fbc:	f3bf 8f4f 	dsb	sy
 8009fc0:	623b      	str	r3, [r7, #32]
}
 8009fc2:	bf00      	nop
 8009fc4:	e7fe      	b.n	8009fc4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009fc6:	f001 ff7f 	bl	800bec8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009fca:	f3ef 8211 	mrs	r2, BASEPRI
 8009fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd2:	f383 8811 	msr	BASEPRI, r3
 8009fd6:	f3bf 8f6f 	isb	sy
 8009fda:	f3bf 8f4f 	dsb	sy
 8009fde:	61fa      	str	r2, [r7, #28]
 8009fe0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009fe2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009fe4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fee:	429a      	cmp	r2, r3
 8009ff0:	d302      	bcc.n	8009ff8 <xQueueGenericSendFromISR+0xbc>
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	2b02      	cmp	r3, #2
 8009ff6:	d12f      	bne.n	800a058 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ffa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ffe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a006:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a008:	683a      	ldr	r2, [r7, #0]
 800a00a:	68b9      	ldr	r1, [r7, #8]
 800a00c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a00e:	f000 f991 	bl	800a334 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a012:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a01a:	d112      	bne.n	800a042 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a01e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a020:	2b00      	cmp	r3, #0
 800a022:	d016      	beq.n	800a052 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a026:	3324      	adds	r3, #36	; 0x24
 800a028:	4618      	mov	r0, r3
 800a02a:	f000 ff51 	bl	800aed0 <xTaskRemoveFromEventList>
 800a02e:	4603      	mov	r3, r0
 800a030:	2b00      	cmp	r3, #0
 800a032:	d00e      	beq.n	800a052 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d00b      	beq.n	800a052 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2201      	movs	r2, #1
 800a03e:	601a      	str	r2, [r3, #0]
 800a040:	e007      	b.n	800a052 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a042:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a046:	3301      	adds	r3, #1
 800a048:	b2db      	uxtb	r3, r3
 800a04a:	b25a      	sxtb	r2, r3
 800a04c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a04e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a052:	2301      	movs	r3, #1
 800a054:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a056:	e001      	b.n	800a05c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a058:	2300      	movs	r3, #0
 800a05a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a05c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a05e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a060:	697b      	ldr	r3, [r7, #20]
 800a062:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a066:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3740      	adds	r7, #64	; 0x40
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}
	...

0800a074 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b08c      	sub	sp, #48	; 0x30
 800a078:	af00      	add	r7, sp, #0
 800a07a:	60f8      	str	r0, [r7, #12]
 800a07c:	60b9      	str	r1, [r7, #8]
 800a07e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a080:	2300      	movs	r3, #0
 800a082:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d10a      	bne.n	800a0a4 <xQueueReceive+0x30>
	__asm volatile
 800a08e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a092:	f383 8811 	msr	BASEPRI, r3
 800a096:	f3bf 8f6f 	isb	sy
 800a09a:	f3bf 8f4f 	dsb	sy
 800a09e:	623b      	str	r3, [r7, #32]
}
 800a0a0:	bf00      	nop
 800a0a2:	e7fe      	b.n	800a0a2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d103      	bne.n	800a0b2 <xQueueReceive+0x3e>
 800a0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d101      	bne.n	800a0b6 <xQueueReceive+0x42>
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	e000      	b.n	800a0b8 <xQueueReceive+0x44>
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d10a      	bne.n	800a0d2 <xQueueReceive+0x5e>
	__asm volatile
 800a0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c0:	f383 8811 	msr	BASEPRI, r3
 800a0c4:	f3bf 8f6f 	isb	sy
 800a0c8:	f3bf 8f4f 	dsb	sy
 800a0cc:	61fb      	str	r3, [r7, #28]
}
 800a0ce:	bf00      	nop
 800a0d0:	e7fe      	b.n	800a0d0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a0d2:	f001 f8bb 	bl	800b24c <xTaskGetSchedulerState>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d102      	bne.n	800a0e2 <xQueueReceive+0x6e>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d101      	bne.n	800a0e6 <xQueueReceive+0x72>
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	e000      	b.n	800a0e8 <xQueueReceive+0x74>
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d10a      	bne.n	800a102 <xQueueReceive+0x8e>
	__asm volatile
 800a0ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f0:	f383 8811 	msr	BASEPRI, r3
 800a0f4:	f3bf 8f6f 	isb	sy
 800a0f8:	f3bf 8f4f 	dsb	sy
 800a0fc:	61bb      	str	r3, [r7, #24]
}
 800a0fe:	bf00      	nop
 800a100:	e7fe      	b.n	800a100 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a102:	f001 fdff 	bl	800bd04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a10a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d01f      	beq.n	800a152 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a112:	68b9      	ldr	r1, [r7, #8]
 800a114:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a116:	f000 f977 	bl	800a408 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a11c:	1e5a      	subs	r2, r3, #1
 800a11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a120:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a124:	691b      	ldr	r3, [r3, #16]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d00f      	beq.n	800a14a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a12c:	3310      	adds	r3, #16
 800a12e:	4618      	mov	r0, r3
 800a130:	f000 fece 	bl	800aed0 <xTaskRemoveFromEventList>
 800a134:	4603      	mov	r3, r0
 800a136:	2b00      	cmp	r3, #0
 800a138:	d007      	beq.n	800a14a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a13a:	4b3d      	ldr	r3, [pc, #244]	; (800a230 <xQueueReceive+0x1bc>)
 800a13c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a140:	601a      	str	r2, [r3, #0]
 800a142:	f3bf 8f4f 	dsb	sy
 800a146:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a14a:	f001 fe0b 	bl	800bd64 <vPortExitCritical>
				return pdPASS;
 800a14e:	2301      	movs	r3, #1
 800a150:	e069      	b.n	800a226 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d103      	bne.n	800a160 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a158:	f001 fe04 	bl	800bd64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a15c:	2300      	movs	r3, #0
 800a15e:	e062      	b.n	800a226 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a162:	2b00      	cmp	r3, #0
 800a164:	d106      	bne.n	800a174 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a166:	f107 0310 	add.w	r3, r7, #16
 800a16a:	4618      	mov	r0, r3
 800a16c:	f000 ff14 	bl	800af98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a170:	2301      	movs	r3, #1
 800a172:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a174:	f001 fdf6 	bl	800bd64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a178:	f000 fc86 	bl	800aa88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a17c:	f001 fdc2 	bl	800bd04 <vPortEnterCritical>
 800a180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a182:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a186:	b25b      	sxtb	r3, r3
 800a188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a18c:	d103      	bne.n	800a196 <xQueueReceive+0x122>
 800a18e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a190:	2200      	movs	r2, #0
 800a192:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a198:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a19c:	b25b      	sxtb	r3, r3
 800a19e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1a2:	d103      	bne.n	800a1ac <xQueueReceive+0x138>
 800a1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a1ac:	f001 fdda 	bl	800bd64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a1b0:	1d3a      	adds	r2, r7, #4
 800a1b2:	f107 0310 	add.w	r3, r7, #16
 800a1b6:	4611      	mov	r1, r2
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f000 ff03 	bl	800afc4 <xTaskCheckForTimeOut>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d123      	bne.n	800a20c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a1c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1c6:	f000 f997 	bl	800a4f8 <prvIsQueueEmpty>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d017      	beq.n	800a200 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d2:	3324      	adds	r3, #36	; 0x24
 800a1d4:	687a      	ldr	r2, [r7, #4]
 800a1d6:	4611      	mov	r1, r2
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f000 fe29 	bl	800ae30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a1de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1e0:	f000 f938 	bl	800a454 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a1e4:	f000 fc5e 	bl	800aaa4 <xTaskResumeAll>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d189      	bne.n	800a102 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a1ee:	4b10      	ldr	r3, [pc, #64]	; (800a230 <xQueueReceive+0x1bc>)
 800a1f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1f4:	601a      	str	r2, [r3, #0]
 800a1f6:	f3bf 8f4f 	dsb	sy
 800a1fa:	f3bf 8f6f 	isb	sy
 800a1fe:	e780      	b.n	800a102 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a200:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a202:	f000 f927 	bl	800a454 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a206:	f000 fc4d 	bl	800aaa4 <xTaskResumeAll>
 800a20a:	e77a      	b.n	800a102 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a20c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a20e:	f000 f921 	bl	800a454 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a212:	f000 fc47 	bl	800aaa4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a216:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a218:	f000 f96e 	bl	800a4f8 <prvIsQueueEmpty>
 800a21c:	4603      	mov	r3, r0
 800a21e:	2b00      	cmp	r3, #0
 800a220:	f43f af6f 	beq.w	800a102 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a224:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a226:	4618      	mov	r0, r3
 800a228:	3730      	adds	r7, #48	; 0x30
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}
 800a22e:	bf00      	nop
 800a230:	e000ed04 	.word	0xe000ed04

0800a234 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b08e      	sub	sp, #56	; 0x38
 800a238:	af00      	add	r7, sp, #0
 800a23a:	60f8      	str	r0, [r7, #12]
 800a23c:	60b9      	str	r1, [r7, #8]
 800a23e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a246:	2b00      	cmp	r3, #0
 800a248:	d10a      	bne.n	800a260 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a24e:	f383 8811 	msr	BASEPRI, r3
 800a252:	f3bf 8f6f 	isb	sy
 800a256:	f3bf 8f4f 	dsb	sy
 800a25a:	623b      	str	r3, [r7, #32]
}
 800a25c:	bf00      	nop
 800a25e:	e7fe      	b.n	800a25e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d103      	bne.n	800a26e <xQueueReceiveFromISR+0x3a>
 800a266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d101      	bne.n	800a272 <xQueueReceiveFromISR+0x3e>
 800a26e:	2301      	movs	r3, #1
 800a270:	e000      	b.n	800a274 <xQueueReceiveFromISR+0x40>
 800a272:	2300      	movs	r3, #0
 800a274:	2b00      	cmp	r3, #0
 800a276:	d10a      	bne.n	800a28e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a27c:	f383 8811 	msr	BASEPRI, r3
 800a280:	f3bf 8f6f 	isb	sy
 800a284:	f3bf 8f4f 	dsb	sy
 800a288:	61fb      	str	r3, [r7, #28]
}
 800a28a:	bf00      	nop
 800a28c:	e7fe      	b.n	800a28c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a28e:	f001 fe1b 	bl	800bec8 <vPortValidateInterruptPriority>
	__asm volatile
 800a292:	f3ef 8211 	mrs	r2, BASEPRI
 800a296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a29a:	f383 8811 	msr	BASEPRI, r3
 800a29e:	f3bf 8f6f 	isb	sy
 800a2a2:	f3bf 8f4f 	dsb	sy
 800a2a6:	61ba      	str	r2, [r7, #24]
 800a2a8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a2aa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a2ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2b2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d02f      	beq.n	800a31a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a2c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a2c4:	68b9      	ldr	r1, [r7, #8]
 800a2c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2c8:	f000 f89e 	bl	800a408 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ce:	1e5a      	subs	r2, r3, #1
 800a2d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a2d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a2d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2dc:	d112      	bne.n	800a304 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e0:	691b      	ldr	r3, [r3, #16]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d016      	beq.n	800a314 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e8:	3310      	adds	r3, #16
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f000 fdf0 	bl	800aed0 <xTaskRemoveFromEventList>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d00e      	beq.n	800a314 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d00b      	beq.n	800a314 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2201      	movs	r2, #1
 800a300:	601a      	str	r2, [r3, #0]
 800a302:	e007      	b.n	800a314 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a304:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a308:	3301      	adds	r3, #1
 800a30a:	b2db      	uxtb	r3, r3
 800a30c:	b25a      	sxtb	r2, r3
 800a30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a310:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a314:	2301      	movs	r3, #1
 800a316:	637b      	str	r3, [r7, #52]	; 0x34
 800a318:	e001      	b.n	800a31e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a31a:	2300      	movs	r3, #0
 800a31c:	637b      	str	r3, [r7, #52]	; 0x34
 800a31e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a320:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	f383 8811 	msr	BASEPRI, r3
}
 800a328:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a32a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3738      	adds	r7, #56	; 0x38
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}

0800a334 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b086      	sub	sp, #24
 800a338:	af00      	add	r7, sp, #0
 800a33a:	60f8      	str	r0, [r7, #12]
 800a33c:	60b9      	str	r1, [r7, #8]
 800a33e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a340:	2300      	movs	r3, #0
 800a342:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a348:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d10d      	bne.n	800a36e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d14d      	bne.n	800a3f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	689b      	ldr	r3, [r3, #8]
 800a35e:	4618      	mov	r0, r3
 800a360:	f000 ff92 	bl	800b288 <xTaskPriorityDisinherit>
 800a364:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	2200      	movs	r2, #0
 800a36a:	609a      	str	r2, [r3, #8]
 800a36c:	e043      	b.n	800a3f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d119      	bne.n	800a3a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	6858      	ldr	r0, [r3, #4]
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a37c:	461a      	mov	r2, r3
 800a37e:	68b9      	ldr	r1, [r7, #8]
 800a380:	f002 fb08 	bl	800c994 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	685a      	ldr	r2, [r3, #4]
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a38c:	441a      	add	r2, r3
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	685a      	ldr	r2, [r3, #4]
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	689b      	ldr	r3, [r3, #8]
 800a39a:	429a      	cmp	r2, r3
 800a39c:	d32b      	bcc.n	800a3f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681a      	ldr	r2, [r3, #0]
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	605a      	str	r2, [r3, #4]
 800a3a6:	e026      	b.n	800a3f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	68d8      	ldr	r0, [r3, #12]
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3b0:	461a      	mov	r2, r3
 800a3b2:	68b9      	ldr	r1, [r7, #8]
 800a3b4:	f002 faee 	bl	800c994 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	68da      	ldr	r2, [r3, #12]
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3c0:	425b      	negs	r3, r3
 800a3c2:	441a      	add	r2, r3
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	68da      	ldr	r2, [r3, #12]
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d207      	bcs.n	800a3e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	689a      	ldr	r2, [r3, #8]
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3dc:	425b      	negs	r3, r3
 800a3de:	441a      	add	r2, r3
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2b02      	cmp	r3, #2
 800a3e8:	d105      	bne.n	800a3f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a3ea:	693b      	ldr	r3, [r7, #16]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d002      	beq.n	800a3f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	3b01      	subs	r3, #1
 800a3f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	1c5a      	adds	r2, r3, #1
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a3fe:	697b      	ldr	r3, [r7, #20]
}
 800a400:	4618      	mov	r0, r3
 800a402:	3718      	adds	r7, #24
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}

0800a408 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b082      	sub	sp, #8
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a416:	2b00      	cmp	r3, #0
 800a418:	d018      	beq.n	800a44c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	68da      	ldr	r2, [r3, #12]
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a422:	441a      	add	r2, r3
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	68da      	ldr	r2, [r3, #12]
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	689b      	ldr	r3, [r3, #8]
 800a430:	429a      	cmp	r2, r3
 800a432:	d303      	bcc.n	800a43c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681a      	ldr	r2, [r3, #0]
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	68d9      	ldr	r1, [r3, #12]
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a444:	461a      	mov	r2, r3
 800a446:	6838      	ldr	r0, [r7, #0]
 800a448:	f002 faa4 	bl	800c994 <memcpy>
	}
}
 800a44c:	bf00      	nop
 800a44e:	3708      	adds	r7, #8
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}

0800a454 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b084      	sub	sp, #16
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a45c:	f001 fc52 	bl	800bd04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a466:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a468:	e011      	b.n	800a48e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d012      	beq.n	800a498 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	3324      	adds	r3, #36	; 0x24
 800a476:	4618      	mov	r0, r3
 800a478:	f000 fd2a 	bl	800aed0 <xTaskRemoveFromEventList>
 800a47c:	4603      	mov	r3, r0
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d001      	beq.n	800a486 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a482:	f000 fe01 	bl	800b088 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a486:	7bfb      	ldrb	r3, [r7, #15]
 800a488:	3b01      	subs	r3, #1
 800a48a:	b2db      	uxtb	r3, r3
 800a48c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a48e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a492:	2b00      	cmp	r3, #0
 800a494:	dce9      	bgt.n	800a46a <prvUnlockQueue+0x16>
 800a496:	e000      	b.n	800a49a <prvUnlockQueue+0x46>
					break;
 800a498:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	22ff      	movs	r2, #255	; 0xff
 800a49e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a4a2:	f001 fc5f 	bl	800bd64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a4a6:	f001 fc2d 	bl	800bd04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a4b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a4b2:	e011      	b.n	800a4d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	691b      	ldr	r3, [r3, #16]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d012      	beq.n	800a4e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	3310      	adds	r3, #16
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f000 fd05 	bl	800aed0 <xTaskRemoveFromEventList>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d001      	beq.n	800a4d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a4cc:	f000 fddc 	bl	800b088 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a4d0:	7bbb      	ldrb	r3, [r7, #14]
 800a4d2:	3b01      	subs	r3, #1
 800a4d4:	b2db      	uxtb	r3, r3
 800a4d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a4d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	dce9      	bgt.n	800a4b4 <prvUnlockQueue+0x60>
 800a4e0:	e000      	b.n	800a4e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a4e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	22ff      	movs	r2, #255	; 0xff
 800a4e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a4ec:	f001 fc3a 	bl	800bd64 <vPortExitCritical>
}
 800a4f0:	bf00      	nop
 800a4f2:	3710      	adds	r7, #16
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}

0800a4f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b084      	sub	sp, #16
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a500:	f001 fc00 	bl	800bd04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d102      	bne.n	800a512 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a50c:	2301      	movs	r3, #1
 800a50e:	60fb      	str	r3, [r7, #12]
 800a510:	e001      	b.n	800a516 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a512:	2300      	movs	r3, #0
 800a514:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a516:	f001 fc25 	bl	800bd64 <vPortExitCritical>

	return xReturn;
 800a51a:	68fb      	ldr	r3, [r7, #12]
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3710      	adds	r7, #16
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}

0800a524 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b084      	sub	sp, #16
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a52c:	f001 fbea 	bl	800bd04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a538:	429a      	cmp	r2, r3
 800a53a:	d102      	bne.n	800a542 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a53c:	2301      	movs	r3, #1
 800a53e:	60fb      	str	r3, [r7, #12]
 800a540:	e001      	b.n	800a546 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a542:	2300      	movs	r3, #0
 800a544:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a546:	f001 fc0d 	bl	800bd64 <vPortExitCritical>

	return xReturn;
 800a54a:	68fb      	ldr	r3, [r7, #12]
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3710      	adds	r7, #16
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}

0800a554 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a554:	b480      	push	{r7}
 800a556:	b085      	sub	sp, #20
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
 800a55c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a55e:	2300      	movs	r3, #0
 800a560:	60fb      	str	r3, [r7, #12]
 800a562:	e014      	b.n	800a58e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a564:	4a0f      	ldr	r2, [pc, #60]	; (800a5a4 <vQueueAddToRegistry+0x50>)
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d10b      	bne.n	800a588 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a570:	490c      	ldr	r1, [pc, #48]	; (800a5a4 <vQueueAddToRegistry+0x50>)
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	683a      	ldr	r2, [r7, #0]
 800a576:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a57a:	4a0a      	ldr	r2, [pc, #40]	; (800a5a4 <vQueueAddToRegistry+0x50>)
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	00db      	lsls	r3, r3, #3
 800a580:	4413      	add	r3, r2
 800a582:	687a      	ldr	r2, [r7, #4]
 800a584:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a586:	e006      	b.n	800a596 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	3301      	adds	r3, #1
 800a58c:	60fb      	str	r3, [r7, #12]
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	2b07      	cmp	r3, #7
 800a592:	d9e7      	bls.n	800a564 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a594:	bf00      	nop
 800a596:	bf00      	nop
 800a598:	3714      	adds	r7, #20
 800a59a:	46bd      	mov	sp, r7
 800a59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a0:	4770      	bx	lr
 800a5a2:	bf00      	nop
 800a5a4:	20000888 	.word	0x20000888

0800a5a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b086      	sub	sp, #24
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	60f8      	str	r0, [r7, #12]
 800a5b0:	60b9      	str	r1, [r7, #8]
 800a5b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a5b8:	f001 fba4 	bl	800bd04 <vPortEnterCritical>
 800a5bc:	697b      	ldr	r3, [r7, #20]
 800a5be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a5c2:	b25b      	sxtb	r3, r3
 800a5c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5c8:	d103      	bne.n	800a5d2 <vQueueWaitForMessageRestricted+0x2a>
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a5d2:	697b      	ldr	r3, [r7, #20]
 800a5d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a5d8:	b25b      	sxtb	r3, r3
 800a5da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5de:	d103      	bne.n	800a5e8 <vQueueWaitForMessageRestricted+0x40>
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a5e8:	f001 fbbc 	bl	800bd64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d106      	bne.n	800a602 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	3324      	adds	r3, #36	; 0x24
 800a5f8:	687a      	ldr	r2, [r7, #4]
 800a5fa:	68b9      	ldr	r1, [r7, #8]
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f000 fc3b 	bl	800ae78 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a602:	6978      	ldr	r0, [r7, #20]
 800a604:	f7ff ff26 	bl	800a454 <prvUnlockQueue>
	}
 800a608:	bf00      	nop
 800a60a:	3718      	adds	r7, #24
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}

0800a610 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a610:	b580      	push	{r7, lr}
 800a612:	b08e      	sub	sp, #56	; 0x38
 800a614:	af04      	add	r7, sp, #16
 800a616:	60f8      	str	r0, [r7, #12]
 800a618:	60b9      	str	r1, [r7, #8]
 800a61a:	607a      	str	r2, [r7, #4]
 800a61c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a61e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a620:	2b00      	cmp	r3, #0
 800a622:	d10a      	bne.n	800a63a <xTaskCreateStatic+0x2a>
	__asm volatile
 800a624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a628:	f383 8811 	msr	BASEPRI, r3
 800a62c:	f3bf 8f6f 	isb	sy
 800a630:	f3bf 8f4f 	dsb	sy
 800a634:	623b      	str	r3, [r7, #32]
}
 800a636:	bf00      	nop
 800a638:	e7fe      	b.n	800a638 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d10a      	bne.n	800a656 <xTaskCreateStatic+0x46>
	__asm volatile
 800a640:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a644:	f383 8811 	msr	BASEPRI, r3
 800a648:	f3bf 8f6f 	isb	sy
 800a64c:	f3bf 8f4f 	dsb	sy
 800a650:	61fb      	str	r3, [r7, #28]
}
 800a652:	bf00      	nop
 800a654:	e7fe      	b.n	800a654 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a656:	235c      	movs	r3, #92	; 0x5c
 800a658:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	2b5c      	cmp	r3, #92	; 0x5c
 800a65e:	d00a      	beq.n	800a676 <xTaskCreateStatic+0x66>
	__asm volatile
 800a660:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a664:	f383 8811 	msr	BASEPRI, r3
 800a668:	f3bf 8f6f 	isb	sy
 800a66c:	f3bf 8f4f 	dsb	sy
 800a670:	61bb      	str	r3, [r7, #24]
}
 800a672:	bf00      	nop
 800a674:	e7fe      	b.n	800a674 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a676:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d01e      	beq.n	800a6bc <xTaskCreateStatic+0xac>
 800a67e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a680:	2b00      	cmp	r3, #0
 800a682:	d01b      	beq.n	800a6bc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a686:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a68a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a68c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a690:	2202      	movs	r2, #2
 800a692:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a696:	2300      	movs	r3, #0
 800a698:	9303      	str	r3, [sp, #12]
 800a69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a69c:	9302      	str	r3, [sp, #8]
 800a69e:	f107 0314 	add.w	r3, r7, #20
 800a6a2:	9301      	str	r3, [sp, #4]
 800a6a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a6:	9300      	str	r3, [sp, #0]
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	687a      	ldr	r2, [r7, #4]
 800a6ac:	68b9      	ldr	r1, [r7, #8]
 800a6ae:	68f8      	ldr	r0, [r7, #12]
 800a6b0:	f000 f850 	bl	800a754 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a6b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a6b6:	f000 f8dd 	bl	800a874 <prvAddNewTaskToReadyList>
 800a6ba:	e001      	b.n	800a6c0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a6c0:	697b      	ldr	r3, [r7, #20]
	}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3728      	adds	r7, #40	; 0x28
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}

0800a6ca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a6ca:	b580      	push	{r7, lr}
 800a6cc:	b08c      	sub	sp, #48	; 0x30
 800a6ce:	af04      	add	r7, sp, #16
 800a6d0:	60f8      	str	r0, [r7, #12]
 800a6d2:	60b9      	str	r1, [r7, #8]
 800a6d4:	603b      	str	r3, [r7, #0]
 800a6d6:	4613      	mov	r3, r2
 800a6d8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a6da:	88fb      	ldrh	r3, [r7, #6]
 800a6dc:	009b      	lsls	r3, r3, #2
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f001 fc32 	bl	800bf48 <pvPortMalloc>
 800a6e4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d00e      	beq.n	800a70a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a6ec:	205c      	movs	r0, #92	; 0x5c
 800a6ee:	f001 fc2b 	bl	800bf48 <pvPortMalloc>
 800a6f2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a6f4:	69fb      	ldr	r3, [r7, #28]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d003      	beq.n	800a702 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a6fa:	69fb      	ldr	r3, [r7, #28]
 800a6fc:	697a      	ldr	r2, [r7, #20]
 800a6fe:	631a      	str	r2, [r3, #48]	; 0x30
 800a700:	e005      	b.n	800a70e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a702:	6978      	ldr	r0, [r7, #20]
 800a704:	f001 fcec 	bl	800c0e0 <vPortFree>
 800a708:	e001      	b.n	800a70e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a70a:	2300      	movs	r3, #0
 800a70c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a70e:	69fb      	ldr	r3, [r7, #28]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d017      	beq.n	800a744 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a714:	69fb      	ldr	r3, [r7, #28]
 800a716:	2200      	movs	r2, #0
 800a718:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a71c:	88fa      	ldrh	r2, [r7, #6]
 800a71e:	2300      	movs	r3, #0
 800a720:	9303      	str	r3, [sp, #12]
 800a722:	69fb      	ldr	r3, [r7, #28]
 800a724:	9302      	str	r3, [sp, #8]
 800a726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a728:	9301      	str	r3, [sp, #4]
 800a72a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a72c:	9300      	str	r3, [sp, #0]
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	68b9      	ldr	r1, [r7, #8]
 800a732:	68f8      	ldr	r0, [r7, #12]
 800a734:	f000 f80e 	bl	800a754 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a738:	69f8      	ldr	r0, [r7, #28]
 800a73a:	f000 f89b 	bl	800a874 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a73e:	2301      	movs	r3, #1
 800a740:	61bb      	str	r3, [r7, #24]
 800a742:	e002      	b.n	800a74a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a744:	f04f 33ff 	mov.w	r3, #4294967295
 800a748:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a74a:	69bb      	ldr	r3, [r7, #24]
	}
 800a74c:	4618      	mov	r0, r3
 800a74e:	3720      	adds	r7, #32
 800a750:	46bd      	mov	sp, r7
 800a752:	bd80      	pop	{r7, pc}

0800a754 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b088      	sub	sp, #32
 800a758:	af00      	add	r7, sp, #0
 800a75a:	60f8      	str	r0, [r7, #12]
 800a75c:	60b9      	str	r1, [r7, #8]
 800a75e:	607a      	str	r2, [r7, #4]
 800a760:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a764:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	009b      	lsls	r3, r3, #2
 800a76a:	461a      	mov	r2, r3
 800a76c:	21a5      	movs	r1, #165	; 0xa5
 800a76e:	f002 f91f 	bl	800c9b0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a774:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a77c:	3b01      	subs	r3, #1
 800a77e:	009b      	lsls	r3, r3, #2
 800a780:	4413      	add	r3, r2
 800a782:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a784:	69bb      	ldr	r3, [r7, #24]
 800a786:	f023 0307 	bic.w	r3, r3, #7
 800a78a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a78c:	69bb      	ldr	r3, [r7, #24]
 800a78e:	f003 0307 	and.w	r3, r3, #7
 800a792:	2b00      	cmp	r3, #0
 800a794:	d00a      	beq.n	800a7ac <prvInitialiseNewTask+0x58>
	__asm volatile
 800a796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a79a:	f383 8811 	msr	BASEPRI, r3
 800a79e:	f3bf 8f6f 	isb	sy
 800a7a2:	f3bf 8f4f 	dsb	sy
 800a7a6:	617b      	str	r3, [r7, #20]
}
 800a7a8:	bf00      	nop
 800a7aa:	e7fe      	b.n	800a7aa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d01f      	beq.n	800a7f2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	61fb      	str	r3, [r7, #28]
 800a7b6:	e012      	b.n	800a7de <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a7b8:	68ba      	ldr	r2, [r7, #8]
 800a7ba:	69fb      	ldr	r3, [r7, #28]
 800a7bc:	4413      	add	r3, r2
 800a7be:	7819      	ldrb	r1, [r3, #0]
 800a7c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7c2:	69fb      	ldr	r3, [r7, #28]
 800a7c4:	4413      	add	r3, r2
 800a7c6:	3334      	adds	r3, #52	; 0x34
 800a7c8:	460a      	mov	r2, r1
 800a7ca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a7cc:	68ba      	ldr	r2, [r7, #8]
 800a7ce:	69fb      	ldr	r3, [r7, #28]
 800a7d0:	4413      	add	r3, r2
 800a7d2:	781b      	ldrb	r3, [r3, #0]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d006      	beq.n	800a7e6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a7d8:	69fb      	ldr	r3, [r7, #28]
 800a7da:	3301      	adds	r3, #1
 800a7dc:	61fb      	str	r3, [r7, #28]
 800a7de:	69fb      	ldr	r3, [r7, #28]
 800a7e0:	2b0f      	cmp	r3, #15
 800a7e2:	d9e9      	bls.n	800a7b8 <prvInitialiseNewTask+0x64>
 800a7e4:	e000      	b.n	800a7e8 <prvInitialiseNewTask+0x94>
			{
				break;
 800a7e6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a7f0:	e003      	b.n	800a7fa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7fc:	2b37      	cmp	r3, #55	; 0x37
 800a7fe:	d901      	bls.n	800a804 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a800:	2337      	movs	r3, #55	; 0x37
 800a802:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a806:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a808:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a80a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a80c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a80e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a812:	2200      	movs	r2, #0
 800a814:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a818:	3304      	adds	r3, #4
 800a81a:	4618      	mov	r0, r3
 800a81c:	f7ff f8be 	bl	800999c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a822:	3318      	adds	r3, #24
 800a824:	4618      	mov	r0, r3
 800a826:	f7ff f8b9 	bl	800999c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a82c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a82e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a832:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a838:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a83a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a83c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a83e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a842:	2200      	movs	r2, #0
 800a844:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a848:	2200      	movs	r2, #0
 800a84a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a84e:	683a      	ldr	r2, [r7, #0]
 800a850:	68f9      	ldr	r1, [r7, #12]
 800a852:	69b8      	ldr	r0, [r7, #24]
 800a854:	f001 f928 	bl	800baa8 <pxPortInitialiseStack>
 800a858:	4602      	mov	r2, r0
 800a85a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a85c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a85e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a860:	2b00      	cmp	r3, #0
 800a862:	d002      	beq.n	800a86a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a866:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a868:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a86a:	bf00      	nop
 800a86c:	3720      	adds	r7, #32
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
	...

0800a874 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b082      	sub	sp, #8
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a87c:	f001 fa42 	bl	800bd04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a880:	4b2d      	ldr	r3, [pc, #180]	; (800a938 <prvAddNewTaskToReadyList+0xc4>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	3301      	adds	r3, #1
 800a886:	4a2c      	ldr	r2, [pc, #176]	; (800a938 <prvAddNewTaskToReadyList+0xc4>)
 800a888:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a88a:	4b2c      	ldr	r3, [pc, #176]	; (800a93c <prvAddNewTaskToReadyList+0xc8>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d109      	bne.n	800a8a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a892:	4a2a      	ldr	r2, [pc, #168]	; (800a93c <prvAddNewTaskToReadyList+0xc8>)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a898:	4b27      	ldr	r3, [pc, #156]	; (800a938 <prvAddNewTaskToReadyList+0xc4>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	2b01      	cmp	r3, #1
 800a89e:	d110      	bne.n	800a8c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a8a0:	f000 fc16 	bl	800b0d0 <prvInitialiseTaskLists>
 800a8a4:	e00d      	b.n	800a8c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a8a6:	4b26      	ldr	r3, [pc, #152]	; (800a940 <prvAddNewTaskToReadyList+0xcc>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d109      	bne.n	800a8c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a8ae:	4b23      	ldr	r3, [pc, #140]	; (800a93c <prvAddNewTaskToReadyList+0xc8>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8b8:	429a      	cmp	r2, r3
 800a8ba:	d802      	bhi.n	800a8c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a8bc:	4a1f      	ldr	r2, [pc, #124]	; (800a93c <prvAddNewTaskToReadyList+0xc8>)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a8c2:	4b20      	ldr	r3, [pc, #128]	; (800a944 <prvAddNewTaskToReadyList+0xd0>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	3301      	adds	r3, #1
 800a8c8:	4a1e      	ldr	r2, [pc, #120]	; (800a944 <prvAddNewTaskToReadyList+0xd0>)
 800a8ca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a8cc:	4b1d      	ldr	r3, [pc, #116]	; (800a944 <prvAddNewTaskToReadyList+0xd0>)
 800a8ce:	681a      	ldr	r2, [r3, #0]
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8d8:	4b1b      	ldr	r3, [pc, #108]	; (800a948 <prvAddNewTaskToReadyList+0xd4>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	429a      	cmp	r2, r3
 800a8de:	d903      	bls.n	800a8e8 <prvAddNewTaskToReadyList+0x74>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8e4:	4a18      	ldr	r2, [pc, #96]	; (800a948 <prvAddNewTaskToReadyList+0xd4>)
 800a8e6:	6013      	str	r3, [r2, #0]
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8ec:	4613      	mov	r3, r2
 800a8ee:	009b      	lsls	r3, r3, #2
 800a8f0:	4413      	add	r3, r2
 800a8f2:	009b      	lsls	r3, r3, #2
 800a8f4:	4a15      	ldr	r2, [pc, #84]	; (800a94c <prvAddNewTaskToReadyList+0xd8>)
 800a8f6:	441a      	add	r2, r3
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	3304      	adds	r3, #4
 800a8fc:	4619      	mov	r1, r3
 800a8fe:	4610      	mov	r0, r2
 800a900:	f7ff f859 	bl	80099b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a904:	f001 fa2e 	bl	800bd64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a908:	4b0d      	ldr	r3, [pc, #52]	; (800a940 <prvAddNewTaskToReadyList+0xcc>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d00e      	beq.n	800a92e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a910:	4b0a      	ldr	r3, [pc, #40]	; (800a93c <prvAddNewTaskToReadyList+0xc8>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a91a:	429a      	cmp	r2, r3
 800a91c:	d207      	bcs.n	800a92e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a91e:	4b0c      	ldr	r3, [pc, #48]	; (800a950 <prvAddNewTaskToReadyList+0xdc>)
 800a920:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a924:	601a      	str	r2, [r3, #0]
 800a926:	f3bf 8f4f 	dsb	sy
 800a92a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a92e:	bf00      	nop
 800a930:	3708      	adds	r7, #8
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
 800a936:	bf00      	nop
 800a938:	20000d9c 	.word	0x20000d9c
 800a93c:	200008c8 	.word	0x200008c8
 800a940:	20000da8 	.word	0x20000da8
 800a944:	20000db8 	.word	0x20000db8
 800a948:	20000da4 	.word	0x20000da4
 800a94c:	200008cc 	.word	0x200008cc
 800a950:	e000ed04 	.word	0xe000ed04

0800a954 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a954:	b580      	push	{r7, lr}
 800a956:	b084      	sub	sp, #16
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a95c:	2300      	movs	r3, #0
 800a95e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d017      	beq.n	800a996 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a966:	4b13      	ldr	r3, [pc, #76]	; (800a9b4 <vTaskDelay+0x60>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d00a      	beq.n	800a984 <vTaskDelay+0x30>
	__asm volatile
 800a96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a972:	f383 8811 	msr	BASEPRI, r3
 800a976:	f3bf 8f6f 	isb	sy
 800a97a:	f3bf 8f4f 	dsb	sy
 800a97e:	60bb      	str	r3, [r7, #8]
}
 800a980:	bf00      	nop
 800a982:	e7fe      	b.n	800a982 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a984:	f000 f880 	bl	800aa88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a988:	2100      	movs	r1, #0
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f000 fcea 	bl	800b364 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a990:	f000 f888 	bl	800aaa4 <xTaskResumeAll>
 800a994:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d107      	bne.n	800a9ac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a99c:	4b06      	ldr	r3, [pc, #24]	; (800a9b8 <vTaskDelay+0x64>)
 800a99e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9a2:	601a      	str	r2, [r3, #0]
 800a9a4:	f3bf 8f4f 	dsb	sy
 800a9a8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a9ac:	bf00      	nop
 800a9ae:	3710      	adds	r7, #16
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}
 800a9b4:	20000dc4 	.word	0x20000dc4
 800a9b8:	e000ed04 	.word	0xe000ed04

0800a9bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b08a      	sub	sp, #40	; 0x28
 800a9c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a9ca:	463a      	mov	r2, r7
 800a9cc:	1d39      	adds	r1, r7, #4
 800a9ce:	f107 0308 	add.w	r3, r7, #8
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f7fe ff8e 	bl	80098f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a9d8:	6839      	ldr	r1, [r7, #0]
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	68ba      	ldr	r2, [r7, #8]
 800a9de:	9202      	str	r2, [sp, #8]
 800a9e0:	9301      	str	r3, [sp, #4]
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	9300      	str	r3, [sp, #0]
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	460a      	mov	r2, r1
 800a9ea:	4921      	ldr	r1, [pc, #132]	; (800aa70 <vTaskStartScheduler+0xb4>)
 800a9ec:	4821      	ldr	r0, [pc, #132]	; (800aa74 <vTaskStartScheduler+0xb8>)
 800a9ee:	f7ff fe0f 	bl	800a610 <xTaskCreateStatic>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	4a20      	ldr	r2, [pc, #128]	; (800aa78 <vTaskStartScheduler+0xbc>)
 800a9f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a9f8:	4b1f      	ldr	r3, [pc, #124]	; (800aa78 <vTaskStartScheduler+0xbc>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d002      	beq.n	800aa06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800aa00:	2301      	movs	r3, #1
 800aa02:	617b      	str	r3, [r7, #20]
 800aa04:	e001      	b.n	800aa0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800aa06:	2300      	movs	r3, #0
 800aa08:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	2b01      	cmp	r3, #1
 800aa0e:	d102      	bne.n	800aa16 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800aa10:	f000 fcfc 	bl	800b40c <xTimerCreateTimerTask>
 800aa14:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	2b01      	cmp	r3, #1
 800aa1a:	d116      	bne.n	800aa4a <vTaskStartScheduler+0x8e>
	__asm volatile
 800aa1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa20:	f383 8811 	msr	BASEPRI, r3
 800aa24:	f3bf 8f6f 	isb	sy
 800aa28:	f3bf 8f4f 	dsb	sy
 800aa2c:	613b      	str	r3, [r7, #16]
}
 800aa2e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800aa30:	4b12      	ldr	r3, [pc, #72]	; (800aa7c <vTaskStartScheduler+0xc0>)
 800aa32:	f04f 32ff 	mov.w	r2, #4294967295
 800aa36:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800aa38:	4b11      	ldr	r3, [pc, #68]	; (800aa80 <vTaskStartScheduler+0xc4>)
 800aa3a:	2201      	movs	r2, #1
 800aa3c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800aa3e:	4b11      	ldr	r3, [pc, #68]	; (800aa84 <vTaskStartScheduler+0xc8>)
 800aa40:	2200      	movs	r2, #0
 800aa42:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800aa44:	f001 f8bc 	bl	800bbc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800aa48:	e00e      	b.n	800aa68 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa50:	d10a      	bne.n	800aa68 <vTaskStartScheduler+0xac>
	__asm volatile
 800aa52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa56:	f383 8811 	msr	BASEPRI, r3
 800aa5a:	f3bf 8f6f 	isb	sy
 800aa5e:	f3bf 8f4f 	dsb	sy
 800aa62:	60fb      	str	r3, [r7, #12]
}
 800aa64:	bf00      	nop
 800aa66:	e7fe      	b.n	800aa66 <vTaskStartScheduler+0xaa>
}
 800aa68:	bf00      	nop
 800aa6a:	3718      	adds	r7, #24
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}
 800aa70:	0800d2d0 	.word	0x0800d2d0
 800aa74:	0800b0a1 	.word	0x0800b0a1
 800aa78:	20000dc0 	.word	0x20000dc0
 800aa7c:	20000dbc 	.word	0x20000dbc
 800aa80:	20000da8 	.word	0x20000da8
 800aa84:	20000da0 	.word	0x20000da0

0800aa88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800aa88:	b480      	push	{r7}
 800aa8a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800aa8c:	4b04      	ldr	r3, [pc, #16]	; (800aaa0 <vTaskSuspendAll+0x18>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	3301      	adds	r3, #1
 800aa92:	4a03      	ldr	r2, [pc, #12]	; (800aaa0 <vTaskSuspendAll+0x18>)
 800aa94:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800aa96:	bf00      	nop
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9e:	4770      	bx	lr
 800aaa0:	20000dc4 	.word	0x20000dc4

0800aaa4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b084      	sub	sp, #16
 800aaa8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800aaae:	2300      	movs	r3, #0
 800aab0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800aab2:	4b42      	ldr	r3, [pc, #264]	; (800abbc <xTaskResumeAll+0x118>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d10a      	bne.n	800aad0 <xTaskResumeAll+0x2c>
	__asm volatile
 800aaba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aabe:	f383 8811 	msr	BASEPRI, r3
 800aac2:	f3bf 8f6f 	isb	sy
 800aac6:	f3bf 8f4f 	dsb	sy
 800aaca:	603b      	str	r3, [r7, #0]
}
 800aacc:	bf00      	nop
 800aace:	e7fe      	b.n	800aace <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800aad0:	f001 f918 	bl	800bd04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800aad4:	4b39      	ldr	r3, [pc, #228]	; (800abbc <xTaskResumeAll+0x118>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	3b01      	subs	r3, #1
 800aada:	4a38      	ldr	r2, [pc, #224]	; (800abbc <xTaskResumeAll+0x118>)
 800aadc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aade:	4b37      	ldr	r3, [pc, #220]	; (800abbc <xTaskResumeAll+0x118>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d162      	bne.n	800abac <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aae6:	4b36      	ldr	r3, [pc, #216]	; (800abc0 <xTaskResumeAll+0x11c>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d05e      	beq.n	800abac <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aaee:	e02f      	b.n	800ab50 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aaf0:	4b34      	ldr	r3, [pc, #208]	; (800abc4 <xTaskResumeAll+0x120>)
 800aaf2:	68db      	ldr	r3, [r3, #12]
 800aaf4:	68db      	ldr	r3, [r3, #12]
 800aaf6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	3318      	adds	r3, #24
 800aafc:	4618      	mov	r0, r3
 800aafe:	f7fe ffb7 	bl	8009a70 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	3304      	adds	r3, #4
 800ab06:	4618      	mov	r0, r3
 800ab08:	f7fe ffb2 	bl	8009a70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab10:	4b2d      	ldr	r3, [pc, #180]	; (800abc8 <xTaskResumeAll+0x124>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	429a      	cmp	r2, r3
 800ab16:	d903      	bls.n	800ab20 <xTaskResumeAll+0x7c>
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab1c:	4a2a      	ldr	r2, [pc, #168]	; (800abc8 <xTaskResumeAll+0x124>)
 800ab1e:	6013      	str	r3, [r2, #0]
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab24:	4613      	mov	r3, r2
 800ab26:	009b      	lsls	r3, r3, #2
 800ab28:	4413      	add	r3, r2
 800ab2a:	009b      	lsls	r3, r3, #2
 800ab2c:	4a27      	ldr	r2, [pc, #156]	; (800abcc <xTaskResumeAll+0x128>)
 800ab2e:	441a      	add	r2, r3
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	3304      	adds	r3, #4
 800ab34:	4619      	mov	r1, r3
 800ab36:	4610      	mov	r0, r2
 800ab38:	f7fe ff3d 	bl	80099b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab40:	4b23      	ldr	r3, [pc, #140]	; (800abd0 <xTaskResumeAll+0x12c>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab46:	429a      	cmp	r2, r3
 800ab48:	d302      	bcc.n	800ab50 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ab4a:	4b22      	ldr	r3, [pc, #136]	; (800abd4 <xTaskResumeAll+0x130>)
 800ab4c:	2201      	movs	r2, #1
 800ab4e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ab50:	4b1c      	ldr	r3, [pc, #112]	; (800abc4 <xTaskResumeAll+0x120>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d1cb      	bne.n	800aaf0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d001      	beq.n	800ab62 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ab5e:	f000 fb55 	bl	800b20c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ab62:	4b1d      	ldr	r3, [pc, #116]	; (800abd8 <xTaskResumeAll+0x134>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d010      	beq.n	800ab90 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ab6e:	f000 f847 	bl	800ac00 <xTaskIncrementTick>
 800ab72:	4603      	mov	r3, r0
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d002      	beq.n	800ab7e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ab78:	4b16      	ldr	r3, [pc, #88]	; (800abd4 <xTaskResumeAll+0x130>)
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	3b01      	subs	r3, #1
 800ab82:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d1f1      	bne.n	800ab6e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ab8a:	4b13      	ldr	r3, [pc, #76]	; (800abd8 <xTaskResumeAll+0x134>)
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ab90:	4b10      	ldr	r3, [pc, #64]	; (800abd4 <xTaskResumeAll+0x130>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d009      	beq.n	800abac <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ab98:	2301      	movs	r3, #1
 800ab9a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ab9c:	4b0f      	ldr	r3, [pc, #60]	; (800abdc <xTaskResumeAll+0x138>)
 800ab9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aba2:	601a      	str	r2, [r3, #0]
 800aba4:	f3bf 8f4f 	dsb	sy
 800aba8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800abac:	f001 f8da 	bl	800bd64 <vPortExitCritical>

	return xAlreadyYielded;
 800abb0:	68bb      	ldr	r3, [r7, #8]
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	3710      	adds	r7, #16
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}
 800abba:	bf00      	nop
 800abbc:	20000dc4 	.word	0x20000dc4
 800abc0:	20000d9c 	.word	0x20000d9c
 800abc4:	20000d5c 	.word	0x20000d5c
 800abc8:	20000da4 	.word	0x20000da4
 800abcc:	200008cc 	.word	0x200008cc
 800abd0:	200008c8 	.word	0x200008c8
 800abd4:	20000db0 	.word	0x20000db0
 800abd8:	20000dac 	.word	0x20000dac
 800abdc:	e000ed04 	.word	0xe000ed04

0800abe0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800abe0:	b480      	push	{r7}
 800abe2:	b083      	sub	sp, #12
 800abe4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800abe6:	4b05      	ldr	r3, [pc, #20]	; (800abfc <xTaskGetTickCount+0x1c>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800abec:	687b      	ldr	r3, [r7, #4]
}
 800abee:	4618      	mov	r0, r3
 800abf0:	370c      	adds	r7, #12
 800abf2:	46bd      	mov	sp, r7
 800abf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf8:	4770      	bx	lr
 800abfa:	bf00      	nop
 800abfc:	20000da0 	.word	0x20000da0

0800ac00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b086      	sub	sp, #24
 800ac04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ac06:	2300      	movs	r3, #0
 800ac08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac0a:	4b4f      	ldr	r3, [pc, #316]	; (800ad48 <xTaskIncrementTick+0x148>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	f040 808f 	bne.w	800ad32 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ac14:	4b4d      	ldr	r3, [pc, #308]	; (800ad4c <xTaskIncrementTick+0x14c>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	3301      	adds	r3, #1
 800ac1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ac1c:	4a4b      	ldr	r2, [pc, #300]	; (800ad4c <xTaskIncrementTick+0x14c>)
 800ac1e:	693b      	ldr	r3, [r7, #16]
 800ac20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ac22:	693b      	ldr	r3, [r7, #16]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d120      	bne.n	800ac6a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ac28:	4b49      	ldr	r3, [pc, #292]	; (800ad50 <xTaskIncrementTick+0x150>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d00a      	beq.n	800ac48 <xTaskIncrementTick+0x48>
	__asm volatile
 800ac32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac36:	f383 8811 	msr	BASEPRI, r3
 800ac3a:	f3bf 8f6f 	isb	sy
 800ac3e:	f3bf 8f4f 	dsb	sy
 800ac42:	603b      	str	r3, [r7, #0]
}
 800ac44:	bf00      	nop
 800ac46:	e7fe      	b.n	800ac46 <xTaskIncrementTick+0x46>
 800ac48:	4b41      	ldr	r3, [pc, #260]	; (800ad50 <xTaskIncrementTick+0x150>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	60fb      	str	r3, [r7, #12]
 800ac4e:	4b41      	ldr	r3, [pc, #260]	; (800ad54 <xTaskIncrementTick+0x154>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	4a3f      	ldr	r2, [pc, #252]	; (800ad50 <xTaskIncrementTick+0x150>)
 800ac54:	6013      	str	r3, [r2, #0]
 800ac56:	4a3f      	ldr	r2, [pc, #252]	; (800ad54 <xTaskIncrementTick+0x154>)
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	6013      	str	r3, [r2, #0]
 800ac5c:	4b3e      	ldr	r3, [pc, #248]	; (800ad58 <xTaskIncrementTick+0x158>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	3301      	adds	r3, #1
 800ac62:	4a3d      	ldr	r2, [pc, #244]	; (800ad58 <xTaskIncrementTick+0x158>)
 800ac64:	6013      	str	r3, [r2, #0]
 800ac66:	f000 fad1 	bl	800b20c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ac6a:	4b3c      	ldr	r3, [pc, #240]	; (800ad5c <xTaskIncrementTick+0x15c>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	693a      	ldr	r2, [r7, #16]
 800ac70:	429a      	cmp	r2, r3
 800ac72:	d349      	bcc.n	800ad08 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ac74:	4b36      	ldr	r3, [pc, #216]	; (800ad50 <xTaskIncrementTick+0x150>)
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d104      	bne.n	800ac88 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac7e:	4b37      	ldr	r3, [pc, #220]	; (800ad5c <xTaskIncrementTick+0x15c>)
 800ac80:	f04f 32ff 	mov.w	r2, #4294967295
 800ac84:	601a      	str	r2, [r3, #0]
					break;
 800ac86:	e03f      	b.n	800ad08 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac88:	4b31      	ldr	r3, [pc, #196]	; (800ad50 <xTaskIncrementTick+0x150>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	68db      	ldr	r3, [r3, #12]
 800ac8e:	68db      	ldr	r3, [r3, #12]
 800ac90:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	685b      	ldr	r3, [r3, #4]
 800ac96:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ac98:	693a      	ldr	r2, [r7, #16]
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	429a      	cmp	r2, r3
 800ac9e:	d203      	bcs.n	800aca8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800aca0:	4a2e      	ldr	r2, [pc, #184]	; (800ad5c <xTaskIncrementTick+0x15c>)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800aca6:	e02f      	b.n	800ad08 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	3304      	adds	r3, #4
 800acac:	4618      	mov	r0, r3
 800acae:	f7fe fedf 	bl	8009a70 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d004      	beq.n	800acc4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	3318      	adds	r3, #24
 800acbe:	4618      	mov	r0, r3
 800acc0:	f7fe fed6 	bl	8009a70 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acc8:	4b25      	ldr	r3, [pc, #148]	; (800ad60 <xTaskIncrementTick+0x160>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	429a      	cmp	r2, r3
 800acce:	d903      	bls.n	800acd8 <xTaskIncrementTick+0xd8>
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acd4:	4a22      	ldr	r2, [pc, #136]	; (800ad60 <xTaskIncrementTick+0x160>)
 800acd6:	6013      	str	r3, [r2, #0]
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acdc:	4613      	mov	r3, r2
 800acde:	009b      	lsls	r3, r3, #2
 800ace0:	4413      	add	r3, r2
 800ace2:	009b      	lsls	r3, r3, #2
 800ace4:	4a1f      	ldr	r2, [pc, #124]	; (800ad64 <xTaskIncrementTick+0x164>)
 800ace6:	441a      	add	r2, r3
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	3304      	adds	r3, #4
 800acec:	4619      	mov	r1, r3
 800acee:	4610      	mov	r0, r2
 800acf0:	f7fe fe61 	bl	80099b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acf8:	4b1b      	ldr	r3, [pc, #108]	; (800ad68 <xTaskIncrementTick+0x168>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acfe:	429a      	cmp	r2, r3
 800ad00:	d3b8      	bcc.n	800ac74 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ad02:	2301      	movs	r3, #1
 800ad04:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad06:	e7b5      	b.n	800ac74 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ad08:	4b17      	ldr	r3, [pc, #92]	; (800ad68 <xTaskIncrementTick+0x168>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad0e:	4915      	ldr	r1, [pc, #84]	; (800ad64 <xTaskIncrementTick+0x164>)
 800ad10:	4613      	mov	r3, r2
 800ad12:	009b      	lsls	r3, r3, #2
 800ad14:	4413      	add	r3, r2
 800ad16:	009b      	lsls	r3, r3, #2
 800ad18:	440b      	add	r3, r1
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	2b01      	cmp	r3, #1
 800ad1e:	d901      	bls.n	800ad24 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ad20:	2301      	movs	r3, #1
 800ad22:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ad24:	4b11      	ldr	r3, [pc, #68]	; (800ad6c <xTaskIncrementTick+0x16c>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d007      	beq.n	800ad3c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	617b      	str	r3, [r7, #20]
 800ad30:	e004      	b.n	800ad3c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ad32:	4b0f      	ldr	r3, [pc, #60]	; (800ad70 <xTaskIncrementTick+0x170>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	3301      	adds	r3, #1
 800ad38:	4a0d      	ldr	r2, [pc, #52]	; (800ad70 <xTaskIncrementTick+0x170>)
 800ad3a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ad3c:	697b      	ldr	r3, [r7, #20]
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3718      	adds	r7, #24
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}
 800ad46:	bf00      	nop
 800ad48:	20000dc4 	.word	0x20000dc4
 800ad4c:	20000da0 	.word	0x20000da0
 800ad50:	20000d54 	.word	0x20000d54
 800ad54:	20000d58 	.word	0x20000d58
 800ad58:	20000db4 	.word	0x20000db4
 800ad5c:	20000dbc 	.word	0x20000dbc
 800ad60:	20000da4 	.word	0x20000da4
 800ad64:	200008cc 	.word	0x200008cc
 800ad68:	200008c8 	.word	0x200008c8
 800ad6c:	20000db0 	.word	0x20000db0
 800ad70:	20000dac 	.word	0x20000dac

0800ad74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ad74:	b480      	push	{r7}
 800ad76:	b085      	sub	sp, #20
 800ad78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ad7a:	4b28      	ldr	r3, [pc, #160]	; (800ae1c <vTaskSwitchContext+0xa8>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d003      	beq.n	800ad8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ad82:	4b27      	ldr	r3, [pc, #156]	; (800ae20 <vTaskSwitchContext+0xac>)
 800ad84:	2201      	movs	r2, #1
 800ad86:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ad88:	e041      	b.n	800ae0e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800ad8a:	4b25      	ldr	r3, [pc, #148]	; (800ae20 <vTaskSwitchContext+0xac>)
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad90:	4b24      	ldr	r3, [pc, #144]	; (800ae24 <vTaskSwitchContext+0xb0>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	60fb      	str	r3, [r7, #12]
 800ad96:	e010      	b.n	800adba <vTaskSwitchContext+0x46>
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d10a      	bne.n	800adb4 <vTaskSwitchContext+0x40>
	__asm volatile
 800ad9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada2:	f383 8811 	msr	BASEPRI, r3
 800ada6:	f3bf 8f6f 	isb	sy
 800adaa:	f3bf 8f4f 	dsb	sy
 800adae:	607b      	str	r3, [r7, #4]
}
 800adb0:	bf00      	nop
 800adb2:	e7fe      	b.n	800adb2 <vTaskSwitchContext+0x3e>
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	3b01      	subs	r3, #1
 800adb8:	60fb      	str	r3, [r7, #12]
 800adba:	491b      	ldr	r1, [pc, #108]	; (800ae28 <vTaskSwitchContext+0xb4>)
 800adbc:	68fa      	ldr	r2, [r7, #12]
 800adbe:	4613      	mov	r3, r2
 800adc0:	009b      	lsls	r3, r3, #2
 800adc2:	4413      	add	r3, r2
 800adc4:	009b      	lsls	r3, r3, #2
 800adc6:	440b      	add	r3, r1
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d0e4      	beq.n	800ad98 <vTaskSwitchContext+0x24>
 800adce:	68fa      	ldr	r2, [r7, #12]
 800add0:	4613      	mov	r3, r2
 800add2:	009b      	lsls	r3, r3, #2
 800add4:	4413      	add	r3, r2
 800add6:	009b      	lsls	r3, r3, #2
 800add8:	4a13      	ldr	r2, [pc, #76]	; (800ae28 <vTaskSwitchContext+0xb4>)
 800adda:	4413      	add	r3, r2
 800addc:	60bb      	str	r3, [r7, #8]
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	685b      	ldr	r3, [r3, #4]
 800ade2:	685a      	ldr	r2, [r3, #4]
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	605a      	str	r2, [r3, #4]
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	685a      	ldr	r2, [r3, #4]
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	3308      	adds	r3, #8
 800adf0:	429a      	cmp	r2, r3
 800adf2:	d104      	bne.n	800adfe <vTaskSwitchContext+0x8a>
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	685b      	ldr	r3, [r3, #4]
 800adf8:	685a      	ldr	r2, [r3, #4]
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	605a      	str	r2, [r3, #4]
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	685b      	ldr	r3, [r3, #4]
 800ae02:	68db      	ldr	r3, [r3, #12]
 800ae04:	4a09      	ldr	r2, [pc, #36]	; (800ae2c <vTaskSwitchContext+0xb8>)
 800ae06:	6013      	str	r3, [r2, #0]
 800ae08:	4a06      	ldr	r2, [pc, #24]	; (800ae24 <vTaskSwitchContext+0xb0>)
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	6013      	str	r3, [r2, #0]
}
 800ae0e:	bf00      	nop
 800ae10:	3714      	adds	r7, #20
 800ae12:	46bd      	mov	sp, r7
 800ae14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae18:	4770      	bx	lr
 800ae1a:	bf00      	nop
 800ae1c:	20000dc4 	.word	0x20000dc4
 800ae20:	20000db0 	.word	0x20000db0
 800ae24:	20000da4 	.word	0x20000da4
 800ae28:	200008cc 	.word	0x200008cc
 800ae2c:	200008c8 	.word	0x200008c8

0800ae30 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b084      	sub	sp, #16
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
 800ae38:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d10a      	bne.n	800ae56 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ae40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae44:	f383 8811 	msr	BASEPRI, r3
 800ae48:	f3bf 8f6f 	isb	sy
 800ae4c:	f3bf 8f4f 	dsb	sy
 800ae50:	60fb      	str	r3, [r7, #12]
}
 800ae52:	bf00      	nop
 800ae54:	e7fe      	b.n	800ae54 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ae56:	4b07      	ldr	r3, [pc, #28]	; (800ae74 <vTaskPlaceOnEventList+0x44>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	3318      	adds	r3, #24
 800ae5c:	4619      	mov	r1, r3
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f7fe fdcd 	bl	80099fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ae64:	2101      	movs	r1, #1
 800ae66:	6838      	ldr	r0, [r7, #0]
 800ae68:	f000 fa7c 	bl	800b364 <prvAddCurrentTaskToDelayedList>
}
 800ae6c:	bf00      	nop
 800ae6e:	3710      	adds	r7, #16
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}
 800ae74:	200008c8 	.word	0x200008c8

0800ae78 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b086      	sub	sp, #24
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	60f8      	str	r0, [r7, #12]
 800ae80:	60b9      	str	r1, [r7, #8]
 800ae82:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d10a      	bne.n	800aea0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ae8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae8e:	f383 8811 	msr	BASEPRI, r3
 800ae92:	f3bf 8f6f 	isb	sy
 800ae96:	f3bf 8f4f 	dsb	sy
 800ae9a:	617b      	str	r3, [r7, #20]
}
 800ae9c:	bf00      	nop
 800ae9e:	e7fe      	b.n	800ae9e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aea0:	4b0a      	ldr	r3, [pc, #40]	; (800aecc <vTaskPlaceOnEventListRestricted+0x54>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	3318      	adds	r3, #24
 800aea6:	4619      	mov	r1, r3
 800aea8:	68f8      	ldr	r0, [r7, #12]
 800aeaa:	f7fe fd84 	bl	80099b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d002      	beq.n	800aeba <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800aeb4:	f04f 33ff 	mov.w	r3, #4294967295
 800aeb8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800aeba:	6879      	ldr	r1, [r7, #4]
 800aebc:	68b8      	ldr	r0, [r7, #8]
 800aebe:	f000 fa51 	bl	800b364 <prvAddCurrentTaskToDelayedList>
	}
 800aec2:	bf00      	nop
 800aec4:	3718      	adds	r7, #24
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}
 800aeca:	bf00      	nop
 800aecc:	200008c8 	.word	0x200008c8

0800aed0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b086      	sub	sp, #24
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	68db      	ldr	r3, [r3, #12]
 800aedc:	68db      	ldr	r3, [r3, #12]
 800aede:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800aee0:	693b      	ldr	r3, [r7, #16]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d10a      	bne.n	800aefc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800aee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeea:	f383 8811 	msr	BASEPRI, r3
 800aeee:	f3bf 8f6f 	isb	sy
 800aef2:	f3bf 8f4f 	dsb	sy
 800aef6:	60fb      	str	r3, [r7, #12]
}
 800aef8:	bf00      	nop
 800aefa:	e7fe      	b.n	800aefa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	3318      	adds	r3, #24
 800af00:	4618      	mov	r0, r3
 800af02:	f7fe fdb5 	bl	8009a70 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af06:	4b1e      	ldr	r3, [pc, #120]	; (800af80 <xTaskRemoveFromEventList+0xb0>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d11d      	bne.n	800af4a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	3304      	adds	r3, #4
 800af12:	4618      	mov	r0, r3
 800af14:	f7fe fdac 	bl	8009a70 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800af18:	693b      	ldr	r3, [r7, #16]
 800af1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af1c:	4b19      	ldr	r3, [pc, #100]	; (800af84 <xTaskRemoveFromEventList+0xb4>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	429a      	cmp	r2, r3
 800af22:	d903      	bls.n	800af2c <xTaskRemoveFromEventList+0x5c>
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af28:	4a16      	ldr	r2, [pc, #88]	; (800af84 <xTaskRemoveFromEventList+0xb4>)
 800af2a:	6013      	str	r3, [r2, #0]
 800af2c:	693b      	ldr	r3, [r7, #16]
 800af2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af30:	4613      	mov	r3, r2
 800af32:	009b      	lsls	r3, r3, #2
 800af34:	4413      	add	r3, r2
 800af36:	009b      	lsls	r3, r3, #2
 800af38:	4a13      	ldr	r2, [pc, #76]	; (800af88 <xTaskRemoveFromEventList+0xb8>)
 800af3a:	441a      	add	r2, r3
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	3304      	adds	r3, #4
 800af40:	4619      	mov	r1, r3
 800af42:	4610      	mov	r0, r2
 800af44:	f7fe fd37 	bl	80099b6 <vListInsertEnd>
 800af48:	e005      	b.n	800af56 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800af4a:	693b      	ldr	r3, [r7, #16]
 800af4c:	3318      	adds	r3, #24
 800af4e:	4619      	mov	r1, r3
 800af50:	480e      	ldr	r0, [pc, #56]	; (800af8c <xTaskRemoveFromEventList+0xbc>)
 800af52:	f7fe fd30 	bl	80099b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af5a:	4b0d      	ldr	r3, [pc, #52]	; (800af90 <xTaskRemoveFromEventList+0xc0>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af60:	429a      	cmp	r2, r3
 800af62:	d905      	bls.n	800af70 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800af64:	2301      	movs	r3, #1
 800af66:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800af68:	4b0a      	ldr	r3, [pc, #40]	; (800af94 <xTaskRemoveFromEventList+0xc4>)
 800af6a:	2201      	movs	r2, #1
 800af6c:	601a      	str	r2, [r3, #0]
 800af6e:	e001      	b.n	800af74 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800af70:	2300      	movs	r3, #0
 800af72:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800af74:	697b      	ldr	r3, [r7, #20]
}
 800af76:	4618      	mov	r0, r3
 800af78:	3718      	adds	r7, #24
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}
 800af7e:	bf00      	nop
 800af80:	20000dc4 	.word	0x20000dc4
 800af84:	20000da4 	.word	0x20000da4
 800af88:	200008cc 	.word	0x200008cc
 800af8c:	20000d5c 	.word	0x20000d5c
 800af90:	200008c8 	.word	0x200008c8
 800af94:	20000db0 	.word	0x20000db0

0800af98 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800af98:	b480      	push	{r7}
 800af9a:	b083      	sub	sp, #12
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800afa0:	4b06      	ldr	r3, [pc, #24]	; (800afbc <vTaskInternalSetTimeOutState+0x24>)
 800afa2:	681a      	ldr	r2, [r3, #0]
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800afa8:	4b05      	ldr	r3, [pc, #20]	; (800afc0 <vTaskInternalSetTimeOutState+0x28>)
 800afaa:	681a      	ldr	r2, [r3, #0]
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	605a      	str	r2, [r3, #4]
}
 800afb0:	bf00      	nop
 800afb2:	370c      	adds	r7, #12
 800afb4:	46bd      	mov	sp, r7
 800afb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afba:	4770      	bx	lr
 800afbc:	20000db4 	.word	0x20000db4
 800afc0:	20000da0 	.word	0x20000da0

0800afc4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b088      	sub	sp, #32
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
 800afcc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d10a      	bne.n	800afea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800afd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd8:	f383 8811 	msr	BASEPRI, r3
 800afdc:	f3bf 8f6f 	isb	sy
 800afe0:	f3bf 8f4f 	dsb	sy
 800afe4:	613b      	str	r3, [r7, #16]
}
 800afe6:	bf00      	nop
 800afe8:	e7fe      	b.n	800afe8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d10a      	bne.n	800b006 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800aff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff4:	f383 8811 	msr	BASEPRI, r3
 800aff8:	f3bf 8f6f 	isb	sy
 800affc:	f3bf 8f4f 	dsb	sy
 800b000:	60fb      	str	r3, [r7, #12]
}
 800b002:	bf00      	nop
 800b004:	e7fe      	b.n	800b004 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b006:	f000 fe7d 	bl	800bd04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b00a:	4b1d      	ldr	r3, [pc, #116]	; (800b080 <xTaskCheckForTimeOut+0xbc>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	685b      	ldr	r3, [r3, #4]
 800b014:	69ba      	ldr	r2, [r7, #24]
 800b016:	1ad3      	subs	r3, r2, r3
 800b018:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b022:	d102      	bne.n	800b02a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b024:	2300      	movs	r3, #0
 800b026:	61fb      	str	r3, [r7, #28]
 800b028:	e023      	b.n	800b072 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681a      	ldr	r2, [r3, #0]
 800b02e:	4b15      	ldr	r3, [pc, #84]	; (800b084 <xTaskCheckForTimeOut+0xc0>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	429a      	cmp	r2, r3
 800b034:	d007      	beq.n	800b046 <xTaskCheckForTimeOut+0x82>
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	685b      	ldr	r3, [r3, #4]
 800b03a:	69ba      	ldr	r2, [r7, #24]
 800b03c:	429a      	cmp	r2, r3
 800b03e:	d302      	bcc.n	800b046 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b040:	2301      	movs	r3, #1
 800b042:	61fb      	str	r3, [r7, #28]
 800b044:	e015      	b.n	800b072 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	697a      	ldr	r2, [r7, #20]
 800b04c:	429a      	cmp	r2, r3
 800b04e:	d20b      	bcs.n	800b068 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	681a      	ldr	r2, [r3, #0]
 800b054:	697b      	ldr	r3, [r7, #20]
 800b056:	1ad2      	subs	r2, r2, r3
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f7ff ff9b 	bl	800af98 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b062:	2300      	movs	r3, #0
 800b064:	61fb      	str	r3, [r7, #28]
 800b066:	e004      	b.n	800b072 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	2200      	movs	r2, #0
 800b06c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b06e:	2301      	movs	r3, #1
 800b070:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b072:	f000 fe77 	bl	800bd64 <vPortExitCritical>

	return xReturn;
 800b076:	69fb      	ldr	r3, [r7, #28]
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3720      	adds	r7, #32
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}
 800b080:	20000da0 	.word	0x20000da0
 800b084:	20000db4 	.word	0x20000db4

0800b088 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b088:	b480      	push	{r7}
 800b08a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b08c:	4b03      	ldr	r3, [pc, #12]	; (800b09c <vTaskMissedYield+0x14>)
 800b08e:	2201      	movs	r2, #1
 800b090:	601a      	str	r2, [r3, #0]
}
 800b092:	bf00      	nop
 800b094:	46bd      	mov	sp, r7
 800b096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09a:	4770      	bx	lr
 800b09c:	20000db0 	.word	0x20000db0

0800b0a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b082      	sub	sp, #8
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b0a8:	f000 f852 	bl	800b150 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b0ac:	4b06      	ldr	r3, [pc, #24]	; (800b0c8 <prvIdleTask+0x28>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	2b01      	cmp	r3, #1
 800b0b2:	d9f9      	bls.n	800b0a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b0b4:	4b05      	ldr	r3, [pc, #20]	; (800b0cc <prvIdleTask+0x2c>)
 800b0b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0ba:	601a      	str	r2, [r3, #0]
 800b0bc:	f3bf 8f4f 	dsb	sy
 800b0c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b0c4:	e7f0      	b.n	800b0a8 <prvIdleTask+0x8>
 800b0c6:	bf00      	nop
 800b0c8:	200008cc 	.word	0x200008cc
 800b0cc:	e000ed04 	.word	0xe000ed04

0800b0d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b082      	sub	sp, #8
 800b0d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	607b      	str	r3, [r7, #4]
 800b0da:	e00c      	b.n	800b0f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b0dc:	687a      	ldr	r2, [r7, #4]
 800b0de:	4613      	mov	r3, r2
 800b0e0:	009b      	lsls	r3, r3, #2
 800b0e2:	4413      	add	r3, r2
 800b0e4:	009b      	lsls	r3, r3, #2
 800b0e6:	4a12      	ldr	r2, [pc, #72]	; (800b130 <prvInitialiseTaskLists+0x60>)
 800b0e8:	4413      	add	r3, r2
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f7fe fc36 	bl	800995c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	3301      	adds	r3, #1
 800b0f4:	607b      	str	r3, [r7, #4]
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2b37      	cmp	r3, #55	; 0x37
 800b0fa:	d9ef      	bls.n	800b0dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b0fc:	480d      	ldr	r0, [pc, #52]	; (800b134 <prvInitialiseTaskLists+0x64>)
 800b0fe:	f7fe fc2d 	bl	800995c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b102:	480d      	ldr	r0, [pc, #52]	; (800b138 <prvInitialiseTaskLists+0x68>)
 800b104:	f7fe fc2a 	bl	800995c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b108:	480c      	ldr	r0, [pc, #48]	; (800b13c <prvInitialiseTaskLists+0x6c>)
 800b10a:	f7fe fc27 	bl	800995c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b10e:	480c      	ldr	r0, [pc, #48]	; (800b140 <prvInitialiseTaskLists+0x70>)
 800b110:	f7fe fc24 	bl	800995c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b114:	480b      	ldr	r0, [pc, #44]	; (800b144 <prvInitialiseTaskLists+0x74>)
 800b116:	f7fe fc21 	bl	800995c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b11a:	4b0b      	ldr	r3, [pc, #44]	; (800b148 <prvInitialiseTaskLists+0x78>)
 800b11c:	4a05      	ldr	r2, [pc, #20]	; (800b134 <prvInitialiseTaskLists+0x64>)
 800b11e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b120:	4b0a      	ldr	r3, [pc, #40]	; (800b14c <prvInitialiseTaskLists+0x7c>)
 800b122:	4a05      	ldr	r2, [pc, #20]	; (800b138 <prvInitialiseTaskLists+0x68>)
 800b124:	601a      	str	r2, [r3, #0]
}
 800b126:	bf00      	nop
 800b128:	3708      	adds	r7, #8
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}
 800b12e:	bf00      	nop
 800b130:	200008cc 	.word	0x200008cc
 800b134:	20000d2c 	.word	0x20000d2c
 800b138:	20000d40 	.word	0x20000d40
 800b13c:	20000d5c 	.word	0x20000d5c
 800b140:	20000d70 	.word	0x20000d70
 800b144:	20000d88 	.word	0x20000d88
 800b148:	20000d54 	.word	0x20000d54
 800b14c:	20000d58 	.word	0x20000d58

0800b150 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b082      	sub	sp, #8
 800b154:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b156:	e019      	b.n	800b18c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b158:	f000 fdd4 	bl	800bd04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b15c:	4b10      	ldr	r3, [pc, #64]	; (800b1a0 <prvCheckTasksWaitingTermination+0x50>)
 800b15e:	68db      	ldr	r3, [r3, #12]
 800b160:	68db      	ldr	r3, [r3, #12]
 800b162:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	3304      	adds	r3, #4
 800b168:	4618      	mov	r0, r3
 800b16a:	f7fe fc81 	bl	8009a70 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b16e:	4b0d      	ldr	r3, [pc, #52]	; (800b1a4 <prvCheckTasksWaitingTermination+0x54>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	3b01      	subs	r3, #1
 800b174:	4a0b      	ldr	r2, [pc, #44]	; (800b1a4 <prvCheckTasksWaitingTermination+0x54>)
 800b176:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b178:	4b0b      	ldr	r3, [pc, #44]	; (800b1a8 <prvCheckTasksWaitingTermination+0x58>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	3b01      	subs	r3, #1
 800b17e:	4a0a      	ldr	r2, [pc, #40]	; (800b1a8 <prvCheckTasksWaitingTermination+0x58>)
 800b180:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b182:	f000 fdef 	bl	800bd64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f000 f810 	bl	800b1ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b18c:	4b06      	ldr	r3, [pc, #24]	; (800b1a8 <prvCheckTasksWaitingTermination+0x58>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d1e1      	bne.n	800b158 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b194:	bf00      	nop
 800b196:	bf00      	nop
 800b198:	3708      	adds	r7, #8
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}
 800b19e:	bf00      	nop
 800b1a0:	20000d70 	.word	0x20000d70
 800b1a4:	20000d9c 	.word	0x20000d9c
 800b1a8:	20000d84 	.word	0x20000d84

0800b1ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b084      	sub	sp, #16
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d108      	bne.n	800b1d0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	f000 ff8c 	bl	800c0e0 <vPortFree>
				vPortFree( pxTCB );
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f000 ff89 	bl	800c0e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b1ce:	e018      	b.n	800b202 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b1d6:	2b01      	cmp	r3, #1
 800b1d8:	d103      	bne.n	800b1e2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f000 ff80 	bl	800c0e0 <vPortFree>
	}
 800b1e0:	e00f      	b.n	800b202 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b1e8:	2b02      	cmp	r3, #2
 800b1ea:	d00a      	beq.n	800b202 <prvDeleteTCB+0x56>
	__asm volatile
 800b1ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f0:	f383 8811 	msr	BASEPRI, r3
 800b1f4:	f3bf 8f6f 	isb	sy
 800b1f8:	f3bf 8f4f 	dsb	sy
 800b1fc:	60fb      	str	r3, [r7, #12]
}
 800b1fe:	bf00      	nop
 800b200:	e7fe      	b.n	800b200 <prvDeleteTCB+0x54>
	}
 800b202:	bf00      	nop
 800b204:	3710      	adds	r7, #16
 800b206:	46bd      	mov	sp, r7
 800b208:	bd80      	pop	{r7, pc}
	...

0800b20c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b20c:	b480      	push	{r7}
 800b20e:	b083      	sub	sp, #12
 800b210:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b212:	4b0c      	ldr	r3, [pc, #48]	; (800b244 <prvResetNextTaskUnblockTime+0x38>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d104      	bne.n	800b226 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b21c:	4b0a      	ldr	r3, [pc, #40]	; (800b248 <prvResetNextTaskUnblockTime+0x3c>)
 800b21e:	f04f 32ff 	mov.w	r2, #4294967295
 800b222:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b224:	e008      	b.n	800b238 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b226:	4b07      	ldr	r3, [pc, #28]	; (800b244 <prvResetNextTaskUnblockTime+0x38>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	68db      	ldr	r3, [r3, #12]
 800b22c:	68db      	ldr	r3, [r3, #12]
 800b22e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	685b      	ldr	r3, [r3, #4]
 800b234:	4a04      	ldr	r2, [pc, #16]	; (800b248 <prvResetNextTaskUnblockTime+0x3c>)
 800b236:	6013      	str	r3, [r2, #0]
}
 800b238:	bf00      	nop
 800b23a:	370c      	adds	r7, #12
 800b23c:	46bd      	mov	sp, r7
 800b23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b242:	4770      	bx	lr
 800b244:	20000d54 	.word	0x20000d54
 800b248:	20000dbc 	.word	0x20000dbc

0800b24c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b24c:	b480      	push	{r7}
 800b24e:	b083      	sub	sp, #12
 800b250:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b252:	4b0b      	ldr	r3, [pc, #44]	; (800b280 <xTaskGetSchedulerState+0x34>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d102      	bne.n	800b260 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b25a:	2301      	movs	r3, #1
 800b25c:	607b      	str	r3, [r7, #4]
 800b25e:	e008      	b.n	800b272 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b260:	4b08      	ldr	r3, [pc, #32]	; (800b284 <xTaskGetSchedulerState+0x38>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d102      	bne.n	800b26e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b268:	2302      	movs	r3, #2
 800b26a:	607b      	str	r3, [r7, #4]
 800b26c:	e001      	b.n	800b272 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b26e:	2300      	movs	r3, #0
 800b270:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b272:	687b      	ldr	r3, [r7, #4]
	}
 800b274:	4618      	mov	r0, r3
 800b276:	370c      	adds	r7, #12
 800b278:	46bd      	mov	sp, r7
 800b27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27e:	4770      	bx	lr
 800b280:	20000da8 	.word	0x20000da8
 800b284:	20000dc4 	.word	0x20000dc4

0800b288 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b086      	sub	sp, #24
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b294:	2300      	movs	r3, #0
 800b296:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d056      	beq.n	800b34c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b29e:	4b2e      	ldr	r3, [pc, #184]	; (800b358 <xTaskPriorityDisinherit+0xd0>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	693a      	ldr	r2, [r7, #16]
 800b2a4:	429a      	cmp	r2, r3
 800b2a6:	d00a      	beq.n	800b2be <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ac:	f383 8811 	msr	BASEPRI, r3
 800b2b0:	f3bf 8f6f 	isb	sy
 800b2b4:	f3bf 8f4f 	dsb	sy
 800b2b8:	60fb      	str	r3, [r7, #12]
}
 800b2ba:	bf00      	nop
 800b2bc:	e7fe      	b.n	800b2bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b2be:	693b      	ldr	r3, [r7, #16]
 800b2c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d10a      	bne.n	800b2dc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b2c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ca:	f383 8811 	msr	BASEPRI, r3
 800b2ce:	f3bf 8f6f 	isb	sy
 800b2d2:	f3bf 8f4f 	dsb	sy
 800b2d6:	60bb      	str	r3, [r7, #8]
}
 800b2d8:	bf00      	nop
 800b2da:	e7fe      	b.n	800b2da <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b2dc:	693b      	ldr	r3, [r7, #16]
 800b2de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2e0:	1e5a      	subs	r2, r3, #1
 800b2e2:	693b      	ldr	r3, [r7, #16]
 800b2e4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2ea:	693b      	ldr	r3, [r7, #16]
 800b2ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2ee:	429a      	cmp	r2, r3
 800b2f0:	d02c      	beq.n	800b34c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b2f2:	693b      	ldr	r3, [r7, #16]
 800b2f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d128      	bne.n	800b34c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b2fa:	693b      	ldr	r3, [r7, #16]
 800b2fc:	3304      	adds	r3, #4
 800b2fe:	4618      	mov	r0, r3
 800b300:	f7fe fbb6 	bl	8009a70 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b308:	693b      	ldr	r3, [r7, #16]
 800b30a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b30c:	693b      	ldr	r3, [r7, #16]
 800b30e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b310:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b314:	693b      	ldr	r3, [r7, #16]
 800b316:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b318:	693b      	ldr	r3, [r7, #16]
 800b31a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b31c:	4b0f      	ldr	r3, [pc, #60]	; (800b35c <xTaskPriorityDisinherit+0xd4>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	429a      	cmp	r2, r3
 800b322:	d903      	bls.n	800b32c <xTaskPriorityDisinherit+0xa4>
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b328:	4a0c      	ldr	r2, [pc, #48]	; (800b35c <xTaskPriorityDisinherit+0xd4>)
 800b32a:	6013      	str	r3, [r2, #0]
 800b32c:	693b      	ldr	r3, [r7, #16]
 800b32e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b330:	4613      	mov	r3, r2
 800b332:	009b      	lsls	r3, r3, #2
 800b334:	4413      	add	r3, r2
 800b336:	009b      	lsls	r3, r3, #2
 800b338:	4a09      	ldr	r2, [pc, #36]	; (800b360 <xTaskPriorityDisinherit+0xd8>)
 800b33a:	441a      	add	r2, r3
 800b33c:	693b      	ldr	r3, [r7, #16]
 800b33e:	3304      	adds	r3, #4
 800b340:	4619      	mov	r1, r3
 800b342:	4610      	mov	r0, r2
 800b344:	f7fe fb37 	bl	80099b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b348:	2301      	movs	r3, #1
 800b34a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b34c:	697b      	ldr	r3, [r7, #20]
	}
 800b34e:	4618      	mov	r0, r3
 800b350:	3718      	adds	r7, #24
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}
 800b356:	bf00      	nop
 800b358:	200008c8 	.word	0x200008c8
 800b35c:	20000da4 	.word	0x20000da4
 800b360:	200008cc 	.word	0x200008cc

0800b364 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b084      	sub	sp, #16
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
 800b36c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b36e:	4b21      	ldr	r3, [pc, #132]	; (800b3f4 <prvAddCurrentTaskToDelayedList+0x90>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b374:	4b20      	ldr	r3, [pc, #128]	; (800b3f8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	3304      	adds	r3, #4
 800b37a:	4618      	mov	r0, r3
 800b37c:	f7fe fb78 	bl	8009a70 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b386:	d10a      	bne.n	800b39e <prvAddCurrentTaskToDelayedList+0x3a>
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d007      	beq.n	800b39e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b38e:	4b1a      	ldr	r3, [pc, #104]	; (800b3f8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	3304      	adds	r3, #4
 800b394:	4619      	mov	r1, r3
 800b396:	4819      	ldr	r0, [pc, #100]	; (800b3fc <prvAddCurrentTaskToDelayedList+0x98>)
 800b398:	f7fe fb0d 	bl	80099b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b39c:	e026      	b.n	800b3ec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b39e:	68fa      	ldr	r2, [r7, #12]
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	4413      	add	r3, r2
 800b3a4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b3a6:	4b14      	ldr	r3, [pc, #80]	; (800b3f8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	68ba      	ldr	r2, [r7, #8]
 800b3ac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b3ae:	68ba      	ldr	r2, [r7, #8]
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	429a      	cmp	r2, r3
 800b3b4:	d209      	bcs.n	800b3ca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b3b6:	4b12      	ldr	r3, [pc, #72]	; (800b400 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b3b8:	681a      	ldr	r2, [r3, #0]
 800b3ba:	4b0f      	ldr	r3, [pc, #60]	; (800b3f8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	3304      	adds	r3, #4
 800b3c0:	4619      	mov	r1, r3
 800b3c2:	4610      	mov	r0, r2
 800b3c4:	f7fe fb1b 	bl	80099fe <vListInsert>
}
 800b3c8:	e010      	b.n	800b3ec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b3ca:	4b0e      	ldr	r3, [pc, #56]	; (800b404 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b3cc:	681a      	ldr	r2, [r3, #0]
 800b3ce:	4b0a      	ldr	r3, [pc, #40]	; (800b3f8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	3304      	adds	r3, #4
 800b3d4:	4619      	mov	r1, r3
 800b3d6:	4610      	mov	r0, r2
 800b3d8:	f7fe fb11 	bl	80099fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b3dc:	4b0a      	ldr	r3, [pc, #40]	; (800b408 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	68ba      	ldr	r2, [r7, #8]
 800b3e2:	429a      	cmp	r2, r3
 800b3e4:	d202      	bcs.n	800b3ec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b3e6:	4a08      	ldr	r2, [pc, #32]	; (800b408 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	6013      	str	r3, [r2, #0]
}
 800b3ec:	bf00      	nop
 800b3ee:	3710      	adds	r7, #16
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}
 800b3f4:	20000da0 	.word	0x20000da0
 800b3f8:	200008c8 	.word	0x200008c8
 800b3fc:	20000d88 	.word	0x20000d88
 800b400:	20000d58 	.word	0x20000d58
 800b404:	20000d54 	.word	0x20000d54
 800b408:	20000dbc 	.word	0x20000dbc

0800b40c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b08a      	sub	sp, #40	; 0x28
 800b410:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b412:	2300      	movs	r3, #0
 800b414:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b416:	f000 fb07 	bl	800ba28 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b41a:	4b1c      	ldr	r3, [pc, #112]	; (800b48c <xTimerCreateTimerTask+0x80>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d021      	beq.n	800b466 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b422:	2300      	movs	r3, #0
 800b424:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b426:	2300      	movs	r3, #0
 800b428:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b42a:	1d3a      	adds	r2, r7, #4
 800b42c:	f107 0108 	add.w	r1, r7, #8
 800b430:	f107 030c 	add.w	r3, r7, #12
 800b434:	4618      	mov	r0, r3
 800b436:	f7fe fa77 	bl	8009928 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b43a:	6879      	ldr	r1, [r7, #4]
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	68fa      	ldr	r2, [r7, #12]
 800b440:	9202      	str	r2, [sp, #8]
 800b442:	9301      	str	r3, [sp, #4]
 800b444:	2302      	movs	r3, #2
 800b446:	9300      	str	r3, [sp, #0]
 800b448:	2300      	movs	r3, #0
 800b44a:	460a      	mov	r2, r1
 800b44c:	4910      	ldr	r1, [pc, #64]	; (800b490 <xTimerCreateTimerTask+0x84>)
 800b44e:	4811      	ldr	r0, [pc, #68]	; (800b494 <xTimerCreateTimerTask+0x88>)
 800b450:	f7ff f8de 	bl	800a610 <xTaskCreateStatic>
 800b454:	4603      	mov	r3, r0
 800b456:	4a10      	ldr	r2, [pc, #64]	; (800b498 <xTimerCreateTimerTask+0x8c>)
 800b458:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b45a:	4b0f      	ldr	r3, [pc, #60]	; (800b498 <xTimerCreateTimerTask+0x8c>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d001      	beq.n	800b466 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b462:	2301      	movs	r3, #1
 800b464:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b466:	697b      	ldr	r3, [r7, #20]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d10a      	bne.n	800b482 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b46c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b470:	f383 8811 	msr	BASEPRI, r3
 800b474:	f3bf 8f6f 	isb	sy
 800b478:	f3bf 8f4f 	dsb	sy
 800b47c:	613b      	str	r3, [r7, #16]
}
 800b47e:	bf00      	nop
 800b480:	e7fe      	b.n	800b480 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b482:	697b      	ldr	r3, [r7, #20]
}
 800b484:	4618      	mov	r0, r3
 800b486:	3718      	adds	r7, #24
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}
 800b48c:	20000df8 	.word	0x20000df8
 800b490:	0800d2d8 	.word	0x0800d2d8
 800b494:	0800b5d1 	.word	0x0800b5d1
 800b498:	20000dfc 	.word	0x20000dfc

0800b49c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b08a      	sub	sp, #40	; 0x28
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	60f8      	str	r0, [r7, #12]
 800b4a4:	60b9      	str	r1, [r7, #8]
 800b4a6:	607a      	str	r2, [r7, #4]
 800b4a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d10a      	bne.n	800b4ca <xTimerGenericCommand+0x2e>
	__asm volatile
 800b4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4b8:	f383 8811 	msr	BASEPRI, r3
 800b4bc:	f3bf 8f6f 	isb	sy
 800b4c0:	f3bf 8f4f 	dsb	sy
 800b4c4:	623b      	str	r3, [r7, #32]
}
 800b4c6:	bf00      	nop
 800b4c8:	e7fe      	b.n	800b4c8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b4ca:	4b1a      	ldr	r3, [pc, #104]	; (800b534 <xTimerGenericCommand+0x98>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d02a      	beq.n	800b528 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b4d2:	68bb      	ldr	r3, [r7, #8]
 800b4d4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	2b05      	cmp	r3, #5
 800b4e2:	dc18      	bgt.n	800b516 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b4e4:	f7ff feb2 	bl	800b24c <xTaskGetSchedulerState>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	2b02      	cmp	r3, #2
 800b4ec:	d109      	bne.n	800b502 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b4ee:	4b11      	ldr	r3, [pc, #68]	; (800b534 <xTimerGenericCommand+0x98>)
 800b4f0:	6818      	ldr	r0, [r3, #0]
 800b4f2:	f107 0110 	add.w	r1, r7, #16
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4fa:	f7fe fc21 	bl	8009d40 <xQueueGenericSend>
 800b4fe:	6278      	str	r0, [r7, #36]	; 0x24
 800b500:	e012      	b.n	800b528 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b502:	4b0c      	ldr	r3, [pc, #48]	; (800b534 <xTimerGenericCommand+0x98>)
 800b504:	6818      	ldr	r0, [r3, #0]
 800b506:	f107 0110 	add.w	r1, r7, #16
 800b50a:	2300      	movs	r3, #0
 800b50c:	2200      	movs	r2, #0
 800b50e:	f7fe fc17 	bl	8009d40 <xQueueGenericSend>
 800b512:	6278      	str	r0, [r7, #36]	; 0x24
 800b514:	e008      	b.n	800b528 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b516:	4b07      	ldr	r3, [pc, #28]	; (800b534 <xTimerGenericCommand+0x98>)
 800b518:	6818      	ldr	r0, [r3, #0]
 800b51a:	f107 0110 	add.w	r1, r7, #16
 800b51e:	2300      	movs	r3, #0
 800b520:	683a      	ldr	r2, [r7, #0]
 800b522:	f7fe fd0b 	bl	8009f3c <xQueueGenericSendFromISR>
 800b526:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b52a:	4618      	mov	r0, r3
 800b52c:	3728      	adds	r7, #40	; 0x28
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}
 800b532:	bf00      	nop
 800b534:	20000df8 	.word	0x20000df8

0800b538 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b088      	sub	sp, #32
 800b53c:	af02      	add	r7, sp, #8
 800b53e:	6078      	str	r0, [r7, #4]
 800b540:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b542:	4b22      	ldr	r3, [pc, #136]	; (800b5cc <prvProcessExpiredTimer+0x94>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	68db      	ldr	r3, [r3, #12]
 800b548:	68db      	ldr	r3, [r3, #12]
 800b54a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	3304      	adds	r3, #4
 800b550:	4618      	mov	r0, r3
 800b552:	f7fe fa8d 	bl	8009a70 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b556:	697b      	ldr	r3, [r7, #20]
 800b558:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b55c:	f003 0304 	and.w	r3, r3, #4
 800b560:	2b00      	cmp	r3, #0
 800b562:	d022      	beq.n	800b5aa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b564:	697b      	ldr	r3, [r7, #20]
 800b566:	699a      	ldr	r2, [r3, #24]
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	18d1      	adds	r1, r2, r3
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	683a      	ldr	r2, [r7, #0]
 800b570:	6978      	ldr	r0, [r7, #20]
 800b572:	f000 f8d1 	bl	800b718 <prvInsertTimerInActiveList>
 800b576:	4603      	mov	r3, r0
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d01f      	beq.n	800b5bc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b57c:	2300      	movs	r3, #0
 800b57e:	9300      	str	r3, [sp, #0]
 800b580:	2300      	movs	r3, #0
 800b582:	687a      	ldr	r2, [r7, #4]
 800b584:	2100      	movs	r1, #0
 800b586:	6978      	ldr	r0, [r7, #20]
 800b588:	f7ff ff88 	bl	800b49c <xTimerGenericCommand>
 800b58c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d113      	bne.n	800b5bc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b594:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b598:	f383 8811 	msr	BASEPRI, r3
 800b59c:	f3bf 8f6f 	isb	sy
 800b5a0:	f3bf 8f4f 	dsb	sy
 800b5a4:	60fb      	str	r3, [r7, #12]
}
 800b5a6:	bf00      	nop
 800b5a8:	e7fe      	b.n	800b5a8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b5aa:	697b      	ldr	r3, [r7, #20]
 800b5ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b5b0:	f023 0301 	bic.w	r3, r3, #1
 800b5b4:	b2da      	uxtb	r2, r3
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b5bc:	697b      	ldr	r3, [r7, #20]
 800b5be:	6a1b      	ldr	r3, [r3, #32]
 800b5c0:	6978      	ldr	r0, [r7, #20]
 800b5c2:	4798      	blx	r3
}
 800b5c4:	bf00      	nop
 800b5c6:	3718      	adds	r7, #24
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd80      	pop	{r7, pc}
 800b5cc:	20000df0 	.word	0x20000df0

0800b5d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b084      	sub	sp, #16
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b5d8:	f107 0308 	add.w	r3, r7, #8
 800b5dc:	4618      	mov	r0, r3
 800b5de:	f000 f857 	bl	800b690 <prvGetNextExpireTime>
 800b5e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	4619      	mov	r1, r3
 800b5e8:	68f8      	ldr	r0, [r7, #12]
 800b5ea:	f000 f803 	bl	800b5f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b5ee:	f000 f8d5 	bl	800b79c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b5f2:	e7f1      	b.n	800b5d8 <prvTimerTask+0x8>

0800b5f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b084      	sub	sp, #16
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
 800b5fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b5fe:	f7ff fa43 	bl	800aa88 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b602:	f107 0308 	add.w	r3, r7, #8
 800b606:	4618      	mov	r0, r3
 800b608:	f000 f866 	bl	800b6d8 <prvSampleTimeNow>
 800b60c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d130      	bne.n	800b676 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d10a      	bne.n	800b630 <prvProcessTimerOrBlockTask+0x3c>
 800b61a:	687a      	ldr	r2, [r7, #4]
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	429a      	cmp	r2, r3
 800b620:	d806      	bhi.n	800b630 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b622:	f7ff fa3f 	bl	800aaa4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b626:	68f9      	ldr	r1, [r7, #12]
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f7ff ff85 	bl	800b538 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b62e:	e024      	b.n	800b67a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d008      	beq.n	800b648 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b636:	4b13      	ldr	r3, [pc, #76]	; (800b684 <prvProcessTimerOrBlockTask+0x90>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d101      	bne.n	800b644 <prvProcessTimerOrBlockTask+0x50>
 800b640:	2301      	movs	r3, #1
 800b642:	e000      	b.n	800b646 <prvProcessTimerOrBlockTask+0x52>
 800b644:	2300      	movs	r3, #0
 800b646:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b648:	4b0f      	ldr	r3, [pc, #60]	; (800b688 <prvProcessTimerOrBlockTask+0x94>)
 800b64a:	6818      	ldr	r0, [r3, #0]
 800b64c:	687a      	ldr	r2, [r7, #4]
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	1ad3      	subs	r3, r2, r3
 800b652:	683a      	ldr	r2, [r7, #0]
 800b654:	4619      	mov	r1, r3
 800b656:	f7fe ffa7 	bl	800a5a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b65a:	f7ff fa23 	bl	800aaa4 <xTaskResumeAll>
 800b65e:	4603      	mov	r3, r0
 800b660:	2b00      	cmp	r3, #0
 800b662:	d10a      	bne.n	800b67a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b664:	4b09      	ldr	r3, [pc, #36]	; (800b68c <prvProcessTimerOrBlockTask+0x98>)
 800b666:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b66a:	601a      	str	r2, [r3, #0]
 800b66c:	f3bf 8f4f 	dsb	sy
 800b670:	f3bf 8f6f 	isb	sy
}
 800b674:	e001      	b.n	800b67a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b676:	f7ff fa15 	bl	800aaa4 <xTaskResumeAll>
}
 800b67a:	bf00      	nop
 800b67c:	3710      	adds	r7, #16
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}
 800b682:	bf00      	nop
 800b684:	20000df4 	.word	0x20000df4
 800b688:	20000df8 	.word	0x20000df8
 800b68c:	e000ed04 	.word	0xe000ed04

0800b690 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b690:	b480      	push	{r7}
 800b692:	b085      	sub	sp, #20
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b698:	4b0e      	ldr	r3, [pc, #56]	; (800b6d4 <prvGetNextExpireTime+0x44>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d101      	bne.n	800b6a6 <prvGetNextExpireTime+0x16>
 800b6a2:	2201      	movs	r2, #1
 800b6a4:	e000      	b.n	800b6a8 <prvGetNextExpireTime+0x18>
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d105      	bne.n	800b6c0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b6b4:	4b07      	ldr	r3, [pc, #28]	; (800b6d4 <prvGetNextExpireTime+0x44>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	68db      	ldr	r3, [r3, #12]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	60fb      	str	r3, [r7, #12]
 800b6be:	e001      	b.n	800b6c4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	3714      	adds	r7, #20
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d0:	4770      	bx	lr
 800b6d2:	bf00      	nop
 800b6d4:	20000df0 	.word	0x20000df0

0800b6d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b084      	sub	sp, #16
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b6e0:	f7ff fa7e 	bl	800abe0 <xTaskGetTickCount>
 800b6e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b6e6:	4b0b      	ldr	r3, [pc, #44]	; (800b714 <prvSampleTimeNow+0x3c>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	68fa      	ldr	r2, [r7, #12]
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	d205      	bcs.n	800b6fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b6f0:	f000 f936 	bl	800b960 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2201      	movs	r2, #1
 800b6f8:	601a      	str	r2, [r3, #0]
 800b6fa:	e002      	b.n	800b702 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2200      	movs	r2, #0
 800b700:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b702:	4a04      	ldr	r2, [pc, #16]	; (800b714 <prvSampleTimeNow+0x3c>)
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b708:	68fb      	ldr	r3, [r7, #12]
}
 800b70a:	4618      	mov	r0, r3
 800b70c:	3710      	adds	r7, #16
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd80      	pop	{r7, pc}
 800b712:	bf00      	nop
 800b714:	20000e00 	.word	0x20000e00

0800b718 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b086      	sub	sp, #24
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	60f8      	str	r0, [r7, #12]
 800b720:	60b9      	str	r1, [r7, #8]
 800b722:	607a      	str	r2, [r7, #4]
 800b724:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b726:	2300      	movs	r3, #0
 800b728:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	68ba      	ldr	r2, [r7, #8]
 800b72e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	68fa      	ldr	r2, [r7, #12]
 800b734:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b736:	68ba      	ldr	r2, [r7, #8]
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	429a      	cmp	r2, r3
 800b73c:	d812      	bhi.n	800b764 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b73e:	687a      	ldr	r2, [r7, #4]
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	1ad2      	subs	r2, r2, r3
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	699b      	ldr	r3, [r3, #24]
 800b748:	429a      	cmp	r2, r3
 800b74a:	d302      	bcc.n	800b752 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b74c:	2301      	movs	r3, #1
 800b74e:	617b      	str	r3, [r7, #20]
 800b750:	e01b      	b.n	800b78a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b752:	4b10      	ldr	r3, [pc, #64]	; (800b794 <prvInsertTimerInActiveList+0x7c>)
 800b754:	681a      	ldr	r2, [r3, #0]
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	3304      	adds	r3, #4
 800b75a:	4619      	mov	r1, r3
 800b75c:	4610      	mov	r0, r2
 800b75e:	f7fe f94e 	bl	80099fe <vListInsert>
 800b762:	e012      	b.n	800b78a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b764:	687a      	ldr	r2, [r7, #4]
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	429a      	cmp	r2, r3
 800b76a:	d206      	bcs.n	800b77a <prvInsertTimerInActiveList+0x62>
 800b76c:	68ba      	ldr	r2, [r7, #8]
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	429a      	cmp	r2, r3
 800b772:	d302      	bcc.n	800b77a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b774:	2301      	movs	r3, #1
 800b776:	617b      	str	r3, [r7, #20]
 800b778:	e007      	b.n	800b78a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b77a:	4b07      	ldr	r3, [pc, #28]	; (800b798 <prvInsertTimerInActiveList+0x80>)
 800b77c:	681a      	ldr	r2, [r3, #0]
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	3304      	adds	r3, #4
 800b782:	4619      	mov	r1, r3
 800b784:	4610      	mov	r0, r2
 800b786:	f7fe f93a 	bl	80099fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b78a:	697b      	ldr	r3, [r7, #20]
}
 800b78c:	4618      	mov	r0, r3
 800b78e:	3718      	adds	r7, #24
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}
 800b794:	20000df4 	.word	0x20000df4
 800b798:	20000df0 	.word	0x20000df0

0800b79c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b08e      	sub	sp, #56	; 0x38
 800b7a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b7a2:	e0ca      	b.n	800b93a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	da18      	bge.n	800b7dc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b7aa:	1d3b      	adds	r3, r7, #4
 800b7ac:	3304      	adds	r3, #4
 800b7ae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d10a      	bne.n	800b7cc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b7b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ba:	f383 8811 	msr	BASEPRI, r3
 800b7be:	f3bf 8f6f 	isb	sy
 800b7c2:	f3bf 8f4f 	dsb	sy
 800b7c6:	61fb      	str	r3, [r7, #28]
}
 800b7c8:	bf00      	nop
 800b7ca:	e7fe      	b.n	800b7ca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7d2:	6850      	ldr	r0, [r2, #4]
 800b7d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7d6:	6892      	ldr	r2, [r2, #8]
 800b7d8:	4611      	mov	r1, r2
 800b7da:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	f2c0 80aa 	blt.w	800b938 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b7e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ea:	695b      	ldr	r3, [r3, #20]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d004      	beq.n	800b7fa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7f2:	3304      	adds	r3, #4
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f7fe f93b 	bl	8009a70 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b7fa:	463b      	mov	r3, r7
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f7ff ff6b 	bl	800b6d8 <prvSampleTimeNow>
 800b802:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2b09      	cmp	r3, #9
 800b808:	f200 8097 	bhi.w	800b93a <prvProcessReceivedCommands+0x19e>
 800b80c:	a201      	add	r2, pc, #4	; (adr r2, 800b814 <prvProcessReceivedCommands+0x78>)
 800b80e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b812:	bf00      	nop
 800b814:	0800b83d 	.word	0x0800b83d
 800b818:	0800b83d 	.word	0x0800b83d
 800b81c:	0800b83d 	.word	0x0800b83d
 800b820:	0800b8b1 	.word	0x0800b8b1
 800b824:	0800b8c5 	.word	0x0800b8c5
 800b828:	0800b90f 	.word	0x0800b90f
 800b82c:	0800b83d 	.word	0x0800b83d
 800b830:	0800b83d 	.word	0x0800b83d
 800b834:	0800b8b1 	.word	0x0800b8b1
 800b838:	0800b8c5 	.word	0x0800b8c5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b83e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b842:	f043 0301 	orr.w	r3, r3, #1
 800b846:	b2da      	uxtb	r2, r3
 800b848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b84a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b84e:	68ba      	ldr	r2, [r7, #8]
 800b850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b852:	699b      	ldr	r3, [r3, #24]
 800b854:	18d1      	adds	r1, r2, r3
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b85a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b85c:	f7ff ff5c 	bl	800b718 <prvInsertTimerInActiveList>
 800b860:	4603      	mov	r3, r0
 800b862:	2b00      	cmp	r3, #0
 800b864:	d069      	beq.n	800b93a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b868:	6a1b      	ldr	r3, [r3, #32]
 800b86a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b86c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b870:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b874:	f003 0304 	and.w	r3, r3, #4
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d05e      	beq.n	800b93a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b87c:	68ba      	ldr	r2, [r7, #8]
 800b87e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b880:	699b      	ldr	r3, [r3, #24]
 800b882:	441a      	add	r2, r3
 800b884:	2300      	movs	r3, #0
 800b886:	9300      	str	r3, [sp, #0]
 800b888:	2300      	movs	r3, #0
 800b88a:	2100      	movs	r1, #0
 800b88c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b88e:	f7ff fe05 	bl	800b49c <xTimerGenericCommand>
 800b892:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b894:	6a3b      	ldr	r3, [r7, #32]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d14f      	bne.n	800b93a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b89a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b89e:	f383 8811 	msr	BASEPRI, r3
 800b8a2:	f3bf 8f6f 	isb	sy
 800b8a6:	f3bf 8f4f 	dsb	sy
 800b8aa:	61bb      	str	r3, [r7, #24]
}
 800b8ac:	bf00      	nop
 800b8ae:	e7fe      	b.n	800b8ae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b8b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b8b6:	f023 0301 	bic.w	r3, r3, #1
 800b8ba:	b2da      	uxtb	r2, r3
 800b8bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b8c2:	e03a      	b.n	800b93a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b8c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b8ca:	f043 0301 	orr.w	r3, r3, #1
 800b8ce:	b2da      	uxtb	r2, r3
 800b8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b8d6:	68ba      	ldr	r2, [r7, #8]
 800b8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8da:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8de:	699b      	ldr	r3, [r3, #24]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d10a      	bne.n	800b8fa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b8e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8e8:	f383 8811 	msr	BASEPRI, r3
 800b8ec:	f3bf 8f6f 	isb	sy
 800b8f0:	f3bf 8f4f 	dsb	sy
 800b8f4:	617b      	str	r3, [r7, #20]
}
 800b8f6:	bf00      	nop
 800b8f8:	e7fe      	b.n	800b8f8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8fc:	699a      	ldr	r2, [r3, #24]
 800b8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b900:	18d1      	adds	r1, r2, r3
 800b902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b906:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b908:	f7ff ff06 	bl	800b718 <prvInsertTimerInActiveList>
					break;
 800b90c:	e015      	b.n	800b93a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b90e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b910:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b914:	f003 0302 	and.w	r3, r3, #2
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d103      	bne.n	800b924 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b91c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b91e:	f000 fbdf 	bl	800c0e0 <vPortFree>
 800b922:	e00a      	b.n	800b93a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b926:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b92a:	f023 0301 	bic.w	r3, r3, #1
 800b92e:	b2da      	uxtb	r2, r3
 800b930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b932:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b936:	e000      	b.n	800b93a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b938:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b93a:	4b08      	ldr	r3, [pc, #32]	; (800b95c <prvProcessReceivedCommands+0x1c0>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	1d39      	adds	r1, r7, #4
 800b940:	2200      	movs	r2, #0
 800b942:	4618      	mov	r0, r3
 800b944:	f7fe fb96 	bl	800a074 <xQueueReceive>
 800b948:	4603      	mov	r3, r0
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	f47f af2a 	bne.w	800b7a4 <prvProcessReceivedCommands+0x8>
	}
}
 800b950:	bf00      	nop
 800b952:	bf00      	nop
 800b954:	3730      	adds	r7, #48	; 0x30
 800b956:	46bd      	mov	sp, r7
 800b958:	bd80      	pop	{r7, pc}
 800b95a:	bf00      	nop
 800b95c:	20000df8 	.word	0x20000df8

0800b960 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b088      	sub	sp, #32
 800b964:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b966:	e048      	b.n	800b9fa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b968:	4b2d      	ldr	r3, [pc, #180]	; (800ba20 <prvSwitchTimerLists+0xc0>)
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	68db      	ldr	r3, [r3, #12]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b972:	4b2b      	ldr	r3, [pc, #172]	; (800ba20 <prvSwitchTimerLists+0xc0>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	68db      	ldr	r3, [r3, #12]
 800b978:	68db      	ldr	r3, [r3, #12]
 800b97a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	3304      	adds	r3, #4
 800b980:	4618      	mov	r0, r3
 800b982:	f7fe f875 	bl	8009a70 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	6a1b      	ldr	r3, [r3, #32]
 800b98a:	68f8      	ldr	r0, [r7, #12]
 800b98c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b994:	f003 0304 	and.w	r3, r3, #4
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d02e      	beq.n	800b9fa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	699b      	ldr	r3, [r3, #24]
 800b9a0:	693a      	ldr	r2, [r7, #16]
 800b9a2:	4413      	add	r3, r2
 800b9a4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b9a6:	68ba      	ldr	r2, [r7, #8]
 800b9a8:	693b      	ldr	r3, [r7, #16]
 800b9aa:	429a      	cmp	r2, r3
 800b9ac:	d90e      	bls.n	800b9cc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	68ba      	ldr	r2, [r7, #8]
 800b9b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	68fa      	ldr	r2, [r7, #12]
 800b9b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b9ba:	4b19      	ldr	r3, [pc, #100]	; (800ba20 <prvSwitchTimerLists+0xc0>)
 800b9bc:	681a      	ldr	r2, [r3, #0]
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	3304      	adds	r3, #4
 800b9c2:	4619      	mov	r1, r3
 800b9c4:	4610      	mov	r0, r2
 800b9c6:	f7fe f81a 	bl	80099fe <vListInsert>
 800b9ca:	e016      	b.n	800b9fa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	9300      	str	r3, [sp, #0]
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	693a      	ldr	r2, [r7, #16]
 800b9d4:	2100      	movs	r1, #0
 800b9d6:	68f8      	ldr	r0, [r7, #12]
 800b9d8:	f7ff fd60 	bl	800b49c <xTimerGenericCommand>
 800b9dc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d10a      	bne.n	800b9fa <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9e8:	f383 8811 	msr	BASEPRI, r3
 800b9ec:	f3bf 8f6f 	isb	sy
 800b9f0:	f3bf 8f4f 	dsb	sy
 800b9f4:	603b      	str	r3, [r7, #0]
}
 800b9f6:	bf00      	nop
 800b9f8:	e7fe      	b.n	800b9f8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b9fa:	4b09      	ldr	r3, [pc, #36]	; (800ba20 <prvSwitchTimerLists+0xc0>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d1b1      	bne.n	800b968 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ba04:	4b06      	ldr	r3, [pc, #24]	; (800ba20 <prvSwitchTimerLists+0xc0>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ba0a:	4b06      	ldr	r3, [pc, #24]	; (800ba24 <prvSwitchTimerLists+0xc4>)
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	4a04      	ldr	r2, [pc, #16]	; (800ba20 <prvSwitchTimerLists+0xc0>)
 800ba10:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ba12:	4a04      	ldr	r2, [pc, #16]	; (800ba24 <prvSwitchTimerLists+0xc4>)
 800ba14:	697b      	ldr	r3, [r7, #20]
 800ba16:	6013      	str	r3, [r2, #0]
}
 800ba18:	bf00      	nop
 800ba1a:	3718      	adds	r7, #24
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bd80      	pop	{r7, pc}
 800ba20:	20000df0 	.word	0x20000df0
 800ba24:	20000df4 	.word	0x20000df4

0800ba28 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b082      	sub	sp, #8
 800ba2c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ba2e:	f000 f969 	bl	800bd04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ba32:	4b15      	ldr	r3, [pc, #84]	; (800ba88 <prvCheckForValidListAndQueue+0x60>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d120      	bne.n	800ba7c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ba3a:	4814      	ldr	r0, [pc, #80]	; (800ba8c <prvCheckForValidListAndQueue+0x64>)
 800ba3c:	f7fd ff8e 	bl	800995c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ba40:	4813      	ldr	r0, [pc, #76]	; (800ba90 <prvCheckForValidListAndQueue+0x68>)
 800ba42:	f7fd ff8b 	bl	800995c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ba46:	4b13      	ldr	r3, [pc, #76]	; (800ba94 <prvCheckForValidListAndQueue+0x6c>)
 800ba48:	4a10      	ldr	r2, [pc, #64]	; (800ba8c <prvCheckForValidListAndQueue+0x64>)
 800ba4a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ba4c:	4b12      	ldr	r3, [pc, #72]	; (800ba98 <prvCheckForValidListAndQueue+0x70>)
 800ba4e:	4a10      	ldr	r2, [pc, #64]	; (800ba90 <prvCheckForValidListAndQueue+0x68>)
 800ba50:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ba52:	2300      	movs	r3, #0
 800ba54:	9300      	str	r3, [sp, #0]
 800ba56:	4b11      	ldr	r3, [pc, #68]	; (800ba9c <prvCheckForValidListAndQueue+0x74>)
 800ba58:	4a11      	ldr	r2, [pc, #68]	; (800baa0 <prvCheckForValidListAndQueue+0x78>)
 800ba5a:	2110      	movs	r1, #16
 800ba5c:	200a      	movs	r0, #10
 800ba5e:	f7fe f899 	bl	8009b94 <xQueueGenericCreateStatic>
 800ba62:	4603      	mov	r3, r0
 800ba64:	4a08      	ldr	r2, [pc, #32]	; (800ba88 <prvCheckForValidListAndQueue+0x60>)
 800ba66:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ba68:	4b07      	ldr	r3, [pc, #28]	; (800ba88 <prvCheckForValidListAndQueue+0x60>)
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d005      	beq.n	800ba7c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ba70:	4b05      	ldr	r3, [pc, #20]	; (800ba88 <prvCheckForValidListAndQueue+0x60>)
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	490b      	ldr	r1, [pc, #44]	; (800baa4 <prvCheckForValidListAndQueue+0x7c>)
 800ba76:	4618      	mov	r0, r3
 800ba78:	f7fe fd6c 	bl	800a554 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ba7c:	f000 f972 	bl	800bd64 <vPortExitCritical>
}
 800ba80:	bf00      	nop
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd80      	pop	{r7, pc}
 800ba86:	bf00      	nop
 800ba88:	20000df8 	.word	0x20000df8
 800ba8c:	20000dc8 	.word	0x20000dc8
 800ba90:	20000ddc 	.word	0x20000ddc
 800ba94:	20000df0 	.word	0x20000df0
 800ba98:	20000df4 	.word	0x20000df4
 800ba9c:	20000ea4 	.word	0x20000ea4
 800baa0:	20000e04 	.word	0x20000e04
 800baa4:	0800d2e0 	.word	0x0800d2e0

0800baa8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800baa8:	b480      	push	{r7}
 800baaa:	b085      	sub	sp, #20
 800baac:	af00      	add	r7, sp, #0
 800baae:	60f8      	str	r0, [r7, #12]
 800bab0:	60b9      	str	r1, [r7, #8]
 800bab2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	3b04      	subs	r3, #4
 800bab8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bac0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	3b04      	subs	r3, #4
 800bac6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	f023 0201 	bic.w	r2, r3, #1
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	3b04      	subs	r3, #4
 800bad6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bad8:	4a0c      	ldr	r2, [pc, #48]	; (800bb0c <pxPortInitialiseStack+0x64>)
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	3b14      	subs	r3, #20
 800bae2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bae4:	687a      	ldr	r2, [r7, #4]
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	3b04      	subs	r3, #4
 800baee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	f06f 0202 	mvn.w	r2, #2
 800baf6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	3b20      	subs	r3, #32
 800bafc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bafe:	68fb      	ldr	r3, [r7, #12]
}
 800bb00:	4618      	mov	r0, r3
 800bb02:	3714      	adds	r7, #20
 800bb04:	46bd      	mov	sp, r7
 800bb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0a:	4770      	bx	lr
 800bb0c:	0800bb11 	.word	0x0800bb11

0800bb10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bb10:	b480      	push	{r7}
 800bb12:	b085      	sub	sp, #20
 800bb14:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bb16:	2300      	movs	r3, #0
 800bb18:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bb1a:	4b12      	ldr	r3, [pc, #72]	; (800bb64 <prvTaskExitError+0x54>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb22:	d00a      	beq.n	800bb3a <prvTaskExitError+0x2a>
	__asm volatile
 800bb24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb28:	f383 8811 	msr	BASEPRI, r3
 800bb2c:	f3bf 8f6f 	isb	sy
 800bb30:	f3bf 8f4f 	dsb	sy
 800bb34:	60fb      	str	r3, [r7, #12]
}
 800bb36:	bf00      	nop
 800bb38:	e7fe      	b.n	800bb38 <prvTaskExitError+0x28>
	__asm volatile
 800bb3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb3e:	f383 8811 	msr	BASEPRI, r3
 800bb42:	f3bf 8f6f 	isb	sy
 800bb46:	f3bf 8f4f 	dsb	sy
 800bb4a:	60bb      	str	r3, [r7, #8]
}
 800bb4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bb4e:	bf00      	nop
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d0fc      	beq.n	800bb50 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bb56:	bf00      	nop
 800bb58:	bf00      	nop
 800bb5a:	3714      	adds	r7, #20
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb62:	4770      	bx	lr
 800bb64:	2000002c 	.word	0x2000002c
	...

0800bb70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bb70:	4b07      	ldr	r3, [pc, #28]	; (800bb90 <pxCurrentTCBConst2>)
 800bb72:	6819      	ldr	r1, [r3, #0]
 800bb74:	6808      	ldr	r0, [r1, #0]
 800bb76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb7a:	f380 8809 	msr	PSP, r0
 800bb7e:	f3bf 8f6f 	isb	sy
 800bb82:	f04f 0000 	mov.w	r0, #0
 800bb86:	f380 8811 	msr	BASEPRI, r0
 800bb8a:	4770      	bx	lr
 800bb8c:	f3af 8000 	nop.w

0800bb90 <pxCurrentTCBConst2>:
 800bb90:	200008c8 	.word	0x200008c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bb94:	bf00      	nop
 800bb96:	bf00      	nop

0800bb98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bb98:	4808      	ldr	r0, [pc, #32]	; (800bbbc <prvPortStartFirstTask+0x24>)
 800bb9a:	6800      	ldr	r0, [r0, #0]
 800bb9c:	6800      	ldr	r0, [r0, #0]
 800bb9e:	f380 8808 	msr	MSP, r0
 800bba2:	f04f 0000 	mov.w	r0, #0
 800bba6:	f380 8814 	msr	CONTROL, r0
 800bbaa:	b662      	cpsie	i
 800bbac:	b661      	cpsie	f
 800bbae:	f3bf 8f4f 	dsb	sy
 800bbb2:	f3bf 8f6f 	isb	sy
 800bbb6:	df00      	svc	0
 800bbb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bbba:	bf00      	nop
 800bbbc:	e000ed08 	.word	0xe000ed08

0800bbc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b086      	sub	sp, #24
 800bbc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bbc6:	4b46      	ldr	r3, [pc, #280]	; (800bce0 <xPortStartScheduler+0x120>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	4a46      	ldr	r2, [pc, #280]	; (800bce4 <xPortStartScheduler+0x124>)
 800bbcc:	4293      	cmp	r3, r2
 800bbce:	d10a      	bne.n	800bbe6 <xPortStartScheduler+0x26>
	__asm volatile
 800bbd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbd4:	f383 8811 	msr	BASEPRI, r3
 800bbd8:	f3bf 8f6f 	isb	sy
 800bbdc:	f3bf 8f4f 	dsb	sy
 800bbe0:	613b      	str	r3, [r7, #16]
}
 800bbe2:	bf00      	nop
 800bbe4:	e7fe      	b.n	800bbe4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bbe6:	4b3e      	ldr	r3, [pc, #248]	; (800bce0 <xPortStartScheduler+0x120>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	4a3f      	ldr	r2, [pc, #252]	; (800bce8 <xPortStartScheduler+0x128>)
 800bbec:	4293      	cmp	r3, r2
 800bbee:	d10a      	bne.n	800bc06 <xPortStartScheduler+0x46>
	__asm volatile
 800bbf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf4:	f383 8811 	msr	BASEPRI, r3
 800bbf8:	f3bf 8f6f 	isb	sy
 800bbfc:	f3bf 8f4f 	dsb	sy
 800bc00:	60fb      	str	r3, [r7, #12]
}
 800bc02:	bf00      	nop
 800bc04:	e7fe      	b.n	800bc04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bc06:	4b39      	ldr	r3, [pc, #228]	; (800bcec <xPortStartScheduler+0x12c>)
 800bc08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	781b      	ldrb	r3, [r3, #0]
 800bc0e:	b2db      	uxtb	r3, r3
 800bc10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bc12:	697b      	ldr	r3, [r7, #20]
 800bc14:	22ff      	movs	r2, #255	; 0xff
 800bc16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bc18:	697b      	ldr	r3, [r7, #20]
 800bc1a:	781b      	ldrb	r3, [r3, #0]
 800bc1c:	b2db      	uxtb	r3, r3
 800bc1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bc20:	78fb      	ldrb	r3, [r7, #3]
 800bc22:	b2db      	uxtb	r3, r3
 800bc24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bc28:	b2da      	uxtb	r2, r3
 800bc2a:	4b31      	ldr	r3, [pc, #196]	; (800bcf0 <xPortStartScheduler+0x130>)
 800bc2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bc2e:	4b31      	ldr	r3, [pc, #196]	; (800bcf4 <xPortStartScheduler+0x134>)
 800bc30:	2207      	movs	r2, #7
 800bc32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bc34:	e009      	b.n	800bc4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bc36:	4b2f      	ldr	r3, [pc, #188]	; (800bcf4 <xPortStartScheduler+0x134>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	3b01      	subs	r3, #1
 800bc3c:	4a2d      	ldr	r2, [pc, #180]	; (800bcf4 <xPortStartScheduler+0x134>)
 800bc3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bc40:	78fb      	ldrb	r3, [r7, #3]
 800bc42:	b2db      	uxtb	r3, r3
 800bc44:	005b      	lsls	r3, r3, #1
 800bc46:	b2db      	uxtb	r3, r3
 800bc48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bc4a:	78fb      	ldrb	r3, [r7, #3]
 800bc4c:	b2db      	uxtb	r3, r3
 800bc4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc52:	2b80      	cmp	r3, #128	; 0x80
 800bc54:	d0ef      	beq.n	800bc36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bc56:	4b27      	ldr	r3, [pc, #156]	; (800bcf4 <xPortStartScheduler+0x134>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	f1c3 0307 	rsb	r3, r3, #7
 800bc5e:	2b04      	cmp	r3, #4
 800bc60:	d00a      	beq.n	800bc78 <xPortStartScheduler+0xb8>
	__asm volatile
 800bc62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc66:	f383 8811 	msr	BASEPRI, r3
 800bc6a:	f3bf 8f6f 	isb	sy
 800bc6e:	f3bf 8f4f 	dsb	sy
 800bc72:	60bb      	str	r3, [r7, #8]
}
 800bc74:	bf00      	nop
 800bc76:	e7fe      	b.n	800bc76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bc78:	4b1e      	ldr	r3, [pc, #120]	; (800bcf4 <xPortStartScheduler+0x134>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	021b      	lsls	r3, r3, #8
 800bc7e:	4a1d      	ldr	r2, [pc, #116]	; (800bcf4 <xPortStartScheduler+0x134>)
 800bc80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bc82:	4b1c      	ldr	r3, [pc, #112]	; (800bcf4 <xPortStartScheduler+0x134>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bc8a:	4a1a      	ldr	r2, [pc, #104]	; (800bcf4 <xPortStartScheduler+0x134>)
 800bc8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	b2da      	uxtb	r2, r3
 800bc92:	697b      	ldr	r3, [r7, #20]
 800bc94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bc96:	4b18      	ldr	r3, [pc, #96]	; (800bcf8 <xPortStartScheduler+0x138>)
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	4a17      	ldr	r2, [pc, #92]	; (800bcf8 <xPortStartScheduler+0x138>)
 800bc9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bca0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bca2:	4b15      	ldr	r3, [pc, #84]	; (800bcf8 <xPortStartScheduler+0x138>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	4a14      	ldr	r2, [pc, #80]	; (800bcf8 <xPortStartScheduler+0x138>)
 800bca8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bcac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bcae:	f000 f8dd 	bl	800be6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bcb2:	4b12      	ldr	r3, [pc, #72]	; (800bcfc <xPortStartScheduler+0x13c>)
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bcb8:	f000 f8fc 	bl	800beb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bcbc:	4b10      	ldr	r3, [pc, #64]	; (800bd00 <xPortStartScheduler+0x140>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	4a0f      	ldr	r2, [pc, #60]	; (800bd00 <xPortStartScheduler+0x140>)
 800bcc2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bcc6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bcc8:	f7ff ff66 	bl	800bb98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bccc:	f7ff f852 	bl	800ad74 <vTaskSwitchContext>
	prvTaskExitError();
 800bcd0:	f7ff ff1e 	bl	800bb10 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bcd4:	2300      	movs	r3, #0
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	3718      	adds	r7, #24
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}
 800bcde:	bf00      	nop
 800bce0:	e000ed00 	.word	0xe000ed00
 800bce4:	410fc271 	.word	0x410fc271
 800bce8:	410fc270 	.word	0x410fc270
 800bcec:	e000e400 	.word	0xe000e400
 800bcf0:	20000ef4 	.word	0x20000ef4
 800bcf4:	20000ef8 	.word	0x20000ef8
 800bcf8:	e000ed20 	.word	0xe000ed20
 800bcfc:	2000002c 	.word	0x2000002c
 800bd00:	e000ef34 	.word	0xe000ef34

0800bd04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bd04:	b480      	push	{r7}
 800bd06:	b083      	sub	sp, #12
 800bd08:	af00      	add	r7, sp, #0
	__asm volatile
 800bd0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd0e:	f383 8811 	msr	BASEPRI, r3
 800bd12:	f3bf 8f6f 	isb	sy
 800bd16:	f3bf 8f4f 	dsb	sy
 800bd1a:	607b      	str	r3, [r7, #4]
}
 800bd1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bd1e:	4b0f      	ldr	r3, [pc, #60]	; (800bd5c <vPortEnterCritical+0x58>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	3301      	adds	r3, #1
 800bd24:	4a0d      	ldr	r2, [pc, #52]	; (800bd5c <vPortEnterCritical+0x58>)
 800bd26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bd28:	4b0c      	ldr	r3, [pc, #48]	; (800bd5c <vPortEnterCritical+0x58>)
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	2b01      	cmp	r3, #1
 800bd2e:	d10f      	bne.n	800bd50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bd30:	4b0b      	ldr	r3, [pc, #44]	; (800bd60 <vPortEnterCritical+0x5c>)
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	b2db      	uxtb	r3, r3
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d00a      	beq.n	800bd50 <vPortEnterCritical+0x4c>
	__asm volatile
 800bd3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd3e:	f383 8811 	msr	BASEPRI, r3
 800bd42:	f3bf 8f6f 	isb	sy
 800bd46:	f3bf 8f4f 	dsb	sy
 800bd4a:	603b      	str	r3, [r7, #0]
}
 800bd4c:	bf00      	nop
 800bd4e:	e7fe      	b.n	800bd4e <vPortEnterCritical+0x4a>
	}
}
 800bd50:	bf00      	nop
 800bd52:	370c      	adds	r7, #12
 800bd54:	46bd      	mov	sp, r7
 800bd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5a:	4770      	bx	lr
 800bd5c:	2000002c 	.word	0x2000002c
 800bd60:	e000ed04 	.word	0xe000ed04

0800bd64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bd64:	b480      	push	{r7}
 800bd66:	b083      	sub	sp, #12
 800bd68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bd6a:	4b12      	ldr	r3, [pc, #72]	; (800bdb4 <vPortExitCritical+0x50>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d10a      	bne.n	800bd88 <vPortExitCritical+0x24>
	__asm volatile
 800bd72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd76:	f383 8811 	msr	BASEPRI, r3
 800bd7a:	f3bf 8f6f 	isb	sy
 800bd7e:	f3bf 8f4f 	dsb	sy
 800bd82:	607b      	str	r3, [r7, #4]
}
 800bd84:	bf00      	nop
 800bd86:	e7fe      	b.n	800bd86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bd88:	4b0a      	ldr	r3, [pc, #40]	; (800bdb4 <vPortExitCritical+0x50>)
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	3b01      	subs	r3, #1
 800bd8e:	4a09      	ldr	r2, [pc, #36]	; (800bdb4 <vPortExitCritical+0x50>)
 800bd90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bd92:	4b08      	ldr	r3, [pc, #32]	; (800bdb4 <vPortExitCritical+0x50>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d105      	bne.n	800bda6 <vPortExitCritical+0x42>
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	f383 8811 	msr	BASEPRI, r3
}
 800bda4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bda6:	bf00      	nop
 800bda8:	370c      	adds	r7, #12
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb0:	4770      	bx	lr
 800bdb2:	bf00      	nop
 800bdb4:	2000002c 	.word	0x2000002c
	...

0800bdc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bdc0:	f3ef 8009 	mrs	r0, PSP
 800bdc4:	f3bf 8f6f 	isb	sy
 800bdc8:	4b15      	ldr	r3, [pc, #84]	; (800be20 <pxCurrentTCBConst>)
 800bdca:	681a      	ldr	r2, [r3, #0]
 800bdcc:	f01e 0f10 	tst.w	lr, #16
 800bdd0:	bf08      	it	eq
 800bdd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bdd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdda:	6010      	str	r0, [r2, #0]
 800bddc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bde0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bde4:	f380 8811 	msr	BASEPRI, r0
 800bde8:	f3bf 8f4f 	dsb	sy
 800bdec:	f3bf 8f6f 	isb	sy
 800bdf0:	f7fe ffc0 	bl	800ad74 <vTaskSwitchContext>
 800bdf4:	f04f 0000 	mov.w	r0, #0
 800bdf8:	f380 8811 	msr	BASEPRI, r0
 800bdfc:	bc09      	pop	{r0, r3}
 800bdfe:	6819      	ldr	r1, [r3, #0]
 800be00:	6808      	ldr	r0, [r1, #0]
 800be02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be06:	f01e 0f10 	tst.w	lr, #16
 800be0a:	bf08      	it	eq
 800be0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800be10:	f380 8809 	msr	PSP, r0
 800be14:	f3bf 8f6f 	isb	sy
 800be18:	4770      	bx	lr
 800be1a:	bf00      	nop
 800be1c:	f3af 8000 	nop.w

0800be20 <pxCurrentTCBConst>:
 800be20:	200008c8 	.word	0x200008c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800be24:	bf00      	nop
 800be26:	bf00      	nop

0800be28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b082      	sub	sp, #8
 800be2c:	af00      	add	r7, sp, #0
	__asm volatile
 800be2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be32:	f383 8811 	msr	BASEPRI, r3
 800be36:	f3bf 8f6f 	isb	sy
 800be3a:	f3bf 8f4f 	dsb	sy
 800be3e:	607b      	str	r3, [r7, #4]
}
 800be40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800be42:	f7fe fedd 	bl	800ac00 <xTaskIncrementTick>
 800be46:	4603      	mov	r3, r0
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d003      	beq.n	800be54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800be4c:	4b06      	ldr	r3, [pc, #24]	; (800be68 <xPortSysTickHandler+0x40>)
 800be4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be52:	601a      	str	r2, [r3, #0]
 800be54:	2300      	movs	r3, #0
 800be56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	f383 8811 	msr	BASEPRI, r3
}
 800be5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800be60:	bf00      	nop
 800be62:	3708      	adds	r7, #8
 800be64:	46bd      	mov	sp, r7
 800be66:	bd80      	pop	{r7, pc}
 800be68:	e000ed04 	.word	0xe000ed04

0800be6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800be6c:	b480      	push	{r7}
 800be6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800be70:	4b0b      	ldr	r3, [pc, #44]	; (800bea0 <vPortSetupTimerInterrupt+0x34>)
 800be72:	2200      	movs	r2, #0
 800be74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800be76:	4b0b      	ldr	r3, [pc, #44]	; (800bea4 <vPortSetupTimerInterrupt+0x38>)
 800be78:	2200      	movs	r2, #0
 800be7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800be7c:	4b0a      	ldr	r3, [pc, #40]	; (800bea8 <vPortSetupTimerInterrupt+0x3c>)
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	4a0a      	ldr	r2, [pc, #40]	; (800beac <vPortSetupTimerInterrupt+0x40>)
 800be82:	fba2 2303 	umull	r2, r3, r2, r3
 800be86:	099b      	lsrs	r3, r3, #6
 800be88:	4a09      	ldr	r2, [pc, #36]	; (800beb0 <vPortSetupTimerInterrupt+0x44>)
 800be8a:	3b01      	subs	r3, #1
 800be8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800be8e:	4b04      	ldr	r3, [pc, #16]	; (800bea0 <vPortSetupTimerInterrupt+0x34>)
 800be90:	2207      	movs	r2, #7
 800be92:	601a      	str	r2, [r3, #0]
}
 800be94:	bf00      	nop
 800be96:	46bd      	mov	sp, r7
 800be98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9c:	4770      	bx	lr
 800be9e:	bf00      	nop
 800bea0:	e000e010 	.word	0xe000e010
 800bea4:	e000e018 	.word	0xe000e018
 800bea8:	20000000 	.word	0x20000000
 800beac:	10624dd3 	.word	0x10624dd3
 800beb0:	e000e014 	.word	0xe000e014

0800beb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800beb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bec4 <vPortEnableVFP+0x10>
 800beb8:	6801      	ldr	r1, [r0, #0]
 800beba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bebe:	6001      	str	r1, [r0, #0]
 800bec0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bec2:	bf00      	nop
 800bec4:	e000ed88 	.word	0xe000ed88

0800bec8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bec8:	b480      	push	{r7}
 800beca:	b085      	sub	sp, #20
 800becc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bece:	f3ef 8305 	mrs	r3, IPSR
 800bed2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	2b0f      	cmp	r3, #15
 800bed8:	d914      	bls.n	800bf04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800beda:	4a17      	ldr	r2, [pc, #92]	; (800bf38 <vPortValidateInterruptPriority+0x70>)
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	4413      	add	r3, r2
 800bee0:	781b      	ldrb	r3, [r3, #0]
 800bee2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bee4:	4b15      	ldr	r3, [pc, #84]	; (800bf3c <vPortValidateInterruptPriority+0x74>)
 800bee6:	781b      	ldrb	r3, [r3, #0]
 800bee8:	7afa      	ldrb	r2, [r7, #11]
 800beea:	429a      	cmp	r2, r3
 800beec:	d20a      	bcs.n	800bf04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800beee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef2:	f383 8811 	msr	BASEPRI, r3
 800bef6:	f3bf 8f6f 	isb	sy
 800befa:	f3bf 8f4f 	dsb	sy
 800befe:	607b      	str	r3, [r7, #4]
}
 800bf00:	bf00      	nop
 800bf02:	e7fe      	b.n	800bf02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bf04:	4b0e      	ldr	r3, [pc, #56]	; (800bf40 <vPortValidateInterruptPriority+0x78>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bf0c:	4b0d      	ldr	r3, [pc, #52]	; (800bf44 <vPortValidateInterruptPriority+0x7c>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	429a      	cmp	r2, r3
 800bf12:	d90a      	bls.n	800bf2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bf14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf18:	f383 8811 	msr	BASEPRI, r3
 800bf1c:	f3bf 8f6f 	isb	sy
 800bf20:	f3bf 8f4f 	dsb	sy
 800bf24:	603b      	str	r3, [r7, #0]
}
 800bf26:	bf00      	nop
 800bf28:	e7fe      	b.n	800bf28 <vPortValidateInterruptPriority+0x60>
	}
 800bf2a:	bf00      	nop
 800bf2c:	3714      	adds	r7, #20
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf34:	4770      	bx	lr
 800bf36:	bf00      	nop
 800bf38:	e000e3f0 	.word	0xe000e3f0
 800bf3c:	20000ef4 	.word	0x20000ef4
 800bf40:	e000ed0c 	.word	0xe000ed0c
 800bf44:	20000ef8 	.word	0x20000ef8

0800bf48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b08a      	sub	sp, #40	; 0x28
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bf50:	2300      	movs	r3, #0
 800bf52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bf54:	f7fe fd98 	bl	800aa88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bf58:	4b5b      	ldr	r3, [pc, #364]	; (800c0c8 <pvPortMalloc+0x180>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d101      	bne.n	800bf64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bf60:	f000 f920 	bl	800c1a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bf64:	4b59      	ldr	r3, [pc, #356]	; (800c0cc <pvPortMalloc+0x184>)
 800bf66:	681a      	ldr	r2, [r3, #0]
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	4013      	ands	r3, r2
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	f040 8093 	bne.w	800c098 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d01d      	beq.n	800bfb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bf78:	2208      	movs	r2, #8
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	4413      	add	r3, r2
 800bf7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f003 0307 	and.w	r3, r3, #7
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d014      	beq.n	800bfb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	f023 0307 	bic.w	r3, r3, #7
 800bf90:	3308      	adds	r3, #8
 800bf92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f003 0307 	and.w	r3, r3, #7
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d00a      	beq.n	800bfb4 <pvPortMalloc+0x6c>
	__asm volatile
 800bf9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfa2:	f383 8811 	msr	BASEPRI, r3
 800bfa6:	f3bf 8f6f 	isb	sy
 800bfaa:	f3bf 8f4f 	dsb	sy
 800bfae:	617b      	str	r3, [r7, #20]
}
 800bfb0:	bf00      	nop
 800bfb2:	e7fe      	b.n	800bfb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d06e      	beq.n	800c098 <pvPortMalloc+0x150>
 800bfba:	4b45      	ldr	r3, [pc, #276]	; (800c0d0 <pvPortMalloc+0x188>)
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	687a      	ldr	r2, [r7, #4]
 800bfc0:	429a      	cmp	r2, r3
 800bfc2:	d869      	bhi.n	800c098 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bfc4:	4b43      	ldr	r3, [pc, #268]	; (800c0d4 <pvPortMalloc+0x18c>)
 800bfc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bfc8:	4b42      	ldr	r3, [pc, #264]	; (800c0d4 <pvPortMalloc+0x18c>)
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bfce:	e004      	b.n	800bfda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bfd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bfd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bfda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfdc:	685b      	ldr	r3, [r3, #4]
 800bfde:	687a      	ldr	r2, [r7, #4]
 800bfe0:	429a      	cmp	r2, r3
 800bfe2:	d903      	bls.n	800bfec <pvPortMalloc+0xa4>
 800bfe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d1f1      	bne.n	800bfd0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bfec:	4b36      	ldr	r3, [pc, #216]	; (800c0c8 <pvPortMalloc+0x180>)
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bff2:	429a      	cmp	r2, r3
 800bff4:	d050      	beq.n	800c098 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bff6:	6a3b      	ldr	r3, [r7, #32]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	2208      	movs	r2, #8
 800bffc:	4413      	add	r3, r2
 800bffe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c002:	681a      	ldr	r2, [r3, #0]
 800c004:	6a3b      	ldr	r3, [r7, #32]
 800c006:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c00a:	685a      	ldr	r2, [r3, #4]
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	1ad2      	subs	r2, r2, r3
 800c010:	2308      	movs	r3, #8
 800c012:	005b      	lsls	r3, r3, #1
 800c014:	429a      	cmp	r2, r3
 800c016:	d91f      	bls.n	800c058 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	4413      	add	r3, r2
 800c01e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c020:	69bb      	ldr	r3, [r7, #24]
 800c022:	f003 0307 	and.w	r3, r3, #7
 800c026:	2b00      	cmp	r3, #0
 800c028:	d00a      	beq.n	800c040 <pvPortMalloc+0xf8>
	__asm volatile
 800c02a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c02e:	f383 8811 	msr	BASEPRI, r3
 800c032:	f3bf 8f6f 	isb	sy
 800c036:	f3bf 8f4f 	dsb	sy
 800c03a:	613b      	str	r3, [r7, #16]
}
 800c03c:	bf00      	nop
 800c03e:	e7fe      	b.n	800c03e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c042:	685a      	ldr	r2, [r3, #4]
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	1ad2      	subs	r2, r2, r3
 800c048:	69bb      	ldr	r3, [r7, #24]
 800c04a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c04c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c04e:	687a      	ldr	r2, [r7, #4]
 800c050:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c052:	69b8      	ldr	r0, [r7, #24]
 800c054:	f000 f908 	bl	800c268 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c058:	4b1d      	ldr	r3, [pc, #116]	; (800c0d0 <pvPortMalloc+0x188>)
 800c05a:	681a      	ldr	r2, [r3, #0]
 800c05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c05e:	685b      	ldr	r3, [r3, #4]
 800c060:	1ad3      	subs	r3, r2, r3
 800c062:	4a1b      	ldr	r2, [pc, #108]	; (800c0d0 <pvPortMalloc+0x188>)
 800c064:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c066:	4b1a      	ldr	r3, [pc, #104]	; (800c0d0 <pvPortMalloc+0x188>)
 800c068:	681a      	ldr	r2, [r3, #0]
 800c06a:	4b1b      	ldr	r3, [pc, #108]	; (800c0d8 <pvPortMalloc+0x190>)
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	429a      	cmp	r2, r3
 800c070:	d203      	bcs.n	800c07a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c072:	4b17      	ldr	r3, [pc, #92]	; (800c0d0 <pvPortMalloc+0x188>)
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	4a18      	ldr	r2, [pc, #96]	; (800c0d8 <pvPortMalloc+0x190>)
 800c078:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c07c:	685a      	ldr	r2, [r3, #4]
 800c07e:	4b13      	ldr	r3, [pc, #76]	; (800c0cc <pvPortMalloc+0x184>)
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	431a      	orrs	r2, r3
 800c084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c086:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c08a:	2200      	movs	r2, #0
 800c08c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c08e:	4b13      	ldr	r3, [pc, #76]	; (800c0dc <pvPortMalloc+0x194>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	3301      	adds	r3, #1
 800c094:	4a11      	ldr	r2, [pc, #68]	; (800c0dc <pvPortMalloc+0x194>)
 800c096:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c098:	f7fe fd04 	bl	800aaa4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c09c:	69fb      	ldr	r3, [r7, #28]
 800c09e:	f003 0307 	and.w	r3, r3, #7
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d00a      	beq.n	800c0bc <pvPortMalloc+0x174>
	__asm volatile
 800c0a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0aa:	f383 8811 	msr	BASEPRI, r3
 800c0ae:	f3bf 8f6f 	isb	sy
 800c0b2:	f3bf 8f4f 	dsb	sy
 800c0b6:	60fb      	str	r3, [r7, #12]
}
 800c0b8:	bf00      	nop
 800c0ba:	e7fe      	b.n	800c0ba <pvPortMalloc+0x172>
	return pvReturn;
 800c0bc:	69fb      	ldr	r3, [r7, #28]
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	3728      	adds	r7, #40	; 0x28
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bd80      	pop	{r7, pc}
 800c0c6:	bf00      	nop
 800c0c8:	20004b04 	.word	0x20004b04
 800c0cc:	20004b18 	.word	0x20004b18
 800c0d0:	20004b08 	.word	0x20004b08
 800c0d4:	20004afc 	.word	0x20004afc
 800c0d8:	20004b0c 	.word	0x20004b0c
 800c0dc:	20004b10 	.word	0x20004b10

0800c0e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b086      	sub	sp, #24
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d04d      	beq.n	800c18e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c0f2:	2308      	movs	r3, #8
 800c0f4:	425b      	negs	r3, r3
 800c0f6:	697a      	ldr	r2, [r7, #20]
 800c0f8:	4413      	add	r3, r2
 800c0fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c0fc:	697b      	ldr	r3, [r7, #20]
 800c0fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c100:	693b      	ldr	r3, [r7, #16]
 800c102:	685a      	ldr	r2, [r3, #4]
 800c104:	4b24      	ldr	r3, [pc, #144]	; (800c198 <vPortFree+0xb8>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	4013      	ands	r3, r2
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d10a      	bne.n	800c124 <vPortFree+0x44>
	__asm volatile
 800c10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c112:	f383 8811 	msr	BASEPRI, r3
 800c116:	f3bf 8f6f 	isb	sy
 800c11a:	f3bf 8f4f 	dsb	sy
 800c11e:	60fb      	str	r3, [r7, #12]
}
 800c120:	bf00      	nop
 800c122:	e7fe      	b.n	800c122 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c124:	693b      	ldr	r3, [r7, #16]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d00a      	beq.n	800c142 <vPortFree+0x62>
	__asm volatile
 800c12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c130:	f383 8811 	msr	BASEPRI, r3
 800c134:	f3bf 8f6f 	isb	sy
 800c138:	f3bf 8f4f 	dsb	sy
 800c13c:	60bb      	str	r3, [r7, #8]
}
 800c13e:	bf00      	nop
 800c140:	e7fe      	b.n	800c140 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c142:	693b      	ldr	r3, [r7, #16]
 800c144:	685a      	ldr	r2, [r3, #4]
 800c146:	4b14      	ldr	r3, [pc, #80]	; (800c198 <vPortFree+0xb8>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	4013      	ands	r3, r2
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d01e      	beq.n	800c18e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d11a      	bne.n	800c18e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c158:	693b      	ldr	r3, [r7, #16]
 800c15a:	685a      	ldr	r2, [r3, #4]
 800c15c:	4b0e      	ldr	r3, [pc, #56]	; (800c198 <vPortFree+0xb8>)
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	43db      	mvns	r3, r3
 800c162:	401a      	ands	r2, r3
 800c164:	693b      	ldr	r3, [r7, #16]
 800c166:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c168:	f7fe fc8e 	bl	800aa88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c16c:	693b      	ldr	r3, [r7, #16]
 800c16e:	685a      	ldr	r2, [r3, #4]
 800c170:	4b0a      	ldr	r3, [pc, #40]	; (800c19c <vPortFree+0xbc>)
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	4413      	add	r3, r2
 800c176:	4a09      	ldr	r2, [pc, #36]	; (800c19c <vPortFree+0xbc>)
 800c178:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c17a:	6938      	ldr	r0, [r7, #16]
 800c17c:	f000 f874 	bl	800c268 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c180:	4b07      	ldr	r3, [pc, #28]	; (800c1a0 <vPortFree+0xc0>)
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	3301      	adds	r3, #1
 800c186:	4a06      	ldr	r2, [pc, #24]	; (800c1a0 <vPortFree+0xc0>)
 800c188:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c18a:	f7fe fc8b 	bl	800aaa4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c18e:	bf00      	nop
 800c190:	3718      	adds	r7, #24
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}
 800c196:	bf00      	nop
 800c198:	20004b18 	.word	0x20004b18
 800c19c:	20004b08 	.word	0x20004b08
 800c1a0:	20004b14 	.word	0x20004b14

0800c1a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c1a4:	b480      	push	{r7}
 800c1a6:	b085      	sub	sp, #20
 800c1a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c1aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c1ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c1b0:	4b27      	ldr	r3, [pc, #156]	; (800c250 <prvHeapInit+0xac>)
 800c1b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	f003 0307 	and.w	r3, r3, #7
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d00c      	beq.n	800c1d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	3307      	adds	r3, #7
 800c1c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	f023 0307 	bic.w	r3, r3, #7
 800c1ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c1cc:	68ba      	ldr	r2, [r7, #8]
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	1ad3      	subs	r3, r2, r3
 800c1d2:	4a1f      	ldr	r2, [pc, #124]	; (800c250 <prvHeapInit+0xac>)
 800c1d4:	4413      	add	r3, r2
 800c1d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c1dc:	4a1d      	ldr	r2, [pc, #116]	; (800c254 <prvHeapInit+0xb0>)
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c1e2:	4b1c      	ldr	r3, [pc, #112]	; (800c254 <prvHeapInit+0xb0>)
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	68ba      	ldr	r2, [r7, #8]
 800c1ec:	4413      	add	r3, r2
 800c1ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c1f0:	2208      	movs	r2, #8
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	1a9b      	subs	r3, r3, r2
 800c1f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	f023 0307 	bic.w	r3, r3, #7
 800c1fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	4a15      	ldr	r2, [pc, #84]	; (800c258 <prvHeapInit+0xb4>)
 800c204:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c206:	4b14      	ldr	r3, [pc, #80]	; (800c258 <prvHeapInit+0xb4>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	2200      	movs	r2, #0
 800c20c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c20e:	4b12      	ldr	r3, [pc, #72]	; (800c258 <prvHeapInit+0xb4>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	2200      	movs	r2, #0
 800c214:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	68fa      	ldr	r2, [r7, #12]
 800c21e:	1ad2      	subs	r2, r2, r3
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c224:	4b0c      	ldr	r3, [pc, #48]	; (800c258 <prvHeapInit+0xb4>)
 800c226:	681a      	ldr	r2, [r3, #0]
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	685b      	ldr	r3, [r3, #4]
 800c230:	4a0a      	ldr	r2, [pc, #40]	; (800c25c <prvHeapInit+0xb8>)
 800c232:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	685b      	ldr	r3, [r3, #4]
 800c238:	4a09      	ldr	r2, [pc, #36]	; (800c260 <prvHeapInit+0xbc>)
 800c23a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c23c:	4b09      	ldr	r3, [pc, #36]	; (800c264 <prvHeapInit+0xc0>)
 800c23e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c242:	601a      	str	r2, [r3, #0]
}
 800c244:	bf00      	nop
 800c246:	3714      	adds	r7, #20
 800c248:	46bd      	mov	sp, r7
 800c24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24e:	4770      	bx	lr
 800c250:	20000efc 	.word	0x20000efc
 800c254:	20004afc 	.word	0x20004afc
 800c258:	20004b04 	.word	0x20004b04
 800c25c:	20004b0c 	.word	0x20004b0c
 800c260:	20004b08 	.word	0x20004b08
 800c264:	20004b18 	.word	0x20004b18

0800c268 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c268:	b480      	push	{r7}
 800c26a:	b085      	sub	sp, #20
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c270:	4b28      	ldr	r3, [pc, #160]	; (800c314 <prvInsertBlockIntoFreeList+0xac>)
 800c272:	60fb      	str	r3, [r7, #12]
 800c274:	e002      	b.n	800c27c <prvInsertBlockIntoFreeList+0x14>
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	60fb      	str	r3, [r7, #12]
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	687a      	ldr	r2, [r7, #4]
 800c282:	429a      	cmp	r2, r3
 800c284:	d8f7      	bhi.n	800c276 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	685b      	ldr	r3, [r3, #4]
 800c28e:	68ba      	ldr	r2, [r7, #8]
 800c290:	4413      	add	r3, r2
 800c292:	687a      	ldr	r2, [r7, #4]
 800c294:	429a      	cmp	r2, r3
 800c296:	d108      	bne.n	800c2aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	685a      	ldr	r2, [r3, #4]
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	685b      	ldr	r3, [r3, #4]
 800c2a0:	441a      	add	r2, r3
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	685b      	ldr	r3, [r3, #4]
 800c2b2:	68ba      	ldr	r2, [r7, #8]
 800c2b4:	441a      	add	r2, r3
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	429a      	cmp	r2, r3
 800c2bc:	d118      	bne.n	800c2f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	681a      	ldr	r2, [r3, #0]
 800c2c2:	4b15      	ldr	r3, [pc, #84]	; (800c318 <prvInsertBlockIntoFreeList+0xb0>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	429a      	cmp	r2, r3
 800c2c8:	d00d      	beq.n	800c2e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	685a      	ldr	r2, [r3, #4]
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	685b      	ldr	r3, [r3, #4]
 800c2d4:	441a      	add	r2, r3
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	681a      	ldr	r2, [r3, #0]
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	601a      	str	r2, [r3, #0]
 800c2e4:	e008      	b.n	800c2f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c2e6:	4b0c      	ldr	r3, [pc, #48]	; (800c318 <prvInsertBlockIntoFreeList+0xb0>)
 800c2e8:	681a      	ldr	r2, [r3, #0]
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	601a      	str	r2, [r3, #0]
 800c2ee:	e003      	b.n	800c2f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	681a      	ldr	r2, [r3, #0]
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c2f8:	68fa      	ldr	r2, [r7, #12]
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	d002      	beq.n	800c306 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	687a      	ldr	r2, [r7, #4]
 800c304:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c306:	bf00      	nop
 800c308:	3714      	adds	r7, #20
 800c30a:	46bd      	mov	sp, r7
 800c30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c310:	4770      	bx	lr
 800c312:	bf00      	nop
 800c314:	20004afc 	.word	0x20004afc
 800c318:	20004b04 	.word	0x20004b04

0800c31c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800c320:	2201      	movs	r2, #1
 800c322:	490e      	ldr	r1, [pc, #56]	; (800c35c <MX_USB_HOST_Init+0x40>)
 800c324:	480e      	ldr	r0, [pc, #56]	; (800c360 <MX_USB_HOST_Init+0x44>)
 800c326:	f7fb fa09 	bl	800773c <USBH_Init>
 800c32a:	4603      	mov	r3, r0
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d001      	beq.n	800c334 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c330:	f7f4 fd7c 	bl	8000e2c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800c334:	490b      	ldr	r1, [pc, #44]	; (800c364 <MX_USB_HOST_Init+0x48>)
 800c336:	480a      	ldr	r0, [pc, #40]	; (800c360 <MX_USB_HOST_Init+0x44>)
 800c338:	f7fb fab0 	bl	800789c <USBH_RegisterClass>
 800c33c:	4603      	mov	r3, r0
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d001      	beq.n	800c346 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c342:	f7f4 fd73 	bl	8000e2c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800c346:	4806      	ldr	r0, [pc, #24]	; (800c360 <MX_USB_HOST_Init+0x44>)
 800c348:	f7fb fb34 	bl	80079b4 <USBH_Start>
 800c34c:	4603      	mov	r3, r0
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d001      	beq.n	800c356 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c352:	f7f4 fd6b 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c356:	bf00      	nop
 800c358:	bd80      	pop	{r7, pc}
 800c35a:	bf00      	nop
 800c35c:	0800c369 	.word	0x0800c369
 800c360:	20004b1c 	.word	0x20004b1c
 800c364:	2000000c 	.word	0x2000000c

0800c368 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c368:	b480      	push	{r7}
 800c36a:	b083      	sub	sp, #12
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
 800c370:	460b      	mov	r3, r1
 800c372:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c374:	78fb      	ldrb	r3, [r7, #3]
 800c376:	3b01      	subs	r3, #1
 800c378:	2b04      	cmp	r3, #4
 800c37a:	d819      	bhi.n	800c3b0 <USBH_UserProcess+0x48>
 800c37c:	a201      	add	r2, pc, #4	; (adr r2, 800c384 <USBH_UserProcess+0x1c>)
 800c37e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c382:	bf00      	nop
 800c384:	0800c3b1 	.word	0x0800c3b1
 800c388:	0800c3a1 	.word	0x0800c3a1
 800c38c:	0800c3b1 	.word	0x0800c3b1
 800c390:	0800c3a9 	.word	0x0800c3a9
 800c394:	0800c399 	.word	0x0800c399
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c398:	4b09      	ldr	r3, [pc, #36]	; (800c3c0 <USBH_UserProcess+0x58>)
 800c39a:	2203      	movs	r2, #3
 800c39c:	701a      	strb	r2, [r3, #0]
  break;
 800c39e:	e008      	b.n	800c3b2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c3a0:	4b07      	ldr	r3, [pc, #28]	; (800c3c0 <USBH_UserProcess+0x58>)
 800c3a2:	2202      	movs	r2, #2
 800c3a4:	701a      	strb	r2, [r3, #0]
  break;
 800c3a6:	e004      	b.n	800c3b2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c3a8:	4b05      	ldr	r3, [pc, #20]	; (800c3c0 <USBH_UserProcess+0x58>)
 800c3aa:	2201      	movs	r2, #1
 800c3ac:	701a      	strb	r2, [r3, #0]
  break;
 800c3ae:	e000      	b.n	800c3b2 <USBH_UserProcess+0x4a>

  default:
  break;
 800c3b0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c3b2:	bf00      	nop
 800c3b4:	370c      	adds	r7, #12
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3bc:	4770      	bx	lr
 800c3be:	bf00      	nop
 800c3c0:	20004f00 	.word	0x20004f00

0800c3c4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b08a      	sub	sp, #40	; 0x28
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c3cc:	f107 0314 	add.w	r3, r7, #20
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	601a      	str	r2, [r3, #0]
 800c3d4:	605a      	str	r2, [r3, #4]
 800c3d6:	609a      	str	r2, [r3, #8]
 800c3d8:	60da      	str	r2, [r3, #12]
 800c3da:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c3e4:	d147      	bne.n	800c476 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	613b      	str	r3, [r7, #16]
 800c3ea:	4b25      	ldr	r3, [pc, #148]	; (800c480 <HAL_HCD_MspInit+0xbc>)
 800c3ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3ee:	4a24      	ldr	r2, [pc, #144]	; (800c480 <HAL_HCD_MspInit+0xbc>)
 800c3f0:	f043 0301 	orr.w	r3, r3, #1
 800c3f4:	6313      	str	r3, [r2, #48]	; 0x30
 800c3f6:	4b22      	ldr	r3, [pc, #136]	; (800c480 <HAL_HCD_MspInit+0xbc>)
 800c3f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3fa:	f003 0301 	and.w	r3, r3, #1
 800c3fe:	613b      	str	r3, [r7, #16]
 800c400:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800c402:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c406:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c408:	2300      	movs	r3, #0
 800c40a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c40c:	2300      	movs	r3, #0
 800c40e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800c410:	f107 0314 	add.w	r3, r7, #20
 800c414:	4619      	mov	r1, r3
 800c416:	481b      	ldr	r0, [pc, #108]	; (800c484 <HAL_HCD_MspInit+0xc0>)
 800c418:	f7f5 fce2 	bl	8001de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800c41c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800c420:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c422:	2302      	movs	r3, #2
 800c424:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c426:	2300      	movs	r3, #0
 800c428:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c42a:	2300      	movs	r3, #0
 800c42c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c42e:	230a      	movs	r3, #10
 800c430:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c432:	f107 0314 	add.w	r3, r7, #20
 800c436:	4619      	mov	r1, r3
 800c438:	4812      	ldr	r0, [pc, #72]	; (800c484 <HAL_HCD_MspInit+0xc0>)
 800c43a:	f7f5 fcd1 	bl	8001de0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c43e:	4b10      	ldr	r3, [pc, #64]	; (800c480 <HAL_HCD_MspInit+0xbc>)
 800c440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c442:	4a0f      	ldr	r2, [pc, #60]	; (800c480 <HAL_HCD_MspInit+0xbc>)
 800c444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c448:	6353      	str	r3, [r2, #52]	; 0x34
 800c44a:	2300      	movs	r3, #0
 800c44c:	60fb      	str	r3, [r7, #12]
 800c44e:	4b0c      	ldr	r3, [pc, #48]	; (800c480 <HAL_HCD_MspInit+0xbc>)
 800c450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c452:	4a0b      	ldr	r2, [pc, #44]	; (800c480 <HAL_HCD_MspInit+0xbc>)
 800c454:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c458:	6453      	str	r3, [r2, #68]	; 0x44
 800c45a:	4b09      	ldr	r3, [pc, #36]	; (800c480 <HAL_HCD_MspInit+0xbc>)
 800c45c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c45e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c462:	60fb      	str	r3, [r7, #12]
 800c464:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800c466:	2200      	movs	r2, #0
 800c468:	2105      	movs	r1, #5
 800c46a:	2043      	movs	r0, #67	; 0x43
 800c46c:	f7f5 fbef 	bl	8001c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c470:	2043      	movs	r0, #67	; 0x43
 800c472:	f7f5 fc08 	bl	8001c86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c476:	bf00      	nop
 800c478:	3728      	adds	r7, #40	; 0x28
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bd80      	pop	{r7, pc}
 800c47e:	bf00      	nop
 800c480:	40023800 	.word	0x40023800
 800c484:	40020000 	.word	0x40020000

0800c488 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b082      	sub	sp, #8
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c496:	4618      	mov	r0, r3
 800c498:	f7fb ff43 	bl	8008322 <USBH_LL_IncTimer>
}
 800c49c:	bf00      	nop
 800c49e:	3708      	adds	r7, #8
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	bd80      	pop	{r7, pc}

0800c4a4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b082      	sub	sp, #8
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f7fb ff87 	bl	80083c6 <USBH_LL_Connect>
}
 800c4b8:	bf00      	nop
 800c4ba:	3708      	adds	r7, #8
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd80      	pop	{r7, pc}

0800c4c0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b082      	sub	sp, #8
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	f7fb ff9c 	bl	800840c <USBH_LL_Disconnect>
}
 800c4d4:	bf00      	nop
 800c4d6:	3708      	adds	r7, #8
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bd80      	pop	{r7, pc}

0800c4dc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b082      	sub	sp, #8
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
 800c4e4:	460b      	mov	r3, r1
 800c4e6:	70fb      	strb	r3, [r7, #3]
 800c4e8:	4613      	mov	r3, r2
 800c4ea:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	f7fb ffd3 	bl	800849e <USBH_LL_NotifyURBChange>
#endif
}
 800c4f8:	bf00      	nop
 800c4fa:	3708      	adds	r7, #8
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	bd80      	pop	{r7, pc}

0800c500 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b082      	sub	sp, #8
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c50e:	4618      	mov	r0, r3
 800c510:	f7fb ff31 	bl	8008376 <USBH_LL_PortEnabled>
}
 800c514:	bf00      	nop
 800c516:	3708      	adds	r7, #8
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}

0800c51c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b082      	sub	sp, #8
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c52a:	4618      	mov	r0, r3
 800c52c:	f7fb ff3d 	bl	80083aa <USBH_LL_PortDisabled>
}
 800c530:	bf00      	nop
 800c532:	3708      	adds	r7, #8
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}

0800c538 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b082      	sub	sp, #8
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c546:	2b01      	cmp	r3, #1
 800c548:	d12a      	bne.n	800c5a0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800c54a:	4a18      	ldr	r2, [pc, #96]	; (800c5ac <USBH_LL_Init+0x74>)
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	4a15      	ldr	r2, [pc, #84]	; (800c5ac <USBH_LL_Init+0x74>)
 800c556:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c55a:	4b14      	ldr	r3, [pc, #80]	; (800c5ac <USBH_LL_Init+0x74>)
 800c55c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c560:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800c562:	4b12      	ldr	r3, [pc, #72]	; (800c5ac <USBH_LL_Init+0x74>)
 800c564:	2208      	movs	r2, #8
 800c566:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800c568:	4b10      	ldr	r3, [pc, #64]	; (800c5ac <USBH_LL_Init+0x74>)
 800c56a:	2201      	movs	r2, #1
 800c56c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c56e:	4b0f      	ldr	r3, [pc, #60]	; (800c5ac <USBH_LL_Init+0x74>)
 800c570:	2200      	movs	r2, #0
 800c572:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c574:	4b0d      	ldr	r3, [pc, #52]	; (800c5ac <USBH_LL_Init+0x74>)
 800c576:	2202      	movs	r2, #2
 800c578:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c57a:	4b0c      	ldr	r3, [pc, #48]	; (800c5ac <USBH_LL_Init+0x74>)
 800c57c:	2200      	movs	r2, #0
 800c57e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c580:	480a      	ldr	r0, [pc, #40]	; (800c5ac <USBH_LL_Init+0x74>)
 800c582:	f7f5 fde2 	bl	800214a <HAL_HCD_Init>
 800c586:	4603      	mov	r3, r0
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d001      	beq.n	800c590 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800c58c:	f7f4 fc4e 	bl	8000e2c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c590:	4806      	ldr	r0, [pc, #24]	; (800c5ac <USBH_LL_Init+0x74>)
 800c592:	f7f6 f9c6 	bl	8002922 <HAL_HCD_GetCurrentFrame>
 800c596:	4603      	mov	r3, r0
 800c598:	4619      	mov	r1, r3
 800c59a:	6878      	ldr	r0, [r7, #4]
 800c59c:	f7fb feb2 	bl	8008304 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c5a0:	2300      	movs	r3, #0
}
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	3708      	adds	r7, #8
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	bd80      	pop	{r7, pc}
 800c5aa:	bf00      	nop
 800c5ac:	20004f04 	.word	0x20004f04

0800c5b0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b084      	sub	sp, #16
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c5bc:	2300      	movs	r3, #0
 800c5be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	f7f6 f935 	bl	8002836 <HAL_HCD_Start>
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c5d0:	7bfb      	ldrb	r3, [r7, #15]
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	f000 f95c 	bl	800c890 <USBH_Get_USB_Status>
 800c5d8:	4603      	mov	r3, r0
 800c5da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c5dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800c5de:	4618      	mov	r0, r3
 800c5e0:	3710      	adds	r7, #16
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	bd80      	pop	{r7, pc}

0800c5e6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c5e6:	b580      	push	{r7, lr}
 800c5e8:	b084      	sub	sp, #16
 800c5ea:	af00      	add	r7, sp, #0
 800c5ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	f7f6 f93d 	bl	800287c <HAL_HCD_Stop>
 800c602:	4603      	mov	r3, r0
 800c604:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c606:	7bfb      	ldrb	r3, [r7, #15]
 800c608:	4618      	mov	r0, r3
 800c60a:	f000 f941 	bl	800c890 <USBH_Get_USB_Status>
 800c60e:	4603      	mov	r3, r0
 800c610:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c612:	7bbb      	ldrb	r3, [r7, #14]
}
 800c614:	4618      	mov	r0, r3
 800c616:	3710      	adds	r7, #16
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd80      	pop	{r7, pc}

0800c61c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b084      	sub	sp, #16
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c624:	2301      	movs	r3, #1
 800c626:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c62e:	4618      	mov	r0, r3
 800c630:	f7f6 f985 	bl	800293e <HAL_HCD_GetCurrentSpeed>
 800c634:	4603      	mov	r3, r0
 800c636:	2b02      	cmp	r3, #2
 800c638:	d00c      	beq.n	800c654 <USBH_LL_GetSpeed+0x38>
 800c63a:	2b02      	cmp	r3, #2
 800c63c:	d80d      	bhi.n	800c65a <USBH_LL_GetSpeed+0x3e>
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d002      	beq.n	800c648 <USBH_LL_GetSpeed+0x2c>
 800c642:	2b01      	cmp	r3, #1
 800c644:	d003      	beq.n	800c64e <USBH_LL_GetSpeed+0x32>
 800c646:	e008      	b.n	800c65a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c648:	2300      	movs	r3, #0
 800c64a:	73fb      	strb	r3, [r7, #15]
    break;
 800c64c:	e008      	b.n	800c660 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c64e:	2301      	movs	r3, #1
 800c650:	73fb      	strb	r3, [r7, #15]
    break;
 800c652:	e005      	b.n	800c660 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c654:	2302      	movs	r3, #2
 800c656:	73fb      	strb	r3, [r7, #15]
    break;
 800c658:	e002      	b.n	800c660 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800c65a:	2301      	movs	r3, #1
 800c65c:	73fb      	strb	r3, [r7, #15]
    break;
 800c65e:	bf00      	nop
  }
  return  speed;
 800c660:	7bfb      	ldrb	r3, [r7, #15]
}
 800c662:	4618      	mov	r0, r3
 800c664:	3710      	adds	r7, #16
 800c666:	46bd      	mov	sp, r7
 800c668:	bd80      	pop	{r7, pc}

0800c66a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c66a:	b580      	push	{r7, lr}
 800c66c:	b084      	sub	sp, #16
 800c66e:	af00      	add	r7, sp, #0
 800c670:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c672:	2300      	movs	r3, #0
 800c674:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c676:	2300      	movs	r3, #0
 800c678:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c680:	4618      	mov	r0, r3
 800c682:	f7f6 f918 	bl	80028b6 <HAL_HCD_ResetPort>
 800c686:	4603      	mov	r3, r0
 800c688:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c68a:	7bfb      	ldrb	r3, [r7, #15]
 800c68c:	4618      	mov	r0, r3
 800c68e:	f000 f8ff 	bl	800c890 <USBH_Get_USB_Status>
 800c692:	4603      	mov	r3, r0
 800c694:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c696:	7bbb      	ldrb	r3, [r7, #14]
}
 800c698:	4618      	mov	r0, r3
 800c69a:	3710      	adds	r7, #16
 800c69c:	46bd      	mov	sp, r7
 800c69e:	bd80      	pop	{r7, pc}

0800c6a0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b082      	sub	sp, #8
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
 800c6a8:	460b      	mov	r3, r1
 800c6aa:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c6b2:	78fa      	ldrb	r2, [r7, #3]
 800c6b4:	4611      	mov	r1, r2
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f7f6 f91f 	bl	80028fa <HAL_HCD_HC_GetXferCount>
 800c6bc:	4603      	mov	r3, r0
}
 800c6be:	4618      	mov	r0, r3
 800c6c0:	3708      	adds	r7, #8
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}

0800c6c6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c6c6:	b590      	push	{r4, r7, lr}
 800c6c8:	b089      	sub	sp, #36	; 0x24
 800c6ca:	af04      	add	r7, sp, #16
 800c6cc:	6078      	str	r0, [r7, #4]
 800c6ce:	4608      	mov	r0, r1
 800c6d0:	4611      	mov	r1, r2
 800c6d2:	461a      	mov	r2, r3
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	70fb      	strb	r3, [r7, #3]
 800c6d8:	460b      	mov	r3, r1
 800c6da:	70bb      	strb	r3, [r7, #2]
 800c6dc:	4613      	mov	r3, r2
 800c6de:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c6ee:	787c      	ldrb	r4, [r7, #1]
 800c6f0:	78ba      	ldrb	r2, [r7, #2]
 800c6f2:	78f9      	ldrb	r1, [r7, #3]
 800c6f4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c6f6:	9302      	str	r3, [sp, #8]
 800c6f8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c6fc:	9301      	str	r3, [sp, #4]
 800c6fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c702:	9300      	str	r3, [sp, #0]
 800c704:	4623      	mov	r3, r4
 800c706:	f7f5 fd82 	bl	800220e <HAL_HCD_HC_Init>
 800c70a:	4603      	mov	r3, r0
 800c70c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c70e:	7bfb      	ldrb	r3, [r7, #15]
 800c710:	4618      	mov	r0, r3
 800c712:	f000 f8bd 	bl	800c890 <USBH_Get_USB_Status>
 800c716:	4603      	mov	r3, r0
 800c718:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c71a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c71c:	4618      	mov	r0, r3
 800c71e:	3714      	adds	r7, #20
 800c720:	46bd      	mov	sp, r7
 800c722:	bd90      	pop	{r4, r7, pc}

0800c724 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b084      	sub	sp, #16
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
 800c72c:	460b      	mov	r3, r1
 800c72e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c730:	2300      	movs	r3, #0
 800c732:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c734:	2300      	movs	r3, #0
 800c736:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c73e:	78fa      	ldrb	r2, [r7, #3]
 800c740:	4611      	mov	r1, r2
 800c742:	4618      	mov	r0, r3
 800c744:	f7f5 fdf2 	bl	800232c <HAL_HCD_HC_Halt>
 800c748:	4603      	mov	r3, r0
 800c74a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c74c:	7bfb      	ldrb	r3, [r7, #15]
 800c74e:	4618      	mov	r0, r3
 800c750:	f000 f89e 	bl	800c890 <USBH_Get_USB_Status>
 800c754:	4603      	mov	r3, r0
 800c756:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c758:	7bbb      	ldrb	r3, [r7, #14]
}
 800c75a:	4618      	mov	r0, r3
 800c75c:	3710      	adds	r7, #16
 800c75e:	46bd      	mov	sp, r7
 800c760:	bd80      	pop	{r7, pc}

0800c762 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c762:	b590      	push	{r4, r7, lr}
 800c764:	b089      	sub	sp, #36	; 0x24
 800c766:	af04      	add	r7, sp, #16
 800c768:	6078      	str	r0, [r7, #4]
 800c76a:	4608      	mov	r0, r1
 800c76c:	4611      	mov	r1, r2
 800c76e:	461a      	mov	r2, r3
 800c770:	4603      	mov	r3, r0
 800c772:	70fb      	strb	r3, [r7, #3]
 800c774:	460b      	mov	r3, r1
 800c776:	70bb      	strb	r3, [r7, #2]
 800c778:	4613      	mov	r3, r2
 800c77a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c77c:	2300      	movs	r3, #0
 800c77e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c780:	2300      	movs	r3, #0
 800c782:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c78a:	787c      	ldrb	r4, [r7, #1]
 800c78c:	78ba      	ldrb	r2, [r7, #2]
 800c78e:	78f9      	ldrb	r1, [r7, #3]
 800c790:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c794:	9303      	str	r3, [sp, #12]
 800c796:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c798:	9302      	str	r3, [sp, #8]
 800c79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c79c:	9301      	str	r3, [sp, #4]
 800c79e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c7a2:	9300      	str	r3, [sp, #0]
 800c7a4:	4623      	mov	r3, r4
 800c7a6:	f7f5 fde5 	bl	8002374 <HAL_HCD_HC_SubmitRequest>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c7ae:	7bfb      	ldrb	r3, [r7, #15]
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	f000 f86d 	bl	800c890 <USBH_Get_USB_Status>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7ba:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7bc:	4618      	mov	r0, r3
 800c7be:	3714      	adds	r7, #20
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd90      	pop	{r4, r7, pc}

0800c7c4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b082      	sub	sp, #8
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
 800c7cc:	460b      	mov	r3, r1
 800c7ce:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c7d6:	78fa      	ldrb	r2, [r7, #3]
 800c7d8:	4611      	mov	r1, r2
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f7f6 f879 	bl	80028d2 <HAL_HCD_HC_GetURBState>
 800c7e0:	4603      	mov	r3, r0
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	3708      	adds	r7, #8
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}

0800c7ea <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c7ea:	b580      	push	{r7, lr}
 800c7ec:	b082      	sub	sp, #8
 800c7ee:	af00      	add	r7, sp, #0
 800c7f0:	6078      	str	r0, [r7, #4]
 800c7f2:	460b      	mov	r3, r1
 800c7f4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c7fc:	2b01      	cmp	r3, #1
 800c7fe:	d103      	bne.n	800c808 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800c800:	78fb      	ldrb	r3, [r7, #3]
 800c802:	4618      	mov	r0, r3
 800c804:	f000 f870 	bl	800c8e8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c808:	20c8      	movs	r0, #200	; 0xc8
 800c80a:	f7f4 fd55 	bl	80012b8 <HAL_Delay>
  return USBH_OK;
 800c80e:	2300      	movs	r3, #0
}
 800c810:	4618      	mov	r0, r3
 800c812:	3708      	adds	r7, #8
 800c814:	46bd      	mov	sp, r7
 800c816:	bd80      	pop	{r7, pc}

0800c818 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c818:	b480      	push	{r7}
 800c81a:	b085      	sub	sp, #20
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
 800c820:	460b      	mov	r3, r1
 800c822:	70fb      	strb	r3, [r7, #3]
 800c824:	4613      	mov	r3, r2
 800c826:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c82e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c830:	78fb      	ldrb	r3, [r7, #3]
 800c832:	68fa      	ldr	r2, [r7, #12]
 800c834:	212c      	movs	r1, #44	; 0x2c
 800c836:	fb01 f303 	mul.w	r3, r1, r3
 800c83a:	4413      	add	r3, r2
 800c83c:	333b      	adds	r3, #59	; 0x3b
 800c83e:	781b      	ldrb	r3, [r3, #0]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d009      	beq.n	800c858 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c844:	78fb      	ldrb	r3, [r7, #3]
 800c846:	68fa      	ldr	r2, [r7, #12]
 800c848:	212c      	movs	r1, #44	; 0x2c
 800c84a:	fb01 f303 	mul.w	r3, r1, r3
 800c84e:	4413      	add	r3, r2
 800c850:	3354      	adds	r3, #84	; 0x54
 800c852:	78ba      	ldrb	r2, [r7, #2]
 800c854:	701a      	strb	r2, [r3, #0]
 800c856:	e008      	b.n	800c86a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c858:	78fb      	ldrb	r3, [r7, #3]
 800c85a:	68fa      	ldr	r2, [r7, #12]
 800c85c:	212c      	movs	r1, #44	; 0x2c
 800c85e:	fb01 f303 	mul.w	r3, r1, r3
 800c862:	4413      	add	r3, r2
 800c864:	3355      	adds	r3, #85	; 0x55
 800c866:	78ba      	ldrb	r2, [r7, #2]
 800c868:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c86a:	2300      	movs	r3, #0
}
 800c86c:	4618      	mov	r0, r3
 800c86e:	3714      	adds	r7, #20
 800c870:	46bd      	mov	sp, r7
 800c872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c876:	4770      	bx	lr

0800c878 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b082      	sub	sp, #8
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c880:	6878      	ldr	r0, [r7, #4]
 800c882:	f7f4 fd19 	bl	80012b8 <HAL_Delay>
}
 800c886:	bf00      	nop
 800c888:	3708      	adds	r7, #8
 800c88a:	46bd      	mov	sp, r7
 800c88c:	bd80      	pop	{r7, pc}
	...

0800c890 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c890:	b480      	push	{r7}
 800c892:	b085      	sub	sp, #20
 800c894:	af00      	add	r7, sp, #0
 800c896:	4603      	mov	r3, r0
 800c898:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c89a:	2300      	movs	r3, #0
 800c89c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c89e:	79fb      	ldrb	r3, [r7, #7]
 800c8a0:	2b03      	cmp	r3, #3
 800c8a2:	d817      	bhi.n	800c8d4 <USBH_Get_USB_Status+0x44>
 800c8a4:	a201      	add	r2, pc, #4	; (adr r2, 800c8ac <USBH_Get_USB_Status+0x1c>)
 800c8a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8aa:	bf00      	nop
 800c8ac:	0800c8bd 	.word	0x0800c8bd
 800c8b0:	0800c8c3 	.word	0x0800c8c3
 800c8b4:	0800c8c9 	.word	0x0800c8c9
 800c8b8:	0800c8cf 	.word	0x0800c8cf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c8bc:	2300      	movs	r3, #0
 800c8be:	73fb      	strb	r3, [r7, #15]
    break;
 800c8c0:	e00b      	b.n	800c8da <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c8c2:	2302      	movs	r3, #2
 800c8c4:	73fb      	strb	r3, [r7, #15]
    break;
 800c8c6:	e008      	b.n	800c8da <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c8c8:	2301      	movs	r3, #1
 800c8ca:	73fb      	strb	r3, [r7, #15]
    break;
 800c8cc:	e005      	b.n	800c8da <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c8ce:	2302      	movs	r3, #2
 800c8d0:	73fb      	strb	r3, [r7, #15]
    break;
 800c8d2:	e002      	b.n	800c8da <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c8d4:	2302      	movs	r3, #2
 800c8d6:	73fb      	strb	r3, [r7, #15]
    break;
 800c8d8:	bf00      	nop
  }
  return usb_status;
 800c8da:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8dc:	4618      	mov	r0, r3
 800c8de:	3714      	adds	r7, #20
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e6:	4770      	bx	lr

0800c8e8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b084      	sub	sp, #16
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	4603      	mov	r3, r0
 800c8f0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c8f2:	79fb      	ldrb	r3, [r7, #7]
 800c8f4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800c8f6:	79fb      	ldrb	r3, [r7, #7]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d102      	bne.n	800c902 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	73fb      	strb	r3, [r7, #15]
 800c900:	e001      	b.n	800c906 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800c902:	2301      	movs	r3, #1
 800c904:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800c906:	7bfb      	ldrb	r3, [r7, #15]
 800c908:	461a      	mov	r2, r3
 800c90a:	2101      	movs	r1, #1
 800c90c:	4803      	ldr	r0, [pc, #12]	; (800c91c <MX_DriverVbusFS+0x34>)
 800c90e:	f7f5 fc03 	bl	8002118 <HAL_GPIO_WritePin>
}
 800c912:	bf00      	nop
 800c914:	3710      	adds	r7, #16
 800c916:	46bd      	mov	sp, r7
 800c918:	bd80      	pop	{r7, pc}
 800c91a:	bf00      	nop
 800c91c:	40020800 	.word	0x40020800

0800c920 <__errno>:
 800c920:	4b01      	ldr	r3, [pc, #4]	; (800c928 <__errno+0x8>)
 800c922:	6818      	ldr	r0, [r3, #0]
 800c924:	4770      	bx	lr
 800c926:	bf00      	nop
 800c928:	20000030 	.word	0x20000030

0800c92c <__libc_init_array>:
 800c92c:	b570      	push	{r4, r5, r6, lr}
 800c92e:	4d0d      	ldr	r5, [pc, #52]	; (800c964 <__libc_init_array+0x38>)
 800c930:	4c0d      	ldr	r4, [pc, #52]	; (800c968 <__libc_init_array+0x3c>)
 800c932:	1b64      	subs	r4, r4, r5
 800c934:	10a4      	asrs	r4, r4, #2
 800c936:	2600      	movs	r6, #0
 800c938:	42a6      	cmp	r6, r4
 800c93a:	d109      	bne.n	800c950 <__libc_init_array+0x24>
 800c93c:	4d0b      	ldr	r5, [pc, #44]	; (800c96c <__libc_init_array+0x40>)
 800c93e:	4c0c      	ldr	r4, [pc, #48]	; (800c970 <__libc_init_array+0x44>)
 800c940:	f000 fc9e 	bl	800d280 <_init>
 800c944:	1b64      	subs	r4, r4, r5
 800c946:	10a4      	asrs	r4, r4, #2
 800c948:	2600      	movs	r6, #0
 800c94a:	42a6      	cmp	r6, r4
 800c94c:	d105      	bne.n	800c95a <__libc_init_array+0x2e>
 800c94e:	bd70      	pop	{r4, r5, r6, pc}
 800c950:	f855 3b04 	ldr.w	r3, [r5], #4
 800c954:	4798      	blx	r3
 800c956:	3601      	adds	r6, #1
 800c958:	e7ee      	b.n	800c938 <__libc_init_array+0xc>
 800c95a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c95e:	4798      	blx	r3
 800c960:	3601      	adds	r6, #1
 800c962:	e7f2      	b.n	800c94a <__libc_init_array+0x1e>
 800c964:	0800d3a8 	.word	0x0800d3a8
 800c968:	0800d3a8 	.word	0x0800d3a8
 800c96c:	0800d3a8 	.word	0x0800d3a8
 800c970:	0800d3ac 	.word	0x0800d3ac

0800c974 <malloc>:
 800c974:	4b02      	ldr	r3, [pc, #8]	; (800c980 <malloc+0xc>)
 800c976:	4601      	mov	r1, r0
 800c978:	6818      	ldr	r0, [r3, #0]
 800c97a:	f000 b88d 	b.w	800ca98 <_malloc_r>
 800c97e:	bf00      	nop
 800c980:	20000030 	.word	0x20000030

0800c984 <free>:
 800c984:	4b02      	ldr	r3, [pc, #8]	; (800c990 <free+0xc>)
 800c986:	4601      	mov	r1, r0
 800c988:	6818      	ldr	r0, [r3, #0]
 800c98a:	f000 b819 	b.w	800c9c0 <_free_r>
 800c98e:	bf00      	nop
 800c990:	20000030 	.word	0x20000030

0800c994 <memcpy>:
 800c994:	440a      	add	r2, r1
 800c996:	4291      	cmp	r1, r2
 800c998:	f100 33ff 	add.w	r3, r0, #4294967295
 800c99c:	d100      	bne.n	800c9a0 <memcpy+0xc>
 800c99e:	4770      	bx	lr
 800c9a0:	b510      	push	{r4, lr}
 800c9a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c9a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c9aa:	4291      	cmp	r1, r2
 800c9ac:	d1f9      	bne.n	800c9a2 <memcpy+0xe>
 800c9ae:	bd10      	pop	{r4, pc}

0800c9b0 <memset>:
 800c9b0:	4402      	add	r2, r0
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	4293      	cmp	r3, r2
 800c9b6:	d100      	bne.n	800c9ba <memset+0xa>
 800c9b8:	4770      	bx	lr
 800c9ba:	f803 1b01 	strb.w	r1, [r3], #1
 800c9be:	e7f9      	b.n	800c9b4 <memset+0x4>

0800c9c0 <_free_r>:
 800c9c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c9c2:	2900      	cmp	r1, #0
 800c9c4:	d044      	beq.n	800ca50 <_free_r+0x90>
 800c9c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9ca:	9001      	str	r0, [sp, #4]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	f1a1 0404 	sub.w	r4, r1, #4
 800c9d2:	bfb8      	it	lt
 800c9d4:	18e4      	addlt	r4, r4, r3
 800c9d6:	f000 f903 	bl	800cbe0 <__malloc_lock>
 800c9da:	4a1e      	ldr	r2, [pc, #120]	; (800ca54 <_free_r+0x94>)
 800c9dc:	9801      	ldr	r0, [sp, #4]
 800c9de:	6813      	ldr	r3, [r2, #0]
 800c9e0:	b933      	cbnz	r3, 800c9f0 <_free_r+0x30>
 800c9e2:	6063      	str	r3, [r4, #4]
 800c9e4:	6014      	str	r4, [r2, #0]
 800c9e6:	b003      	add	sp, #12
 800c9e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c9ec:	f000 b8fe 	b.w	800cbec <__malloc_unlock>
 800c9f0:	42a3      	cmp	r3, r4
 800c9f2:	d908      	bls.n	800ca06 <_free_r+0x46>
 800c9f4:	6825      	ldr	r5, [r4, #0]
 800c9f6:	1961      	adds	r1, r4, r5
 800c9f8:	428b      	cmp	r3, r1
 800c9fa:	bf01      	itttt	eq
 800c9fc:	6819      	ldreq	r1, [r3, #0]
 800c9fe:	685b      	ldreq	r3, [r3, #4]
 800ca00:	1949      	addeq	r1, r1, r5
 800ca02:	6021      	streq	r1, [r4, #0]
 800ca04:	e7ed      	b.n	800c9e2 <_free_r+0x22>
 800ca06:	461a      	mov	r2, r3
 800ca08:	685b      	ldr	r3, [r3, #4]
 800ca0a:	b10b      	cbz	r3, 800ca10 <_free_r+0x50>
 800ca0c:	42a3      	cmp	r3, r4
 800ca0e:	d9fa      	bls.n	800ca06 <_free_r+0x46>
 800ca10:	6811      	ldr	r1, [r2, #0]
 800ca12:	1855      	adds	r5, r2, r1
 800ca14:	42a5      	cmp	r5, r4
 800ca16:	d10b      	bne.n	800ca30 <_free_r+0x70>
 800ca18:	6824      	ldr	r4, [r4, #0]
 800ca1a:	4421      	add	r1, r4
 800ca1c:	1854      	adds	r4, r2, r1
 800ca1e:	42a3      	cmp	r3, r4
 800ca20:	6011      	str	r1, [r2, #0]
 800ca22:	d1e0      	bne.n	800c9e6 <_free_r+0x26>
 800ca24:	681c      	ldr	r4, [r3, #0]
 800ca26:	685b      	ldr	r3, [r3, #4]
 800ca28:	6053      	str	r3, [r2, #4]
 800ca2a:	4421      	add	r1, r4
 800ca2c:	6011      	str	r1, [r2, #0]
 800ca2e:	e7da      	b.n	800c9e6 <_free_r+0x26>
 800ca30:	d902      	bls.n	800ca38 <_free_r+0x78>
 800ca32:	230c      	movs	r3, #12
 800ca34:	6003      	str	r3, [r0, #0]
 800ca36:	e7d6      	b.n	800c9e6 <_free_r+0x26>
 800ca38:	6825      	ldr	r5, [r4, #0]
 800ca3a:	1961      	adds	r1, r4, r5
 800ca3c:	428b      	cmp	r3, r1
 800ca3e:	bf04      	itt	eq
 800ca40:	6819      	ldreq	r1, [r3, #0]
 800ca42:	685b      	ldreq	r3, [r3, #4]
 800ca44:	6063      	str	r3, [r4, #4]
 800ca46:	bf04      	itt	eq
 800ca48:	1949      	addeq	r1, r1, r5
 800ca4a:	6021      	streq	r1, [r4, #0]
 800ca4c:	6054      	str	r4, [r2, #4]
 800ca4e:	e7ca      	b.n	800c9e6 <_free_r+0x26>
 800ca50:	b003      	add	sp, #12
 800ca52:	bd30      	pop	{r4, r5, pc}
 800ca54:	20005208 	.word	0x20005208

0800ca58 <sbrk_aligned>:
 800ca58:	b570      	push	{r4, r5, r6, lr}
 800ca5a:	4e0e      	ldr	r6, [pc, #56]	; (800ca94 <sbrk_aligned+0x3c>)
 800ca5c:	460c      	mov	r4, r1
 800ca5e:	6831      	ldr	r1, [r6, #0]
 800ca60:	4605      	mov	r5, r0
 800ca62:	b911      	cbnz	r1, 800ca6a <sbrk_aligned+0x12>
 800ca64:	f000 f88c 	bl	800cb80 <_sbrk_r>
 800ca68:	6030      	str	r0, [r6, #0]
 800ca6a:	4621      	mov	r1, r4
 800ca6c:	4628      	mov	r0, r5
 800ca6e:	f000 f887 	bl	800cb80 <_sbrk_r>
 800ca72:	1c43      	adds	r3, r0, #1
 800ca74:	d00a      	beq.n	800ca8c <sbrk_aligned+0x34>
 800ca76:	1cc4      	adds	r4, r0, #3
 800ca78:	f024 0403 	bic.w	r4, r4, #3
 800ca7c:	42a0      	cmp	r0, r4
 800ca7e:	d007      	beq.n	800ca90 <sbrk_aligned+0x38>
 800ca80:	1a21      	subs	r1, r4, r0
 800ca82:	4628      	mov	r0, r5
 800ca84:	f000 f87c 	bl	800cb80 <_sbrk_r>
 800ca88:	3001      	adds	r0, #1
 800ca8a:	d101      	bne.n	800ca90 <sbrk_aligned+0x38>
 800ca8c:	f04f 34ff 	mov.w	r4, #4294967295
 800ca90:	4620      	mov	r0, r4
 800ca92:	bd70      	pop	{r4, r5, r6, pc}
 800ca94:	2000520c 	.word	0x2000520c

0800ca98 <_malloc_r>:
 800ca98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca9c:	1ccd      	adds	r5, r1, #3
 800ca9e:	f025 0503 	bic.w	r5, r5, #3
 800caa2:	3508      	adds	r5, #8
 800caa4:	2d0c      	cmp	r5, #12
 800caa6:	bf38      	it	cc
 800caa8:	250c      	movcc	r5, #12
 800caaa:	2d00      	cmp	r5, #0
 800caac:	4607      	mov	r7, r0
 800caae:	db01      	blt.n	800cab4 <_malloc_r+0x1c>
 800cab0:	42a9      	cmp	r1, r5
 800cab2:	d905      	bls.n	800cac0 <_malloc_r+0x28>
 800cab4:	230c      	movs	r3, #12
 800cab6:	603b      	str	r3, [r7, #0]
 800cab8:	2600      	movs	r6, #0
 800caba:	4630      	mov	r0, r6
 800cabc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cac0:	4e2e      	ldr	r6, [pc, #184]	; (800cb7c <_malloc_r+0xe4>)
 800cac2:	f000 f88d 	bl	800cbe0 <__malloc_lock>
 800cac6:	6833      	ldr	r3, [r6, #0]
 800cac8:	461c      	mov	r4, r3
 800caca:	bb34      	cbnz	r4, 800cb1a <_malloc_r+0x82>
 800cacc:	4629      	mov	r1, r5
 800cace:	4638      	mov	r0, r7
 800cad0:	f7ff ffc2 	bl	800ca58 <sbrk_aligned>
 800cad4:	1c43      	adds	r3, r0, #1
 800cad6:	4604      	mov	r4, r0
 800cad8:	d14d      	bne.n	800cb76 <_malloc_r+0xde>
 800cada:	6834      	ldr	r4, [r6, #0]
 800cadc:	4626      	mov	r6, r4
 800cade:	2e00      	cmp	r6, #0
 800cae0:	d140      	bne.n	800cb64 <_malloc_r+0xcc>
 800cae2:	6823      	ldr	r3, [r4, #0]
 800cae4:	4631      	mov	r1, r6
 800cae6:	4638      	mov	r0, r7
 800cae8:	eb04 0803 	add.w	r8, r4, r3
 800caec:	f000 f848 	bl	800cb80 <_sbrk_r>
 800caf0:	4580      	cmp	r8, r0
 800caf2:	d13a      	bne.n	800cb6a <_malloc_r+0xd2>
 800caf4:	6821      	ldr	r1, [r4, #0]
 800caf6:	3503      	adds	r5, #3
 800caf8:	1a6d      	subs	r5, r5, r1
 800cafa:	f025 0503 	bic.w	r5, r5, #3
 800cafe:	3508      	adds	r5, #8
 800cb00:	2d0c      	cmp	r5, #12
 800cb02:	bf38      	it	cc
 800cb04:	250c      	movcc	r5, #12
 800cb06:	4629      	mov	r1, r5
 800cb08:	4638      	mov	r0, r7
 800cb0a:	f7ff ffa5 	bl	800ca58 <sbrk_aligned>
 800cb0e:	3001      	adds	r0, #1
 800cb10:	d02b      	beq.n	800cb6a <_malloc_r+0xd2>
 800cb12:	6823      	ldr	r3, [r4, #0]
 800cb14:	442b      	add	r3, r5
 800cb16:	6023      	str	r3, [r4, #0]
 800cb18:	e00e      	b.n	800cb38 <_malloc_r+0xa0>
 800cb1a:	6822      	ldr	r2, [r4, #0]
 800cb1c:	1b52      	subs	r2, r2, r5
 800cb1e:	d41e      	bmi.n	800cb5e <_malloc_r+0xc6>
 800cb20:	2a0b      	cmp	r2, #11
 800cb22:	d916      	bls.n	800cb52 <_malloc_r+0xba>
 800cb24:	1961      	adds	r1, r4, r5
 800cb26:	42a3      	cmp	r3, r4
 800cb28:	6025      	str	r5, [r4, #0]
 800cb2a:	bf18      	it	ne
 800cb2c:	6059      	strne	r1, [r3, #4]
 800cb2e:	6863      	ldr	r3, [r4, #4]
 800cb30:	bf08      	it	eq
 800cb32:	6031      	streq	r1, [r6, #0]
 800cb34:	5162      	str	r2, [r4, r5]
 800cb36:	604b      	str	r3, [r1, #4]
 800cb38:	4638      	mov	r0, r7
 800cb3a:	f104 060b 	add.w	r6, r4, #11
 800cb3e:	f000 f855 	bl	800cbec <__malloc_unlock>
 800cb42:	f026 0607 	bic.w	r6, r6, #7
 800cb46:	1d23      	adds	r3, r4, #4
 800cb48:	1af2      	subs	r2, r6, r3
 800cb4a:	d0b6      	beq.n	800caba <_malloc_r+0x22>
 800cb4c:	1b9b      	subs	r3, r3, r6
 800cb4e:	50a3      	str	r3, [r4, r2]
 800cb50:	e7b3      	b.n	800caba <_malloc_r+0x22>
 800cb52:	6862      	ldr	r2, [r4, #4]
 800cb54:	42a3      	cmp	r3, r4
 800cb56:	bf0c      	ite	eq
 800cb58:	6032      	streq	r2, [r6, #0]
 800cb5a:	605a      	strne	r2, [r3, #4]
 800cb5c:	e7ec      	b.n	800cb38 <_malloc_r+0xa0>
 800cb5e:	4623      	mov	r3, r4
 800cb60:	6864      	ldr	r4, [r4, #4]
 800cb62:	e7b2      	b.n	800caca <_malloc_r+0x32>
 800cb64:	4634      	mov	r4, r6
 800cb66:	6876      	ldr	r6, [r6, #4]
 800cb68:	e7b9      	b.n	800cade <_malloc_r+0x46>
 800cb6a:	230c      	movs	r3, #12
 800cb6c:	603b      	str	r3, [r7, #0]
 800cb6e:	4638      	mov	r0, r7
 800cb70:	f000 f83c 	bl	800cbec <__malloc_unlock>
 800cb74:	e7a1      	b.n	800caba <_malloc_r+0x22>
 800cb76:	6025      	str	r5, [r4, #0]
 800cb78:	e7de      	b.n	800cb38 <_malloc_r+0xa0>
 800cb7a:	bf00      	nop
 800cb7c:	20005208 	.word	0x20005208

0800cb80 <_sbrk_r>:
 800cb80:	b538      	push	{r3, r4, r5, lr}
 800cb82:	4d06      	ldr	r5, [pc, #24]	; (800cb9c <_sbrk_r+0x1c>)
 800cb84:	2300      	movs	r3, #0
 800cb86:	4604      	mov	r4, r0
 800cb88:	4608      	mov	r0, r1
 800cb8a:	602b      	str	r3, [r5, #0]
 800cb8c:	f7f4 fab0 	bl	80010f0 <_sbrk>
 800cb90:	1c43      	adds	r3, r0, #1
 800cb92:	d102      	bne.n	800cb9a <_sbrk_r+0x1a>
 800cb94:	682b      	ldr	r3, [r5, #0]
 800cb96:	b103      	cbz	r3, 800cb9a <_sbrk_r+0x1a>
 800cb98:	6023      	str	r3, [r4, #0]
 800cb9a:	bd38      	pop	{r3, r4, r5, pc}
 800cb9c:	20005210 	.word	0x20005210

0800cba0 <siprintf>:
 800cba0:	b40e      	push	{r1, r2, r3}
 800cba2:	b500      	push	{lr}
 800cba4:	b09c      	sub	sp, #112	; 0x70
 800cba6:	ab1d      	add	r3, sp, #116	; 0x74
 800cba8:	9002      	str	r0, [sp, #8]
 800cbaa:	9006      	str	r0, [sp, #24]
 800cbac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cbb0:	4809      	ldr	r0, [pc, #36]	; (800cbd8 <siprintf+0x38>)
 800cbb2:	9107      	str	r1, [sp, #28]
 800cbb4:	9104      	str	r1, [sp, #16]
 800cbb6:	4909      	ldr	r1, [pc, #36]	; (800cbdc <siprintf+0x3c>)
 800cbb8:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbbc:	9105      	str	r1, [sp, #20]
 800cbbe:	6800      	ldr	r0, [r0, #0]
 800cbc0:	9301      	str	r3, [sp, #4]
 800cbc2:	a902      	add	r1, sp, #8
 800cbc4:	f000 f874 	bl	800ccb0 <_svfiprintf_r>
 800cbc8:	9b02      	ldr	r3, [sp, #8]
 800cbca:	2200      	movs	r2, #0
 800cbcc:	701a      	strb	r2, [r3, #0]
 800cbce:	b01c      	add	sp, #112	; 0x70
 800cbd0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cbd4:	b003      	add	sp, #12
 800cbd6:	4770      	bx	lr
 800cbd8:	20000030 	.word	0x20000030
 800cbdc:	ffff0208 	.word	0xffff0208

0800cbe0 <__malloc_lock>:
 800cbe0:	4801      	ldr	r0, [pc, #4]	; (800cbe8 <__malloc_lock+0x8>)
 800cbe2:	f000 baf9 	b.w	800d1d8 <__retarget_lock_acquire_recursive>
 800cbe6:	bf00      	nop
 800cbe8:	20005214 	.word	0x20005214

0800cbec <__malloc_unlock>:
 800cbec:	4801      	ldr	r0, [pc, #4]	; (800cbf4 <__malloc_unlock+0x8>)
 800cbee:	f000 baf4 	b.w	800d1da <__retarget_lock_release_recursive>
 800cbf2:	bf00      	nop
 800cbf4:	20005214 	.word	0x20005214

0800cbf8 <__ssputs_r>:
 800cbf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbfc:	688e      	ldr	r6, [r1, #8]
 800cbfe:	429e      	cmp	r6, r3
 800cc00:	4682      	mov	sl, r0
 800cc02:	460c      	mov	r4, r1
 800cc04:	4690      	mov	r8, r2
 800cc06:	461f      	mov	r7, r3
 800cc08:	d838      	bhi.n	800cc7c <__ssputs_r+0x84>
 800cc0a:	898a      	ldrh	r2, [r1, #12]
 800cc0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cc10:	d032      	beq.n	800cc78 <__ssputs_r+0x80>
 800cc12:	6825      	ldr	r5, [r4, #0]
 800cc14:	6909      	ldr	r1, [r1, #16]
 800cc16:	eba5 0901 	sub.w	r9, r5, r1
 800cc1a:	6965      	ldr	r5, [r4, #20]
 800cc1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cc20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cc24:	3301      	adds	r3, #1
 800cc26:	444b      	add	r3, r9
 800cc28:	106d      	asrs	r5, r5, #1
 800cc2a:	429d      	cmp	r5, r3
 800cc2c:	bf38      	it	cc
 800cc2e:	461d      	movcc	r5, r3
 800cc30:	0553      	lsls	r3, r2, #21
 800cc32:	d531      	bpl.n	800cc98 <__ssputs_r+0xa0>
 800cc34:	4629      	mov	r1, r5
 800cc36:	f7ff ff2f 	bl	800ca98 <_malloc_r>
 800cc3a:	4606      	mov	r6, r0
 800cc3c:	b950      	cbnz	r0, 800cc54 <__ssputs_r+0x5c>
 800cc3e:	230c      	movs	r3, #12
 800cc40:	f8ca 3000 	str.w	r3, [sl]
 800cc44:	89a3      	ldrh	r3, [r4, #12]
 800cc46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc4a:	81a3      	strh	r3, [r4, #12]
 800cc4c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc54:	6921      	ldr	r1, [r4, #16]
 800cc56:	464a      	mov	r2, r9
 800cc58:	f7ff fe9c 	bl	800c994 <memcpy>
 800cc5c:	89a3      	ldrh	r3, [r4, #12]
 800cc5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cc62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc66:	81a3      	strh	r3, [r4, #12]
 800cc68:	6126      	str	r6, [r4, #16]
 800cc6a:	6165      	str	r5, [r4, #20]
 800cc6c:	444e      	add	r6, r9
 800cc6e:	eba5 0509 	sub.w	r5, r5, r9
 800cc72:	6026      	str	r6, [r4, #0]
 800cc74:	60a5      	str	r5, [r4, #8]
 800cc76:	463e      	mov	r6, r7
 800cc78:	42be      	cmp	r6, r7
 800cc7a:	d900      	bls.n	800cc7e <__ssputs_r+0x86>
 800cc7c:	463e      	mov	r6, r7
 800cc7e:	6820      	ldr	r0, [r4, #0]
 800cc80:	4632      	mov	r2, r6
 800cc82:	4641      	mov	r1, r8
 800cc84:	f000 faaa 	bl	800d1dc <memmove>
 800cc88:	68a3      	ldr	r3, [r4, #8]
 800cc8a:	1b9b      	subs	r3, r3, r6
 800cc8c:	60a3      	str	r3, [r4, #8]
 800cc8e:	6823      	ldr	r3, [r4, #0]
 800cc90:	4433      	add	r3, r6
 800cc92:	6023      	str	r3, [r4, #0]
 800cc94:	2000      	movs	r0, #0
 800cc96:	e7db      	b.n	800cc50 <__ssputs_r+0x58>
 800cc98:	462a      	mov	r2, r5
 800cc9a:	f000 fab9 	bl	800d210 <_realloc_r>
 800cc9e:	4606      	mov	r6, r0
 800cca0:	2800      	cmp	r0, #0
 800cca2:	d1e1      	bne.n	800cc68 <__ssputs_r+0x70>
 800cca4:	6921      	ldr	r1, [r4, #16]
 800cca6:	4650      	mov	r0, sl
 800cca8:	f7ff fe8a 	bl	800c9c0 <_free_r>
 800ccac:	e7c7      	b.n	800cc3e <__ssputs_r+0x46>
	...

0800ccb0 <_svfiprintf_r>:
 800ccb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccb4:	4698      	mov	r8, r3
 800ccb6:	898b      	ldrh	r3, [r1, #12]
 800ccb8:	061b      	lsls	r3, r3, #24
 800ccba:	b09d      	sub	sp, #116	; 0x74
 800ccbc:	4607      	mov	r7, r0
 800ccbe:	460d      	mov	r5, r1
 800ccc0:	4614      	mov	r4, r2
 800ccc2:	d50e      	bpl.n	800cce2 <_svfiprintf_r+0x32>
 800ccc4:	690b      	ldr	r3, [r1, #16]
 800ccc6:	b963      	cbnz	r3, 800cce2 <_svfiprintf_r+0x32>
 800ccc8:	2140      	movs	r1, #64	; 0x40
 800ccca:	f7ff fee5 	bl	800ca98 <_malloc_r>
 800ccce:	6028      	str	r0, [r5, #0]
 800ccd0:	6128      	str	r0, [r5, #16]
 800ccd2:	b920      	cbnz	r0, 800ccde <_svfiprintf_r+0x2e>
 800ccd4:	230c      	movs	r3, #12
 800ccd6:	603b      	str	r3, [r7, #0]
 800ccd8:	f04f 30ff 	mov.w	r0, #4294967295
 800ccdc:	e0d1      	b.n	800ce82 <_svfiprintf_r+0x1d2>
 800ccde:	2340      	movs	r3, #64	; 0x40
 800cce0:	616b      	str	r3, [r5, #20]
 800cce2:	2300      	movs	r3, #0
 800cce4:	9309      	str	r3, [sp, #36]	; 0x24
 800cce6:	2320      	movs	r3, #32
 800cce8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ccec:	f8cd 800c 	str.w	r8, [sp, #12]
 800ccf0:	2330      	movs	r3, #48	; 0x30
 800ccf2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ce9c <_svfiprintf_r+0x1ec>
 800ccf6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ccfa:	f04f 0901 	mov.w	r9, #1
 800ccfe:	4623      	mov	r3, r4
 800cd00:	469a      	mov	sl, r3
 800cd02:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd06:	b10a      	cbz	r2, 800cd0c <_svfiprintf_r+0x5c>
 800cd08:	2a25      	cmp	r2, #37	; 0x25
 800cd0a:	d1f9      	bne.n	800cd00 <_svfiprintf_r+0x50>
 800cd0c:	ebba 0b04 	subs.w	fp, sl, r4
 800cd10:	d00b      	beq.n	800cd2a <_svfiprintf_r+0x7a>
 800cd12:	465b      	mov	r3, fp
 800cd14:	4622      	mov	r2, r4
 800cd16:	4629      	mov	r1, r5
 800cd18:	4638      	mov	r0, r7
 800cd1a:	f7ff ff6d 	bl	800cbf8 <__ssputs_r>
 800cd1e:	3001      	adds	r0, #1
 800cd20:	f000 80aa 	beq.w	800ce78 <_svfiprintf_r+0x1c8>
 800cd24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd26:	445a      	add	r2, fp
 800cd28:	9209      	str	r2, [sp, #36]	; 0x24
 800cd2a:	f89a 3000 	ldrb.w	r3, [sl]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	f000 80a2 	beq.w	800ce78 <_svfiprintf_r+0x1c8>
 800cd34:	2300      	movs	r3, #0
 800cd36:	f04f 32ff 	mov.w	r2, #4294967295
 800cd3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd3e:	f10a 0a01 	add.w	sl, sl, #1
 800cd42:	9304      	str	r3, [sp, #16]
 800cd44:	9307      	str	r3, [sp, #28]
 800cd46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd4a:	931a      	str	r3, [sp, #104]	; 0x68
 800cd4c:	4654      	mov	r4, sl
 800cd4e:	2205      	movs	r2, #5
 800cd50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd54:	4851      	ldr	r0, [pc, #324]	; (800ce9c <_svfiprintf_r+0x1ec>)
 800cd56:	f7f3 fa3b 	bl	80001d0 <memchr>
 800cd5a:	9a04      	ldr	r2, [sp, #16]
 800cd5c:	b9d8      	cbnz	r0, 800cd96 <_svfiprintf_r+0xe6>
 800cd5e:	06d0      	lsls	r0, r2, #27
 800cd60:	bf44      	itt	mi
 800cd62:	2320      	movmi	r3, #32
 800cd64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd68:	0711      	lsls	r1, r2, #28
 800cd6a:	bf44      	itt	mi
 800cd6c:	232b      	movmi	r3, #43	; 0x2b
 800cd6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd72:	f89a 3000 	ldrb.w	r3, [sl]
 800cd76:	2b2a      	cmp	r3, #42	; 0x2a
 800cd78:	d015      	beq.n	800cda6 <_svfiprintf_r+0xf6>
 800cd7a:	9a07      	ldr	r2, [sp, #28]
 800cd7c:	4654      	mov	r4, sl
 800cd7e:	2000      	movs	r0, #0
 800cd80:	f04f 0c0a 	mov.w	ip, #10
 800cd84:	4621      	mov	r1, r4
 800cd86:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd8a:	3b30      	subs	r3, #48	; 0x30
 800cd8c:	2b09      	cmp	r3, #9
 800cd8e:	d94e      	bls.n	800ce2e <_svfiprintf_r+0x17e>
 800cd90:	b1b0      	cbz	r0, 800cdc0 <_svfiprintf_r+0x110>
 800cd92:	9207      	str	r2, [sp, #28]
 800cd94:	e014      	b.n	800cdc0 <_svfiprintf_r+0x110>
 800cd96:	eba0 0308 	sub.w	r3, r0, r8
 800cd9a:	fa09 f303 	lsl.w	r3, r9, r3
 800cd9e:	4313      	orrs	r3, r2
 800cda0:	9304      	str	r3, [sp, #16]
 800cda2:	46a2      	mov	sl, r4
 800cda4:	e7d2      	b.n	800cd4c <_svfiprintf_r+0x9c>
 800cda6:	9b03      	ldr	r3, [sp, #12]
 800cda8:	1d19      	adds	r1, r3, #4
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	9103      	str	r1, [sp, #12]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	bfbb      	ittet	lt
 800cdb2:	425b      	neglt	r3, r3
 800cdb4:	f042 0202 	orrlt.w	r2, r2, #2
 800cdb8:	9307      	strge	r3, [sp, #28]
 800cdba:	9307      	strlt	r3, [sp, #28]
 800cdbc:	bfb8      	it	lt
 800cdbe:	9204      	strlt	r2, [sp, #16]
 800cdc0:	7823      	ldrb	r3, [r4, #0]
 800cdc2:	2b2e      	cmp	r3, #46	; 0x2e
 800cdc4:	d10c      	bne.n	800cde0 <_svfiprintf_r+0x130>
 800cdc6:	7863      	ldrb	r3, [r4, #1]
 800cdc8:	2b2a      	cmp	r3, #42	; 0x2a
 800cdca:	d135      	bne.n	800ce38 <_svfiprintf_r+0x188>
 800cdcc:	9b03      	ldr	r3, [sp, #12]
 800cdce:	1d1a      	adds	r2, r3, #4
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	9203      	str	r2, [sp, #12]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	bfb8      	it	lt
 800cdd8:	f04f 33ff 	movlt.w	r3, #4294967295
 800cddc:	3402      	adds	r4, #2
 800cdde:	9305      	str	r3, [sp, #20]
 800cde0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ceac <_svfiprintf_r+0x1fc>
 800cde4:	7821      	ldrb	r1, [r4, #0]
 800cde6:	2203      	movs	r2, #3
 800cde8:	4650      	mov	r0, sl
 800cdea:	f7f3 f9f1 	bl	80001d0 <memchr>
 800cdee:	b140      	cbz	r0, 800ce02 <_svfiprintf_r+0x152>
 800cdf0:	2340      	movs	r3, #64	; 0x40
 800cdf2:	eba0 000a 	sub.w	r0, r0, sl
 800cdf6:	fa03 f000 	lsl.w	r0, r3, r0
 800cdfa:	9b04      	ldr	r3, [sp, #16]
 800cdfc:	4303      	orrs	r3, r0
 800cdfe:	3401      	adds	r4, #1
 800ce00:	9304      	str	r3, [sp, #16]
 800ce02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce06:	4826      	ldr	r0, [pc, #152]	; (800cea0 <_svfiprintf_r+0x1f0>)
 800ce08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce0c:	2206      	movs	r2, #6
 800ce0e:	f7f3 f9df 	bl	80001d0 <memchr>
 800ce12:	2800      	cmp	r0, #0
 800ce14:	d038      	beq.n	800ce88 <_svfiprintf_r+0x1d8>
 800ce16:	4b23      	ldr	r3, [pc, #140]	; (800cea4 <_svfiprintf_r+0x1f4>)
 800ce18:	bb1b      	cbnz	r3, 800ce62 <_svfiprintf_r+0x1b2>
 800ce1a:	9b03      	ldr	r3, [sp, #12]
 800ce1c:	3307      	adds	r3, #7
 800ce1e:	f023 0307 	bic.w	r3, r3, #7
 800ce22:	3308      	adds	r3, #8
 800ce24:	9303      	str	r3, [sp, #12]
 800ce26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce28:	4433      	add	r3, r6
 800ce2a:	9309      	str	r3, [sp, #36]	; 0x24
 800ce2c:	e767      	b.n	800ccfe <_svfiprintf_r+0x4e>
 800ce2e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce32:	460c      	mov	r4, r1
 800ce34:	2001      	movs	r0, #1
 800ce36:	e7a5      	b.n	800cd84 <_svfiprintf_r+0xd4>
 800ce38:	2300      	movs	r3, #0
 800ce3a:	3401      	adds	r4, #1
 800ce3c:	9305      	str	r3, [sp, #20]
 800ce3e:	4619      	mov	r1, r3
 800ce40:	f04f 0c0a 	mov.w	ip, #10
 800ce44:	4620      	mov	r0, r4
 800ce46:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce4a:	3a30      	subs	r2, #48	; 0x30
 800ce4c:	2a09      	cmp	r2, #9
 800ce4e:	d903      	bls.n	800ce58 <_svfiprintf_r+0x1a8>
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d0c5      	beq.n	800cde0 <_svfiprintf_r+0x130>
 800ce54:	9105      	str	r1, [sp, #20]
 800ce56:	e7c3      	b.n	800cde0 <_svfiprintf_r+0x130>
 800ce58:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce5c:	4604      	mov	r4, r0
 800ce5e:	2301      	movs	r3, #1
 800ce60:	e7f0      	b.n	800ce44 <_svfiprintf_r+0x194>
 800ce62:	ab03      	add	r3, sp, #12
 800ce64:	9300      	str	r3, [sp, #0]
 800ce66:	462a      	mov	r2, r5
 800ce68:	4b0f      	ldr	r3, [pc, #60]	; (800cea8 <_svfiprintf_r+0x1f8>)
 800ce6a:	a904      	add	r1, sp, #16
 800ce6c:	4638      	mov	r0, r7
 800ce6e:	f3af 8000 	nop.w
 800ce72:	1c42      	adds	r2, r0, #1
 800ce74:	4606      	mov	r6, r0
 800ce76:	d1d6      	bne.n	800ce26 <_svfiprintf_r+0x176>
 800ce78:	89ab      	ldrh	r3, [r5, #12]
 800ce7a:	065b      	lsls	r3, r3, #25
 800ce7c:	f53f af2c 	bmi.w	800ccd8 <_svfiprintf_r+0x28>
 800ce80:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce82:	b01d      	add	sp, #116	; 0x74
 800ce84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce88:	ab03      	add	r3, sp, #12
 800ce8a:	9300      	str	r3, [sp, #0]
 800ce8c:	462a      	mov	r2, r5
 800ce8e:	4b06      	ldr	r3, [pc, #24]	; (800cea8 <_svfiprintf_r+0x1f8>)
 800ce90:	a904      	add	r1, sp, #16
 800ce92:	4638      	mov	r0, r7
 800ce94:	f000 f87a 	bl	800cf8c <_printf_i>
 800ce98:	e7eb      	b.n	800ce72 <_svfiprintf_r+0x1c2>
 800ce9a:	bf00      	nop
 800ce9c:	0800d36c 	.word	0x0800d36c
 800cea0:	0800d376 	.word	0x0800d376
 800cea4:	00000000 	.word	0x00000000
 800cea8:	0800cbf9 	.word	0x0800cbf9
 800ceac:	0800d372 	.word	0x0800d372

0800ceb0 <_printf_common>:
 800ceb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ceb4:	4616      	mov	r6, r2
 800ceb6:	4699      	mov	r9, r3
 800ceb8:	688a      	ldr	r2, [r1, #8]
 800ceba:	690b      	ldr	r3, [r1, #16]
 800cebc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cec0:	4293      	cmp	r3, r2
 800cec2:	bfb8      	it	lt
 800cec4:	4613      	movlt	r3, r2
 800cec6:	6033      	str	r3, [r6, #0]
 800cec8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cecc:	4607      	mov	r7, r0
 800cece:	460c      	mov	r4, r1
 800ced0:	b10a      	cbz	r2, 800ced6 <_printf_common+0x26>
 800ced2:	3301      	adds	r3, #1
 800ced4:	6033      	str	r3, [r6, #0]
 800ced6:	6823      	ldr	r3, [r4, #0]
 800ced8:	0699      	lsls	r1, r3, #26
 800ceda:	bf42      	ittt	mi
 800cedc:	6833      	ldrmi	r3, [r6, #0]
 800cede:	3302      	addmi	r3, #2
 800cee0:	6033      	strmi	r3, [r6, #0]
 800cee2:	6825      	ldr	r5, [r4, #0]
 800cee4:	f015 0506 	ands.w	r5, r5, #6
 800cee8:	d106      	bne.n	800cef8 <_printf_common+0x48>
 800ceea:	f104 0a19 	add.w	sl, r4, #25
 800ceee:	68e3      	ldr	r3, [r4, #12]
 800cef0:	6832      	ldr	r2, [r6, #0]
 800cef2:	1a9b      	subs	r3, r3, r2
 800cef4:	42ab      	cmp	r3, r5
 800cef6:	dc26      	bgt.n	800cf46 <_printf_common+0x96>
 800cef8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cefc:	1e13      	subs	r3, r2, #0
 800cefe:	6822      	ldr	r2, [r4, #0]
 800cf00:	bf18      	it	ne
 800cf02:	2301      	movne	r3, #1
 800cf04:	0692      	lsls	r2, r2, #26
 800cf06:	d42b      	bmi.n	800cf60 <_printf_common+0xb0>
 800cf08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cf0c:	4649      	mov	r1, r9
 800cf0e:	4638      	mov	r0, r7
 800cf10:	47c0      	blx	r8
 800cf12:	3001      	adds	r0, #1
 800cf14:	d01e      	beq.n	800cf54 <_printf_common+0xa4>
 800cf16:	6823      	ldr	r3, [r4, #0]
 800cf18:	68e5      	ldr	r5, [r4, #12]
 800cf1a:	6832      	ldr	r2, [r6, #0]
 800cf1c:	f003 0306 	and.w	r3, r3, #6
 800cf20:	2b04      	cmp	r3, #4
 800cf22:	bf08      	it	eq
 800cf24:	1aad      	subeq	r5, r5, r2
 800cf26:	68a3      	ldr	r3, [r4, #8]
 800cf28:	6922      	ldr	r2, [r4, #16]
 800cf2a:	bf0c      	ite	eq
 800cf2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cf30:	2500      	movne	r5, #0
 800cf32:	4293      	cmp	r3, r2
 800cf34:	bfc4      	itt	gt
 800cf36:	1a9b      	subgt	r3, r3, r2
 800cf38:	18ed      	addgt	r5, r5, r3
 800cf3a:	2600      	movs	r6, #0
 800cf3c:	341a      	adds	r4, #26
 800cf3e:	42b5      	cmp	r5, r6
 800cf40:	d11a      	bne.n	800cf78 <_printf_common+0xc8>
 800cf42:	2000      	movs	r0, #0
 800cf44:	e008      	b.n	800cf58 <_printf_common+0xa8>
 800cf46:	2301      	movs	r3, #1
 800cf48:	4652      	mov	r2, sl
 800cf4a:	4649      	mov	r1, r9
 800cf4c:	4638      	mov	r0, r7
 800cf4e:	47c0      	blx	r8
 800cf50:	3001      	adds	r0, #1
 800cf52:	d103      	bne.n	800cf5c <_printf_common+0xac>
 800cf54:	f04f 30ff 	mov.w	r0, #4294967295
 800cf58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf5c:	3501      	adds	r5, #1
 800cf5e:	e7c6      	b.n	800ceee <_printf_common+0x3e>
 800cf60:	18e1      	adds	r1, r4, r3
 800cf62:	1c5a      	adds	r2, r3, #1
 800cf64:	2030      	movs	r0, #48	; 0x30
 800cf66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cf6a:	4422      	add	r2, r4
 800cf6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cf70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cf74:	3302      	adds	r3, #2
 800cf76:	e7c7      	b.n	800cf08 <_printf_common+0x58>
 800cf78:	2301      	movs	r3, #1
 800cf7a:	4622      	mov	r2, r4
 800cf7c:	4649      	mov	r1, r9
 800cf7e:	4638      	mov	r0, r7
 800cf80:	47c0      	blx	r8
 800cf82:	3001      	adds	r0, #1
 800cf84:	d0e6      	beq.n	800cf54 <_printf_common+0xa4>
 800cf86:	3601      	adds	r6, #1
 800cf88:	e7d9      	b.n	800cf3e <_printf_common+0x8e>
	...

0800cf8c <_printf_i>:
 800cf8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cf90:	7e0f      	ldrb	r7, [r1, #24]
 800cf92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cf94:	2f78      	cmp	r7, #120	; 0x78
 800cf96:	4691      	mov	r9, r2
 800cf98:	4680      	mov	r8, r0
 800cf9a:	460c      	mov	r4, r1
 800cf9c:	469a      	mov	sl, r3
 800cf9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cfa2:	d807      	bhi.n	800cfb4 <_printf_i+0x28>
 800cfa4:	2f62      	cmp	r7, #98	; 0x62
 800cfa6:	d80a      	bhi.n	800cfbe <_printf_i+0x32>
 800cfa8:	2f00      	cmp	r7, #0
 800cfaa:	f000 80d8 	beq.w	800d15e <_printf_i+0x1d2>
 800cfae:	2f58      	cmp	r7, #88	; 0x58
 800cfb0:	f000 80a3 	beq.w	800d0fa <_printf_i+0x16e>
 800cfb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cfb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cfbc:	e03a      	b.n	800d034 <_printf_i+0xa8>
 800cfbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cfc2:	2b15      	cmp	r3, #21
 800cfc4:	d8f6      	bhi.n	800cfb4 <_printf_i+0x28>
 800cfc6:	a101      	add	r1, pc, #4	; (adr r1, 800cfcc <_printf_i+0x40>)
 800cfc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cfcc:	0800d025 	.word	0x0800d025
 800cfd0:	0800d039 	.word	0x0800d039
 800cfd4:	0800cfb5 	.word	0x0800cfb5
 800cfd8:	0800cfb5 	.word	0x0800cfb5
 800cfdc:	0800cfb5 	.word	0x0800cfb5
 800cfe0:	0800cfb5 	.word	0x0800cfb5
 800cfe4:	0800d039 	.word	0x0800d039
 800cfe8:	0800cfb5 	.word	0x0800cfb5
 800cfec:	0800cfb5 	.word	0x0800cfb5
 800cff0:	0800cfb5 	.word	0x0800cfb5
 800cff4:	0800cfb5 	.word	0x0800cfb5
 800cff8:	0800d145 	.word	0x0800d145
 800cffc:	0800d069 	.word	0x0800d069
 800d000:	0800d127 	.word	0x0800d127
 800d004:	0800cfb5 	.word	0x0800cfb5
 800d008:	0800cfb5 	.word	0x0800cfb5
 800d00c:	0800d167 	.word	0x0800d167
 800d010:	0800cfb5 	.word	0x0800cfb5
 800d014:	0800d069 	.word	0x0800d069
 800d018:	0800cfb5 	.word	0x0800cfb5
 800d01c:	0800cfb5 	.word	0x0800cfb5
 800d020:	0800d12f 	.word	0x0800d12f
 800d024:	682b      	ldr	r3, [r5, #0]
 800d026:	1d1a      	adds	r2, r3, #4
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	602a      	str	r2, [r5, #0]
 800d02c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d030:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d034:	2301      	movs	r3, #1
 800d036:	e0a3      	b.n	800d180 <_printf_i+0x1f4>
 800d038:	6820      	ldr	r0, [r4, #0]
 800d03a:	6829      	ldr	r1, [r5, #0]
 800d03c:	0606      	lsls	r6, r0, #24
 800d03e:	f101 0304 	add.w	r3, r1, #4
 800d042:	d50a      	bpl.n	800d05a <_printf_i+0xce>
 800d044:	680e      	ldr	r6, [r1, #0]
 800d046:	602b      	str	r3, [r5, #0]
 800d048:	2e00      	cmp	r6, #0
 800d04a:	da03      	bge.n	800d054 <_printf_i+0xc8>
 800d04c:	232d      	movs	r3, #45	; 0x2d
 800d04e:	4276      	negs	r6, r6
 800d050:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d054:	485e      	ldr	r0, [pc, #376]	; (800d1d0 <_printf_i+0x244>)
 800d056:	230a      	movs	r3, #10
 800d058:	e019      	b.n	800d08e <_printf_i+0x102>
 800d05a:	680e      	ldr	r6, [r1, #0]
 800d05c:	602b      	str	r3, [r5, #0]
 800d05e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d062:	bf18      	it	ne
 800d064:	b236      	sxthne	r6, r6
 800d066:	e7ef      	b.n	800d048 <_printf_i+0xbc>
 800d068:	682b      	ldr	r3, [r5, #0]
 800d06a:	6820      	ldr	r0, [r4, #0]
 800d06c:	1d19      	adds	r1, r3, #4
 800d06e:	6029      	str	r1, [r5, #0]
 800d070:	0601      	lsls	r1, r0, #24
 800d072:	d501      	bpl.n	800d078 <_printf_i+0xec>
 800d074:	681e      	ldr	r6, [r3, #0]
 800d076:	e002      	b.n	800d07e <_printf_i+0xf2>
 800d078:	0646      	lsls	r6, r0, #25
 800d07a:	d5fb      	bpl.n	800d074 <_printf_i+0xe8>
 800d07c:	881e      	ldrh	r6, [r3, #0]
 800d07e:	4854      	ldr	r0, [pc, #336]	; (800d1d0 <_printf_i+0x244>)
 800d080:	2f6f      	cmp	r7, #111	; 0x6f
 800d082:	bf0c      	ite	eq
 800d084:	2308      	moveq	r3, #8
 800d086:	230a      	movne	r3, #10
 800d088:	2100      	movs	r1, #0
 800d08a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d08e:	6865      	ldr	r5, [r4, #4]
 800d090:	60a5      	str	r5, [r4, #8]
 800d092:	2d00      	cmp	r5, #0
 800d094:	bfa2      	ittt	ge
 800d096:	6821      	ldrge	r1, [r4, #0]
 800d098:	f021 0104 	bicge.w	r1, r1, #4
 800d09c:	6021      	strge	r1, [r4, #0]
 800d09e:	b90e      	cbnz	r6, 800d0a4 <_printf_i+0x118>
 800d0a0:	2d00      	cmp	r5, #0
 800d0a2:	d04d      	beq.n	800d140 <_printf_i+0x1b4>
 800d0a4:	4615      	mov	r5, r2
 800d0a6:	fbb6 f1f3 	udiv	r1, r6, r3
 800d0aa:	fb03 6711 	mls	r7, r3, r1, r6
 800d0ae:	5dc7      	ldrb	r7, [r0, r7]
 800d0b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d0b4:	4637      	mov	r7, r6
 800d0b6:	42bb      	cmp	r3, r7
 800d0b8:	460e      	mov	r6, r1
 800d0ba:	d9f4      	bls.n	800d0a6 <_printf_i+0x11a>
 800d0bc:	2b08      	cmp	r3, #8
 800d0be:	d10b      	bne.n	800d0d8 <_printf_i+0x14c>
 800d0c0:	6823      	ldr	r3, [r4, #0]
 800d0c2:	07de      	lsls	r6, r3, #31
 800d0c4:	d508      	bpl.n	800d0d8 <_printf_i+0x14c>
 800d0c6:	6923      	ldr	r3, [r4, #16]
 800d0c8:	6861      	ldr	r1, [r4, #4]
 800d0ca:	4299      	cmp	r1, r3
 800d0cc:	bfde      	ittt	le
 800d0ce:	2330      	movle	r3, #48	; 0x30
 800d0d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d0d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d0d8:	1b52      	subs	r2, r2, r5
 800d0da:	6122      	str	r2, [r4, #16]
 800d0dc:	f8cd a000 	str.w	sl, [sp]
 800d0e0:	464b      	mov	r3, r9
 800d0e2:	aa03      	add	r2, sp, #12
 800d0e4:	4621      	mov	r1, r4
 800d0e6:	4640      	mov	r0, r8
 800d0e8:	f7ff fee2 	bl	800ceb0 <_printf_common>
 800d0ec:	3001      	adds	r0, #1
 800d0ee:	d14c      	bne.n	800d18a <_printf_i+0x1fe>
 800d0f0:	f04f 30ff 	mov.w	r0, #4294967295
 800d0f4:	b004      	add	sp, #16
 800d0f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0fa:	4835      	ldr	r0, [pc, #212]	; (800d1d0 <_printf_i+0x244>)
 800d0fc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d100:	6829      	ldr	r1, [r5, #0]
 800d102:	6823      	ldr	r3, [r4, #0]
 800d104:	f851 6b04 	ldr.w	r6, [r1], #4
 800d108:	6029      	str	r1, [r5, #0]
 800d10a:	061d      	lsls	r5, r3, #24
 800d10c:	d514      	bpl.n	800d138 <_printf_i+0x1ac>
 800d10e:	07df      	lsls	r7, r3, #31
 800d110:	bf44      	itt	mi
 800d112:	f043 0320 	orrmi.w	r3, r3, #32
 800d116:	6023      	strmi	r3, [r4, #0]
 800d118:	b91e      	cbnz	r6, 800d122 <_printf_i+0x196>
 800d11a:	6823      	ldr	r3, [r4, #0]
 800d11c:	f023 0320 	bic.w	r3, r3, #32
 800d120:	6023      	str	r3, [r4, #0]
 800d122:	2310      	movs	r3, #16
 800d124:	e7b0      	b.n	800d088 <_printf_i+0xfc>
 800d126:	6823      	ldr	r3, [r4, #0]
 800d128:	f043 0320 	orr.w	r3, r3, #32
 800d12c:	6023      	str	r3, [r4, #0]
 800d12e:	2378      	movs	r3, #120	; 0x78
 800d130:	4828      	ldr	r0, [pc, #160]	; (800d1d4 <_printf_i+0x248>)
 800d132:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d136:	e7e3      	b.n	800d100 <_printf_i+0x174>
 800d138:	0659      	lsls	r1, r3, #25
 800d13a:	bf48      	it	mi
 800d13c:	b2b6      	uxthmi	r6, r6
 800d13e:	e7e6      	b.n	800d10e <_printf_i+0x182>
 800d140:	4615      	mov	r5, r2
 800d142:	e7bb      	b.n	800d0bc <_printf_i+0x130>
 800d144:	682b      	ldr	r3, [r5, #0]
 800d146:	6826      	ldr	r6, [r4, #0]
 800d148:	6961      	ldr	r1, [r4, #20]
 800d14a:	1d18      	adds	r0, r3, #4
 800d14c:	6028      	str	r0, [r5, #0]
 800d14e:	0635      	lsls	r5, r6, #24
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	d501      	bpl.n	800d158 <_printf_i+0x1cc>
 800d154:	6019      	str	r1, [r3, #0]
 800d156:	e002      	b.n	800d15e <_printf_i+0x1d2>
 800d158:	0670      	lsls	r0, r6, #25
 800d15a:	d5fb      	bpl.n	800d154 <_printf_i+0x1c8>
 800d15c:	8019      	strh	r1, [r3, #0]
 800d15e:	2300      	movs	r3, #0
 800d160:	6123      	str	r3, [r4, #16]
 800d162:	4615      	mov	r5, r2
 800d164:	e7ba      	b.n	800d0dc <_printf_i+0x150>
 800d166:	682b      	ldr	r3, [r5, #0]
 800d168:	1d1a      	adds	r2, r3, #4
 800d16a:	602a      	str	r2, [r5, #0]
 800d16c:	681d      	ldr	r5, [r3, #0]
 800d16e:	6862      	ldr	r2, [r4, #4]
 800d170:	2100      	movs	r1, #0
 800d172:	4628      	mov	r0, r5
 800d174:	f7f3 f82c 	bl	80001d0 <memchr>
 800d178:	b108      	cbz	r0, 800d17e <_printf_i+0x1f2>
 800d17a:	1b40      	subs	r0, r0, r5
 800d17c:	6060      	str	r0, [r4, #4]
 800d17e:	6863      	ldr	r3, [r4, #4]
 800d180:	6123      	str	r3, [r4, #16]
 800d182:	2300      	movs	r3, #0
 800d184:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d188:	e7a8      	b.n	800d0dc <_printf_i+0x150>
 800d18a:	6923      	ldr	r3, [r4, #16]
 800d18c:	462a      	mov	r2, r5
 800d18e:	4649      	mov	r1, r9
 800d190:	4640      	mov	r0, r8
 800d192:	47d0      	blx	sl
 800d194:	3001      	adds	r0, #1
 800d196:	d0ab      	beq.n	800d0f0 <_printf_i+0x164>
 800d198:	6823      	ldr	r3, [r4, #0]
 800d19a:	079b      	lsls	r3, r3, #30
 800d19c:	d413      	bmi.n	800d1c6 <_printf_i+0x23a>
 800d19e:	68e0      	ldr	r0, [r4, #12]
 800d1a0:	9b03      	ldr	r3, [sp, #12]
 800d1a2:	4298      	cmp	r0, r3
 800d1a4:	bfb8      	it	lt
 800d1a6:	4618      	movlt	r0, r3
 800d1a8:	e7a4      	b.n	800d0f4 <_printf_i+0x168>
 800d1aa:	2301      	movs	r3, #1
 800d1ac:	4632      	mov	r2, r6
 800d1ae:	4649      	mov	r1, r9
 800d1b0:	4640      	mov	r0, r8
 800d1b2:	47d0      	blx	sl
 800d1b4:	3001      	adds	r0, #1
 800d1b6:	d09b      	beq.n	800d0f0 <_printf_i+0x164>
 800d1b8:	3501      	adds	r5, #1
 800d1ba:	68e3      	ldr	r3, [r4, #12]
 800d1bc:	9903      	ldr	r1, [sp, #12]
 800d1be:	1a5b      	subs	r3, r3, r1
 800d1c0:	42ab      	cmp	r3, r5
 800d1c2:	dcf2      	bgt.n	800d1aa <_printf_i+0x21e>
 800d1c4:	e7eb      	b.n	800d19e <_printf_i+0x212>
 800d1c6:	2500      	movs	r5, #0
 800d1c8:	f104 0619 	add.w	r6, r4, #25
 800d1cc:	e7f5      	b.n	800d1ba <_printf_i+0x22e>
 800d1ce:	bf00      	nop
 800d1d0:	0800d37d 	.word	0x0800d37d
 800d1d4:	0800d38e 	.word	0x0800d38e

0800d1d8 <__retarget_lock_acquire_recursive>:
 800d1d8:	4770      	bx	lr

0800d1da <__retarget_lock_release_recursive>:
 800d1da:	4770      	bx	lr

0800d1dc <memmove>:
 800d1dc:	4288      	cmp	r0, r1
 800d1de:	b510      	push	{r4, lr}
 800d1e0:	eb01 0402 	add.w	r4, r1, r2
 800d1e4:	d902      	bls.n	800d1ec <memmove+0x10>
 800d1e6:	4284      	cmp	r4, r0
 800d1e8:	4623      	mov	r3, r4
 800d1ea:	d807      	bhi.n	800d1fc <memmove+0x20>
 800d1ec:	1e43      	subs	r3, r0, #1
 800d1ee:	42a1      	cmp	r1, r4
 800d1f0:	d008      	beq.n	800d204 <memmove+0x28>
 800d1f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d1f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d1fa:	e7f8      	b.n	800d1ee <memmove+0x12>
 800d1fc:	4402      	add	r2, r0
 800d1fe:	4601      	mov	r1, r0
 800d200:	428a      	cmp	r2, r1
 800d202:	d100      	bne.n	800d206 <memmove+0x2a>
 800d204:	bd10      	pop	{r4, pc}
 800d206:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d20a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d20e:	e7f7      	b.n	800d200 <memmove+0x24>

0800d210 <_realloc_r>:
 800d210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d214:	4680      	mov	r8, r0
 800d216:	4614      	mov	r4, r2
 800d218:	460e      	mov	r6, r1
 800d21a:	b921      	cbnz	r1, 800d226 <_realloc_r+0x16>
 800d21c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d220:	4611      	mov	r1, r2
 800d222:	f7ff bc39 	b.w	800ca98 <_malloc_r>
 800d226:	b92a      	cbnz	r2, 800d234 <_realloc_r+0x24>
 800d228:	f7ff fbca 	bl	800c9c0 <_free_r>
 800d22c:	4625      	mov	r5, r4
 800d22e:	4628      	mov	r0, r5
 800d230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d234:	f000 f81b 	bl	800d26e <_malloc_usable_size_r>
 800d238:	4284      	cmp	r4, r0
 800d23a:	4607      	mov	r7, r0
 800d23c:	d802      	bhi.n	800d244 <_realloc_r+0x34>
 800d23e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d242:	d812      	bhi.n	800d26a <_realloc_r+0x5a>
 800d244:	4621      	mov	r1, r4
 800d246:	4640      	mov	r0, r8
 800d248:	f7ff fc26 	bl	800ca98 <_malloc_r>
 800d24c:	4605      	mov	r5, r0
 800d24e:	2800      	cmp	r0, #0
 800d250:	d0ed      	beq.n	800d22e <_realloc_r+0x1e>
 800d252:	42bc      	cmp	r4, r7
 800d254:	4622      	mov	r2, r4
 800d256:	4631      	mov	r1, r6
 800d258:	bf28      	it	cs
 800d25a:	463a      	movcs	r2, r7
 800d25c:	f7ff fb9a 	bl	800c994 <memcpy>
 800d260:	4631      	mov	r1, r6
 800d262:	4640      	mov	r0, r8
 800d264:	f7ff fbac 	bl	800c9c0 <_free_r>
 800d268:	e7e1      	b.n	800d22e <_realloc_r+0x1e>
 800d26a:	4635      	mov	r5, r6
 800d26c:	e7df      	b.n	800d22e <_realloc_r+0x1e>

0800d26e <_malloc_usable_size_r>:
 800d26e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d272:	1f18      	subs	r0, r3, #4
 800d274:	2b00      	cmp	r3, #0
 800d276:	bfbc      	itt	lt
 800d278:	580b      	ldrlt	r3, [r1, r0]
 800d27a:	18c0      	addlt	r0, r0, r3
 800d27c:	4770      	bx	lr
	...

0800d280 <_init>:
 800d280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d282:	bf00      	nop
 800d284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d286:	bc08      	pop	{r3}
 800d288:	469e      	mov	lr, r3
 800d28a:	4770      	bx	lr

0800d28c <_fini>:
 800d28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d28e:	bf00      	nop
 800d290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d292:	bc08      	pop	{r3}
 800d294:	469e      	mov	lr, r3
 800d296:	4770      	bx	lr
